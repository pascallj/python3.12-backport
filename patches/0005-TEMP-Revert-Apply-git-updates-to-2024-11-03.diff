Description: This reverts commit 38382ad5d10b1f13b0c2853e0b9e1894068de87c
 because it contains unreleased changes.
Author: Pascal Roeleven <dev@pascalroeleven.nl>

--- a/debian/changelog
+++ b/debian/changelog
@@ -7,7 +7,6 @@
 python3.12 (3.12.7-2) unstable; urgency=medium
 
   * Update symbols file.
-  * Apply git updates to 2024-11-03.
   * Adjust lib-argparse.diff to avoid failing test_argparse's translation
     test.
 
--- a/debian/patches/destshared-location.diff
+++ b/debian/patches/destshared-location.diff
@@ -6,7 +6,7 @@
 
 --- a/Makefile.pre.in
 +++ b/Makefile.pre.in
-@@ -168,7 +168,7 @@
+@@ -168,7 +168,7 @@ EXT_SUFFIX=	@EXT_SUFFIX@
  LDSHARED=	@LDSHARED@ $(PY_LDFLAGS)
  BLDSHARED=	@BLDSHARED@ $(PY_CORE_LDFLAGS)
  LDCXXSHARED=	@LDCXXSHARED@ $(PY_LDFLAGS)
--- a/debian/patches/disable-sem-check.diff
+++ b/debian/patches/disable-sem-check.diff
@@ -6,7 +6,7 @@
 
 --- a/configure.ac
 +++ b/configure.ac
-@@ -5821,10 +5821,15 @@
+@@ -5818,10 +5818,15 @@
    [ac_cv_posix_semaphores_enabled=yes])
  )
  AS_VAR_IF([ac_cv_posix_semaphores_enabled], [no], [
--- a/debian/patches/ensurepip-disabled.diff
+++ b/debian/patches/ensurepip-disabled.diff
@@ -55,7 +55,7 @@
  
 --- a/Lib/venv/__init__.py
 +++ b/Lib/venv/__init__.py
-@@ -384,8 +384,26 @@
+@@ -383,8 +383,26 @@
  
      def _setup_pip(self, context):
          """Installs or upgrades pip in a virtual environment"""
--- a/debian/patches/git-updates.diff
+++ b/debian/patches/git-updates.diff
@@ -1,12711 +1,6 @@
-Description: Updates from the 3.12 branch (until 2024-11-03).
+Description: Updates from the 3.12 branch (until 2024-07-30).
  We pick the latest updates from the maintainance branch, and carry them in a
  patch, rather than creating and uploading uploading a new .orig tarball.
 
-# git diff --no-renames 0b05ead877f909b7efe712db758012d9dbece7ce b0e08f513b116986f53053811d946df4e3f8ceab | filterdiff -x ?/.hgignore -x ?/.hgeol -x ?/.hgtags -x ?/.hgtouch -x ?/.gitignore -x ?/.gitattributes -x '?/.github/*' -x '?/.git*' -x ?/.codecov.yml -x ?/.travis.yml -x ?/configure --remove-timestamps
+# git diff --no-renames 8e8a4baf652f6e1cee7acde9d78c4b6154539748 6b4abdee91ef6b20451661ac69a787a676faf698 | filterdiff -x ?/.hgignore -x ?/.hgeol -x ?/.hgtags -x ?/.hgtouch -x ?/.gitignore -x ?/.gitattributes -x '?/.github/*' -x '?/.git*' -x ?/.codecov.yml -x ?/.travis.yml -x ?/configure --remove-timestamps
 
---- a/Doc/Makefile
-+++ b/Doc/Makefile
-@@ -305,13 +305,15 @@
- 
- # for development releases: always build
- .PHONY: autobuild-dev
-+autobuild-dev: DISTVERSION = $(shell $(PYTHON) tools/extensions/patchlevel.py --short)
- autobuild-dev:
--	$(MAKE) dist-no-html SPHINXOPTS='$(SPHINXOPTS) -Ea -A daily=1'
-+	$(MAKE) dist-no-html SPHINXOPTS='$(SPHINXOPTS) -Ea -A daily=1' DISTVERSION=$(DISTVERSION)
- 
- # for HTML-only rebuilds
- .PHONY: autobuild-dev-html
-+autobuild-dev-html: DISTVERSION = $(shell $(PYTHON) tools/extensions/patchlevel.py --short)
- autobuild-dev-html:
--	$(MAKE) dist-html SPHINXOPTS='$(SPHINXOPTS) -Ea -A daily=1'
-+	$(MAKE) dist-html SPHINXOPTS='$(SPHINXOPTS) -Ea -A daily=1' DISTVERSION=$(DISTVERSION)
- 
- # for stable releases: only build if not in pre-release stage (alpha, beta)
- # release candidate downloads are okay, since the stable tree can be in that stage
---- a/Doc/README.rst
-+++ b/Doc/README.rst
-@@ -133,8 +133,5 @@
- 
- Bugs in the toolset should be reported to the tools themselves.
- 
--You can also send a mail to the Python Documentation Team at docs@python.org,
--and we will process your request as soon as possible.
--
--If you want to help the Documentation Team, you are always welcome.  Just send
--a mail to docs@python.org.
-+To help with the documentation, or report any problems, please leave a message
-+on `discuss.python.org <https://discuss.python.org/c/documentation>`_.
---- a/Doc/c-api/buffer.rst
-+++ b/Doc/c-api/buffer.rst
-@@ -244,7 +244,6 @@
- with the correct values: :c:member:`~Py_buffer.obj`, :c:member:`~Py_buffer.buf`,
- :c:member:`~Py_buffer.len`, :c:member:`~Py_buffer.itemsize`, :c:member:`~Py_buffer.ndim`.
- 
--
- readonly, format
- ~~~~~~~~~~~~~~~~
- 
-@@ -253,7 +252,8 @@
-       Controls the :c:member:`~Py_buffer.readonly` field. If set, the exporter
-       MUST provide a writable buffer or else report failure. Otherwise, the
-       exporter MAY provide either a read-only or writable buffer, but the choice
--      MUST be consistent for all consumers.
-+      MUST be consistent for all consumers. For example, :c:expr:`PyBUF_SIMPLE | PyBUF_WRITABLE`
-+      can be used to request a simple writable buffer.
- 
-    .. c:macro:: PyBUF_FORMAT
- 
-@@ -265,8 +265,9 @@
- Since :c:macro:`PyBUF_SIMPLE` is defined as 0, :c:macro:`PyBUF_WRITABLE`
- can be used as a stand-alone flag to request a simple writable buffer.
- 
--:c:macro:`PyBUF_FORMAT` can be \|'d to any of the flags except :c:macro:`PyBUF_SIMPLE`.
--The latter already implies format ``B`` (unsigned bytes).
-+:c:macro:`PyBUF_FORMAT` must be \|'d to any of the flags except :c:macro:`PyBUF_SIMPLE`, because
-+the latter already implies format ``B`` (unsigned bytes). :c:macro:`!PyBUF_FORMAT` cannot be
-+used on its own.
- 
- 
- shape, strides, suboffsets
---- a/Doc/c-api/import.rst
-+++ b/Doc/c-api/import.rst
-@@ -120,14 +120,14 @@
-    such modules have no way to know that the module object is an unknown (and
-    probably damaged with respect to the module author's intents) state.
- 
--   The module's :attr:`__spec__` and :attr:`__loader__` will be set, if
--   not set already, with the appropriate values.  The spec's loader will
--   be set to the module's ``__loader__`` (if set) and to an instance of
--   :class:`~importlib.machinery.SourceFileLoader` otherwise.
--
--   The module's :attr:`__file__` attribute will be set to the code object's
--   :attr:`~codeobject.co_filename`.  If applicable, :attr:`__cached__` will also
--   be set.
-+   The module's :attr:`~module.__spec__` and :attr:`~module.__loader__` will be
-+   set, if not set already, with the appropriate values.  The spec's loader
-+   will be set to the module's :attr:`!__loader__` (if set) and to an instance
-+   of :class:`~importlib.machinery.SourceFileLoader` otherwise.
-+
-+   The module's :attr:`~module.__file__` attribute will be set to the code
-+   object's :attr:`~codeobject.co_filename`.  If applicable,
-+   :attr:`~module.__cached__` will also be set.
- 
-    This function will reload the module if it was already imported.  See
-    :c:func:`PyImport_ReloadModule` for the intended way to reload a module.
-@@ -139,29 +139,29 @@
-    :c:func:`PyImport_ExecCodeModuleWithPathnames`.
- 
-    .. versionchanged:: 3.12
--      The setting of :attr:`__cached__` and :attr:`__loader__` is
--      deprecated. See :class:`~importlib.machinery.ModuleSpec` for
-+      The setting of :attr:`~module.__cached__` and :attr:`~module.__loader__`
-+      is deprecated. See :class:`~importlib.machinery.ModuleSpec` for
-       alternatives.
- 
- 
- .. c:function:: PyObject* PyImport_ExecCodeModuleEx(const char *name, PyObject *co, const char *pathname)
- 
--   Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`__file__` attribute of
--   the module object is set to *pathname* if it is non-``NULL``.
-+   Like :c:func:`PyImport_ExecCodeModule`, but the :attr:`~module.__file__`
-+   attribute of the module object is set to *pathname* if it is non-``NULL``.
- 
-    See also :c:func:`PyImport_ExecCodeModuleWithPathnames`.
- 
- 
- .. c:function:: PyObject* PyImport_ExecCodeModuleObject(PyObject *name, PyObject *co, PyObject *pathname, PyObject *cpathname)
- 
--   Like :c:func:`PyImport_ExecCodeModuleEx`, but the :attr:`__cached__`
-+   Like :c:func:`PyImport_ExecCodeModuleEx`, but the :attr:`~module.__cached__`
-    attribute of the module object is set to *cpathname* if it is
-    non-``NULL``.  Of the three functions, this is the preferred one to use.
- 
-    .. versionadded:: 3.3
- 
-    .. versionchanged:: 3.12
--      Setting :attr:`__cached__` is deprecated. See
-+      Setting :attr:`~module.__cached__` is deprecated. See
-       :class:`~importlib.machinery.ModuleSpec` for alternatives.
- 
- 
---- a/Doc/c-api/init.rst
-+++ b/Doc/c-api/init.rst
-@@ -1269,7 +1269,7 @@
- .. c:function:: void PyThreadState_DeleteCurrent(void)
- 
-    Destroy the current thread state and release the global interpreter lock.
--   Like :c:func:`PyThreadState_Delete`, the global interpreter lock need not
-+   Like :c:func:`PyThreadState_Delete`, the global interpreter lock must
-    be held. The thread state must have been reset with a previous call
-    to :c:func:`PyThreadState_Clear`.
- 
---- a/Doc/c-api/long.rst
-+++ b/Doc/c-api/long.rst
-@@ -350,6 +350,9 @@
-    Exactly what values are considered compact is an implementation detail
-    and is subject to change.
- 
-+   .. versionadded:: 3.12
-+
-+
- .. c:function:: Py_ssize_t PyUnstable_Long_CompactValue(const PyLongObject* op)
- 
-    If *op* is compact, as determined by :c:func:`PyUnstable_Long_IsCompact`,
-@@ -357,3 +360,5 @@
- 
-    Otherwise, the return value is undefined.
- 
-+   .. versionadded:: 3.12
-+
---- a/Doc/c-api/module.rst
-+++ b/Doc/c-api/module.rst
-@@ -37,18 +37,19 @@
-       single: __package__ (module attribute)
-       single: __loader__ (module attribute)
- 
--   Return a new module object with the :attr:`__name__` attribute set to *name*.
--   The module's :attr:`__name__`, :attr:`__doc__`, :attr:`__package__`, and
--   :attr:`__loader__` attributes are filled in (all but :attr:`__name__` are set
--   to ``None``); the caller is responsible for providing a :attr:`__file__`
--   attribute.
-+   Return a new module object with :attr:`module.__name__` set to *name*.
-+   The module's :attr:`!__name__`, :attr:`~module.__doc__`,
-+   :attr:`~module.__package__` and :attr:`~module.__loader__` attributes are
-+   filled in (all but :attr:`!__name__` are set to ``None``). The caller is
-+   responsible for setting a :attr:`~module.__file__` attribute.
- 
-    Return ``NULL`` with an exception set on error.
- 
-    .. versionadded:: 3.3
- 
-    .. versionchanged:: 3.4
--      :attr:`__package__` and :attr:`__loader__` are set to ``None``.
-+      :attr:`~module.__package__` and :attr:`~module.__loader__` are now set to
-+      ``None``.
- 
- 
- .. c:function:: PyObject* PyModule_New(const char *name)
-@@ -77,8 +78,9 @@
-       single: __name__ (module attribute)
-       single: SystemError (built-in exception)
- 
--   Return *module*'s :attr:`__name__` value.  If the module does not provide one,
--   or if it is not a string, :exc:`SystemError` is raised and ``NULL`` is returned.
-+   Return *module*'s :attr:`~module.__name__` value.  If the module does not
-+   provide one, or if it is not a string, :exc:`SystemError` is raised and
-+   ``NULL`` is returned.
- 
-    .. versionadded:: 3.3
- 
-@@ -108,8 +110,8 @@
-       single: SystemError (built-in exception)
- 
-    Return the name of the file from which *module* was loaded using *module*'s
--   :attr:`__file__` attribute.  If this is not defined, or if it is not a
--   unicode string, raise :exc:`SystemError` and return ``NULL``; otherwise return
-+   :attr:`~module.__file__` attribute.  If this is not defined, or if it is not a
-+   string, raise :exc:`SystemError` and return ``NULL``; otherwise return
-    a reference to a Unicode object.
- 
-    .. versionadded:: 3.2
---- a/Doc/c-api/tuple.rst
-+++ b/Doc/c-api/tuple.rst
-@@ -158,7 +158,8 @@
- 
-    .. c:member:: const char *name
- 
--      Name of the struct sequence type.
-+      Fully qualified name of the type; null-terminated UTF-8 encoded.
-+      The name must contain the module name.
- 
-    .. c:member:: const char *doc
- 
---- a/Doc/c-api/typeobj.rst
-+++ b/Doc/c-api/typeobj.rst
-@@ -704,6 +704,19 @@
-          Py_DECREF(tp);
-      }
- 
-+   .. warning::
-+
-+      In a garbage collected Python, :c:member:`!tp_dealloc` may be called from
-+      any Python thread, not just the thread which created the object (if the
-+      object becomes part of a refcount cycle, that cycle might be collected by
-+      a garbage collection on any thread).  This is not a problem for Python
-+      API calls, since the thread on which :c:member:`!tp_dealloc` is called
-+      will own the Global Interpreter Lock (GIL).  However, if the object being
-+      destroyed in turn destroys objects from some other C or C++ library, care
-+      should be taken to ensure that destroying those objects on the thread
-+      which called :c:member:`!tp_dealloc` will not violate any assumptions of
-+      the library.
-+
- 
-    **Inheritance:**
- 
-@@ -2101,17 +2114,6 @@
-           PyErr_Restore(error_type, error_value, error_traceback);
-       }
- 
--   Also, note that, in a garbage collected Python,
--   :c:member:`~PyTypeObject.tp_dealloc` may be called from
--   any Python thread, not just the thread which created the object (if the object
--   becomes part of a refcount cycle, that cycle might be collected by a garbage
--   collection on any thread).  This is not a problem for Python API calls, since
--   the thread on which tp_dealloc is called will own the Global Interpreter Lock
--   (GIL). However, if the object being destroyed in turn destroys objects from some
--   other C or C++ library, care should be taken to ensure that destroying those
--   objects on the thread which called tp_dealloc will not violate any assumptions
--   of the library.
--
-    **Inheritance:**
- 
-    This field is inherited by subtypes.
---- a/Doc/conf.py
-+++ b/Doc/conf.py
-@@ -11,16 +11,22 @@
- import sys
- import time
- 
-+import sphinx
-+
-+# Make our custom extensions available to Sphinx
- sys.path.append(os.path.abspath('tools/extensions'))
- sys.path.append(os.path.abspath('includes'))
- 
-+# Python specific content from Doc/Tools/extensions/pyspecific.py
- from pyspecific import SOURCE_URI
- 
- # General configuration
- # ---------------------
- 
-+# Our custom Sphinx extensions are found in Doc/Tools/extensions/
- extensions = [
-     'audit_events',
-+    'availability',
-     'c_annotations',
-     'glossary_search',
-     'lexers',
-@@ -45,7 +51,7 @@
- except ImportError:
-     _tkinter = None
- # Treat warnings as errors, done here to prevent warnings in Sphinx code from
--# causing spurious test failures.
-+# causing spurious CPython test failures.
- import warnings
- warnings.simplefilter('error')
- del warnings
-@@ -55,7 +61,10 @@
- 
- # General substitutions.
- project = 'Python'
--copyright = f"2001-{time.strftime('%Y')}, Python Software Foundation"
-+if sphinx.version_info[:2] >= (8, 1):
-+    copyright = "2001-%Y, Python Software Foundation"
-+else:
-+    copyright = f"2001-{time.strftime('%Y')}, Python Software Foundation"
- 
- # We look for the Include/patchlevel.h file in the current Python source tree
- # and replace the values accordingly.
-@@ -66,24 +75,26 @@
- .. |python_version_literal| replace:: ``Python {version}``
- """
- 
--# There are two options for replacing |today|: either, you set today to some
--# non-false value, then it is used:
-+# There are two options for replacing |today|. Either, you set today to some
-+# non-false value and use it.
- today = ''
--# Else, today_fmt is used as the format for a strftime call.
-+# Or else, today_fmt is used as the format for a strftime call.
- today_fmt = '%B %d, %Y'
- 
- # By default, highlight as Python 3.
- highlight_language = 'python3'
- 
- # Minimum version of sphinx required
--needs_sphinx = '6.2.1'
-+needs_sphinx = '7.2.6'
- 
- # Create table of contents entries for domain objects (e.g. functions, classes,
- # attributes, etc.). Default is True.
--toc_object_entries = False
-+toc_object_entries = True
-+# Hide parents to tidy up long entries in sidebar
-+toc_object_entries_show_parents = 'hide'
- 
- # Ignore any .rst files in the includes/ directory;
--# they're embedded in pages but not rendered individually.
-+# they're embedded in pages but not rendered as individual pages.
- # Ignore any .rst files in the venv/ directory.
- exclude_patterns = ['includes/*.rst', 'venv/*', 'README.rst']
- venvdir = os.getenv('VENVDIR')
-@@ -167,6 +178,7 @@
-     ('envvar', 'LC_TIME'),
-     ('envvar', 'LINES'),
-     ('envvar', 'LOGNAME'),
-+    ('envvar', 'MANPAGER'),
-     ('envvar', 'PAGER'),
-     ('envvar', 'PATH'),
-     ('envvar', 'PATHEXT'),
-@@ -300,8 +312,9 @@
- # Options for HTML output
- # -----------------------
- 
--# Use our custom theme.
-+# Use our custom theme: https://github.com/python/python-docs-theme
- html_theme = 'python_docs_theme'
-+# Location of overrides for theme templates and static files
- html_theme_path = ['tools']
- html_theme_options = {
-     'collapsiblesidebar': True,
-@@ -338,12 +351,16 @@
- }
- 
- # This 'Last updated on:' timestamp is inserted at the bottom of every page.
--html_time = int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))
--html_last_updated_fmt = time.strftime(
--    '%b %d, %Y (%H:%M UTC)', time.gmtime(html_time)
--)
-+html_last_updated_fmt = '%b %d, %Y (%H:%M UTC)'
-+if sphinx.version_info[:2] >= (8, 1):
-+    html_last_updated_use_utc = True
-+else:
-+    html_time = int(os.environ.get('SOURCE_DATE_EPOCH', time.time()))
-+    html_last_updated_fmt = time.strftime(
-+        html_last_updated_fmt, time.gmtime(html_time)
-+    )
- 
--# Path to find HTML templates.
-+# Path to find HTML templates to override theme
- templates_path = ['tools/templates']
- 
- # Custom sidebar templates, filenames relative to this file.
-@@ -574,15 +591,23 @@
- # mapping unique short aliases to a base URL and a prefix.
- # https://www.sphinx-doc.org/en/master/usage/extensions/extlinks.html
- extlinks = {
--    "cve": ("https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-%s", "CVE-%s"),
--    "cwe": ("https://cwe.mitre.org/data/definitions/%s.html", "CWE-%s"),
-     "pypi": ("https://pypi.org/project/%s/", "%s"),
-     "source": (SOURCE_URI, "%s"),
- }
- extlinks_detect_hardcoded_links = True
- 
--# Options for c_annotations
--# -------------------------
-+if sphinx.version_info[:2] < (8, 1):
-+    # Sphinx 8.1 has in-built CVE and CWE roles.
-+    extlinks |= {
-+        "cve": (
-+            "https://www.cve.org/CVERecord?id=CVE-%s",
-+            "CVE-%s",
-+        ),
-+        "cwe": ("https://cwe.mitre.org/data/definitions/%s.html", "CWE-%s"),
-+    }
-+
-+# Options for c_annotations extension
-+# -----------------------------------
- 
- # Relative filename of the data files
- refcount_file = 'data/refcounts.dat'
---- a/Doc/deprecations/pending-removal-in-3.14.rst
-+++ b/Doc/deprecations/pending-removal-in-3.14.rst
-@@ -1,6 +1,13 @@
- Pending Removal in Python 3.14
- ------------------------------
- 
-+* The import system:
-+
-+  * Setting :attr:`~module.__loader__` on a module while
-+    failing to set :attr:`__spec__.loader <importlib.machinery.ModuleSpec.loader>`
-+    is deprecated. In Python 3.14, :attr:`!__loader__` will cease to be set or
-+    taken into consideration by the import system or the standard library.
-+
- * :mod:`argparse`: The *type*, *choices*, and *metavar* parameters
-   of :class:`!argparse.BooleanOptionalAction` are deprecated
-   and will be removed in 3.14.
---- a/Doc/glossary.rst
-+++ b/Doc/glossary.rst
-@@ -437,7 +437,7 @@
-       <meta path finder>` for use with :data:`sys.meta_path`, and :term:`path
-       entry finders <path entry finder>` for use with :data:`sys.path_hooks`.
- 
--      See :ref:`importsystem` and :mod:`importlib` for much more detail.
-+      See :ref:`finders-and-loaders` and :mod:`importlib` for much more detail.
- 
-    floor division
-       Mathematical division that rounds down to nearest integer.  The floor
-@@ -750,8 +750,11 @@
-    loader
-       An object that loads a module. It must define a method named
-       :meth:`load_module`. A loader is typically returned by a
--      :term:`finder`. See :pep:`302` for details and
--      :class:`importlib.abc.Loader` for an :term:`abstract base class`.
-+      :term:`finder`. See also:
-+
-+      * :ref:`finders-and-loaders`
-+      * :class:`importlib.abc.Loader`
-+      * :pep:`302`
- 
-    locale encoding
-       On Unix, it is the encoding of the LC_CTYPE locale. It can be set with
-@@ -821,6 +824,8 @@
-       A namespace containing the import-related information used to load a
-       module. An instance of :class:`importlib.machinery.ModuleSpec`.
- 
-+      See also :ref:`module-specs`.
-+
-    MRO
-       See :term:`method resolution order`.
- 
-@@ -1134,6 +1139,17 @@
-       when several are given, such as in ``variable_name[1:3:5]``.  The bracket
-       (subscript) notation uses :class:`slice` objects internally.
- 
-+   soft deprecated
-+      A soft deprecated API should not be used in new code,
-+      but it is safe for already existing code to use it.
-+      The API remains documented and tested, but will not be enhanced further.
-+
-+      Soft deprecation, unlike normal deprecation, does not plan on removing the API
-+      and will not emit warnings.
-+
-+      See `PEP 387: Soft Deprecation
-+      <https://peps.python.org/pep-0387/#soft-deprecation>`_.
-+
-    special method
-       .. index:: pair: special; method
- 
---- /dev/null
-+++ b/Doc/howto/argparse-optparse.rst
-@@ -0,0 +1,55 @@
-+.. currentmodule:: argparse
-+
-+.. _upgrading-optparse-code:
-+
-+==========================
-+Upgrading optparse code
-+==========================
-+
-+Originally, the :mod:`argparse` module had attempted to maintain compatibility
-+with :mod:`optparse`.  However, :mod:`optparse` was difficult to extend
-+transparently, particularly with the changes required to support
-+``nargs=`` specifiers and better usage messages.  When most everything in
-+:mod:`optparse` had either been copy-pasted over or monkey-patched, it no
-+longer seemed practical to try to maintain the backwards compatibility.
-+
-+The :mod:`argparse` module improves on the :mod:`optparse`
-+module in a number of ways including:
-+
-+* Handling positional arguments.
-+* Supporting subcommands.
-+* Allowing alternative option prefixes like ``+`` and ``/``.
-+* Handling zero-or-more and one-or-more style arguments.
-+* Producing more informative usage messages.
-+* Providing a much simpler interface for custom ``type`` and ``action``.
-+
-+A partial upgrade path from :mod:`optparse` to :mod:`argparse`:
-+
-+* Replace all :meth:`optparse.OptionParser.add_option` calls with
-+  :meth:`ArgumentParser.add_argument` calls.
-+
-+* Replace ``(options, args) = parser.parse_args()`` with ``args =
-+  parser.parse_args()`` and add additional :meth:`ArgumentParser.add_argument`
-+  calls for the positional arguments. Keep in mind that what was previously
-+  called ``options``, now in the :mod:`argparse` context is called ``args``.
-+
-+* Replace :meth:`optparse.OptionParser.disable_interspersed_args`
-+  by using :meth:`~ArgumentParser.parse_intermixed_args` instead of
-+  :meth:`~ArgumentParser.parse_args`.
-+
-+* Replace callback actions and the ``callback_*`` keyword arguments with
-+  ``type`` or ``action`` arguments.
-+
-+* Replace string names for ``type`` keyword arguments with the corresponding
-+  type objects (e.g. int, float, complex, etc).
-+
-+* Replace :class:`optparse.Values` with :class:`Namespace` and
-+  :exc:`optparse.OptionError` and :exc:`optparse.OptionValueError` with
-+  :exc:`ArgumentError`.
-+
-+* Replace strings with implicit arguments such as ``%default`` or ``%prog`` with
-+  the standard Python syntax to use dictionaries to format strings, that is,
-+  ``%(default)s`` and ``%(prog)s``.
-+
-+* Replace the OptionParser constructor ``version`` argument with a call to
-+  ``parser.add_argument('--version', action='version', version='<the version>')``.
---- a/Doc/howto/argparse.rst
-+++ b/Doc/howto/argparse.rst
-@@ -841,6 +841,53 @@
- 
- To translate your own strings in the :mod:`argparse` output, use :mod:`gettext`.
- 
-+Custom type converters
-+======================
-+
-+The :mod:`argparse` module allows you to specify custom type converters for
-+your command-line arguments. This allows you to modify user input before it's
-+stored in the :class:`argparse.Namespace`. This can be useful when you need to
-+pre-process the input before it is used in your program.
-+
-+When using a custom type converter, you can use any callable that takes a
-+single string argument (the argument value) and returns the converted value.
-+However, if you need to handle more complex scenarios, you can use a custom
-+action class with the **action** parameter instead.
-+
-+For example, let's say you want to handle arguments with different prefixes and
-+process them accordingly::
-+
-+   import argparse
-+
-+   parser = argparse.ArgumentParser(prefix_chars='-+')
-+
-+   parser.add_argument('-a', metavar='<value>', action='append',
-+                       type=lambda x: ('-', x))
-+   parser.add_argument('+a', metavar='<value>', action='append',
-+                       type=lambda x: ('+', x))
-+
-+   args = parser.parse_args()
-+   print(args)
-+
-+Output:
-+
-+.. code-block:: shell-session
-+
-+   $ python prog.py -a value1 +a value2
-+   Namespace(a=[('-', 'value1'), ('+', 'value2')])
-+
-+In this example, we:
-+
-+* Created a parser with custom prefix characters using the ``prefix_chars``
-+  parameter.
-+
-+* Defined two arguments, ``-a`` and ``+a``, which used the ``type`` parameter to
-+  create custom type converters to store the value in a tuple with the prefix.
-+
-+Without the custom type converters, the arguments would have treated the ``-a``
-+and ``+a`` as the same argument, which would have been undesirable. By using custom
-+type converters, we were able to differentiate between the two arguments.
-+
- Conclusion
- ==========
- 
---- a/Doc/library/_thread.rst
-+++ b/Doc/library/_thread.rst
-@@ -210,23 +210,20 @@
- 
- .. index:: pair: module; signal
- 
--* Threads interact strangely with interrupts: the :exc:`KeyboardInterrupt`
--  exception will be received by an arbitrary thread.  (When the :mod:`signal`
--  module is available, interrupts always go to the main thread.)
-+* Interrupts always go to the main thread (the :exc:`KeyboardInterrupt`
-+  exception will be received by that thread.)
- 
- * Calling :func:`sys.exit` or raising the :exc:`SystemExit` exception is
-   equivalent to calling :func:`_thread.exit`.
- 
--* It is not possible to interrupt the :meth:`~threading.Lock.acquire` method on
--  a lock --- the :exc:`KeyboardInterrupt` exception will happen after the lock
--  has been acquired.
-+* It is platform-dependent whether the :meth:`~threading.Lock.acquire` method
-+  on a lock can be interrupted (so that the :exc:`KeyboardInterrupt` exception
-+  will happen immediately, rather than only after the lock has been acquired or
-+  the operation has timed out). It can be interrupted on POSIX, but not on
-+  Windows.
- 
- * When the main thread exits, it is system defined whether the other threads
-   survive.  On most systems, they are killed without executing
-   :keyword:`try` ... :keyword:`finally` clauses or executing object
-   destructors.
- 
--* When the main thread exits, it does not do any of its usual cleanup (except
--  that :keyword:`try` ... :keyword:`finally` clauses are honored), and the
--  standard I/O files are not flushed.
--
---- a/Doc/library/argparse.rst
-+++ b/Doc/library/argparse.rst
-@@ -1,4 +1,4 @@
--:mod:`!argparse` --- Parser for command-line options, arguments and sub-commands
-+:mod:`!argparse` --- Parser for command-line options, arguments and subcommands
- ================================================================================
- 
- .. module:: argparse
-@@ -19,17 +19,13 @@
-    introduction to Python command-line parsing, have a look at the
-    :ref:`argparse tutorial <argparse-tutorial>`.
- 
--The :mod:`argparse` module makes it easy to write user-friendly command-line
--interfaces. The program defines what arguments it requires, and :mod:`argparse`
--will figure out how to parse those out of :data:`sys.argv`.  The :mod:`argparse`
-+The :mod:`!argparse` module makes it easy to write user-friendly command-line
-+interfaces. The program defines what arguments it requires, and :mod:`!argparse`
-+will figure out how to parse those out of :data:`sys.argv`.  The :mod:`!argparse`
- module also automatically generates help and usage messages.  The module
- will also issue errors when users give the program invalid arguments.
- 
--
--Core Functionality
--------------------
--
--The :mod:`argparse` module's support for command-line interfaces is built
-+The :mod:`!argparse` module's support for command-line interfaces is built
- around an instance of :class:`argparse.ArgumentParser`.  It is a container for
- argument specifications and has options that apply to the parser as whole::
- 
-@@ -53,133 +49,9 @@
-    args = parser.parse_args()
-    print(args.filename, args.count, args.verbose)
- 
--
--Quick Links for add_argument()
--------------------------------
--
--============================ =========================================================== ==========================================================================================================================
--Name                         Description                                                 Values
--============================ =========================================================== ==========================================================================================================================
--action_                      Specify how an argument should be handled                   ``'store'``, ``'store_const'``, ``'store_true'``, ``'append'``, ``'append_const'``, ``'count'``, ``'help'``, ``'version'``
--choices_                     Limit values to a specific set of choices                   ``['foo', 'bar']``, ``range(1, 10)``, or :class:`~collections.abc.Container` instance
--const_                       Store a constant value
--default_                     Default value used when an argument is not provided         Defaults to ``None``
--dest_                        Specify the attribute name used in the result namespace
--help_                        Help message for an argument
--metavar_                     Alternate display name for the argument as shown in help
--nargs_                       Number of times the argument can be used                    :class:`int`, ``'?'``, ``'*'``, or ``'+'``
--required_                    Indicate whether an argument is required or optional        ``True`` or ``False``
--:ref:`type <argparse-type>`  Automatically convert an argument to the given type         :class:`int`, :class:`float`, ``argparse.FileType('w')``, or callable function
--============================ =========================================================== ==========================================================================================================================
--
--
--Example
---------
--
--The following code is a Python program that takes a list of integers and
--produces either the sum or the max::
--
--   import argparse
--
--   parser = argparse.ArgumentParser(description='Process some integers.')
--   parser.add_argument('integers', metavar='N', type=int, nargs='+',
--                       help='an integer for the accumulator')
--   parser.add_argument('--sum', dest='accumulate', action='store_const',
--                       const=sum, default=max,
--                       help='sum the integers (default: find the max)')
--
--   args = parser.parse_args()
--   print(args.accumulate(args.integers))
--
--Assuming the above Python code is saved into a file called ``prog.py``, it can
--be run at the command line and it provides useful help messages:
--
--.. code-block:: shell-session
--
--   $ python prog.py -h
--   usage: prog.py [-h] [--sum] N [N ...]
--
--   Process some integers.
--
--   positional arguments:
--    N           an integer for the accumulator
--
--   options:
--    -h, --help  show this help message and exit
--    --sum       sum the integers (default: find the max)
--
--When run with the appropriate arguments, it prints either the sum or the max of
--the command-line integers:
--
--.. code-block:: shell-session
--
--   $ python prog.py 1 2 3 4
--   4
--
--   $ python prog.py 1 2 3 4 --sum
--   10
--
--If invalid arguments are passed in, an error will be displayed:
--
--.. code-block:: shell-session
--
--   $ python prog.py a b c
--   usage: prog.py [-h] [--sum] N [N ...]
--   prog.py: error: argument N: invalid int value: 'a'
--
--The following sections walk you through this example.
--
--
--Creating a parser
--^^^^^^^^^^^^^^^^^
--
--The first step in using the :mod:`argparse` is creating an
--:class:`ArgumentParser` object::
--
--   >>> parser = argparse.ArgumentParser(description='Process some integers.')
--
--The :class:`ArgumentParser` object will hold all the information necessary to
--parse the command line into Python data types.
--
--
--Adding arguments
--^^^^^^^^^^^^^^^^
--
--Filling an :class:`ArgumentParser` with information about program arguments is
--done by making calls to the :meth:`~ArgumentParser.add_argument` method.
--Generally, these calls tell the :class:`ArgumentParser` how to take the strings
--on the command line and turn them into objects.  This information is stored and
--used when :meth:`~ArgumentParser.parse_args` is called. For example::
--
--   >>> parser.add_argument('integers', metavar='N', type=int, nargs='+',
--   ...                     help='an integer for the accumulator')
--   >>> parser.add_argument('--sum', dest='accumulate', action='store_const',
--   ...                     const=sum, default=max,
--   ...                     help='sum the integers (default: find the max)')
--
--Later, calling :meth:`~ArgumentParser.parse_args` will return an object with
--two attributes, ``integers`` and ``accumulate``.  The ``integers`` attribute
--will be a list of one or more integers, and the ``accumulate`` attribute will be
--either the :func:`sum` function, if ``--sum`` was specified at the command line,
--or the :func:`max` function if it was not.
--
--
--Parsing arguments
--^^^^^^^^^^^^^^^^^
--
--:class:`ArgumentParser` parses arguments through the
--:meth:`~ArgumentParser.parse_args` method.  This will inspect the command line,
--convert each argument to the appropriate type and then invoke the appropriate action.
--In most cases, this means a simple :class:`Namespace` object will be built up from
--attributes parsed out of the command line::
--
--   >>> parser.parse_args(['--sum', '7', '-1', '42'])
--   Namespace(accumulate=<built-in function sum>, integers=[7, -1, 42])
--
--In a script, :meth:`~ArgumentParser.parse_args` will typically be called with no
--arguments, and the :class:`ArgumentParser` will automatically determine the
--command-line arguments from :data:`sys.argv`.
--
-+.. note::
-+   If you're looking for a guide about how to upgrade :mod:`optparse` code
-+   to :mod:`!argparse`, see :ref:`Upgrading Optparse Code <upgrading-optparse-code>`.
- 
- ArgumentParser objects
- ----------------------
-@@ -228,7 +100,7 @@
-    * allow_abbrev_ - Allows long options to be abbreviated if the
-      abbreviation is unambiguous. (default: ``True``)
- 
--   * exit_on_error_ - Determines whether or not ArgumentParser exits with
-+   * exit_on_error_ - Determines whether or not :class:`!ArgumentParser` exits with
-      error info when an error occurs. (default: ``True``)
- 
-    .. versionchanged:: 3.5
-@@ -249,39 +121,21 @@
- prog
- ^^^^
- 
--By default, :class:`ArgumentParser` objects use the base name
--(see :func:`os.path.basename`) of ``sys.argv[0]`` to determine
--how to display the name of the program in help messages.  This default is almost
--always desirable because it will make the help messages match the name that was
--used to invoke the program on the command line.  For example, consider a file
--named ``myprogram.py`` with the following code::
--
--   import argparse
--   parser = argparse.ArgumentParser()
--   parser.add_argument('--foo', help='foo help')
--   args = parser.parse_args()
--
--The help for this program will display ``myprogram.py`` as the program name
--(regardless of where the program was invoked from):
--
--.. code-block:: shell-session
--
--   $ python myprogram.py --help
--   usage: myprogram.py [-h] [--foo FOO]
--
--   options:
--    -h, --help  show this help message and exit
--    --foo FOO   foo help
--   $ cd ..
--   $ python subdir/myprogram.py --help
--   usage: myprogram.py [-h] [--foo FOO]
- 
--   options:
--    -h, --help  show this help message and exit
--    --foo FOO   foo help
-+By default, :class:`ArgumentParser` calculates the name of the program
-+to display in help messages depending on the way the Python interpreter was run:
- 
--To change this default behavior, another value can be supplied using the
--``prog=`` argument to :class:`ArgumentParser`::
-+* The :func:`base name <os.path.basename>` of ``sys.argv[0]`` if a file was
-+  passed as argument.
-+* The Python interpreter name followed by ``sys.argv[0]`` if a directory or
-+  a zipfile was passed as argument.
-+* The Python interpreter name followed by ``-m`` followed by the
-+  module or package name if the :option:`-m` option was used.
-+
-+This default is almost always desirable because it will make the help messages
-+match the string that was used to invoke the program on the command line.
-+However, to change this default behavior, another value can be supplied using
-+the ``prog=`` argument to :class:`ArgumentParser`::
- 
-    >>> parser = argparse.ArgumentParser(prog='myprogram')
-    >>> parser.print_help()
-@@ -310,22 +164,8 @@
- ^^^^^
- 
- By default, :class:`ArgumentParser` calculates the usage message from the
--arguments it contains::
--
--   >>> parser = argparse.ArgumentParser(prog='PROG')
--   >>> parser.add_argument('--foo', nargs='?', help='foo help')
--   >>> parser.add_argument('bar', nargs='+', help='bar help')
--   >>> parser.print_help()
--   usage: PROG [-h] [--foo [FOO]] bar [bar ...]
--
--   positional arguments:
--    bar          bar help
--
--   options:
--    -h, --help   show this help message and exit
--    --foo [FOO]  foo help
--
--The default message can be overridden with the ``usage=`` keyword argument::
-+arguments it contains. The default message can be overridden with the
-+``usage=`` keyword argument::
- 
-    >>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]')
-    >>> parser.add_argument('--foo', nargs='?', help='foo help')
-@@ -353,16 +193,7 @@
- ``description=`` keyword argument.  This argument gives a brief description of
- what the program does and how it works.  In help messages, the description is
- displayed between the command-line usage string and the help messages for the
--various arguments::
--
--   >>> parser = argparse.ArgumentParser(description='A foo that bars')
--   >>> parser.print_help()
--   usage: argparse.py [-h]
--
--   A foo that bars
--
--   options:
--    -h, --help  show this help message and exit
-+various arguments.
- 
- By default, the description will be line-wrapped so that it fits within the
- given space.  To change this behavior, see the formatter_class_ argument.
-@@ -492,7 +323,7 @@
-     -h, --help  show this help message and exit
- 
- :class:`RawTextHelpFormatter` maintains whitespace for all sorts of help text,
--including argument descriptions. However, multiple new lines are replaced with
-+including argument descriptions. However, multiple newlines are replaced with
- one. If you wish to preserve multiple blank lines, add spaces between the
- newlines.
- 
-@@ -541,7 +372,7 @@
- Parsers that need to support different or additional prefix
- characters, e.g. for options
- like ``+f`` or ``/foo``, may specify them using the ``prefix_chars=`` argument
--to the ArgumentParser constructor::
-+to the :class:`ArgumentParser` constructor::
- 
-    >>> parser = argparse.ArgumentParser(prog='PROG', prefix_chars='-+')
-    >>> parser.add_argument('+f')
-@@ -586,8 +417,8 @@
- 
- .. versionchanged:: 3.12
-    :class:`ArgumentParser` changed encoding and errors to read arguments files
--   from default (e.g. :func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>` and
--   ``"strict"``) to :term:`filesystem encoding and error handler`.
-+   from default (e.g. :func:`locale.getpreferredencoding(False) <locale.getpreferredencoding>`
-+   and ``"strict"``) to the :term:`filesystem encoding and error handler`.
-    Arguments file should be encoded in UTF-8 instead of ANSI Codepage on Windows.
- 
- 
-@@ -672,26 +503,9 @@
- add_help
- ^^^^^^^^
- 
--By default, ArgumentParser objects add an option which simply displays
--the parser's help message. For example, consider a file named
--``myprogram.py`` containing the following code::
--
--   import argparse
--   parser = argparse.ArgumentParser()
--   parser.add_argument('--foo', help='foo help')
--   args = parser.parse_args()
--
--If ``-h`` or ``--help`` is supplied at the command line, the ArgumentParser
--help will be printed:
--
--.. code-block:: shell-session
--
--   $ python myprogram.py --help
--   usage: myprogram.py [-h] [--foo FOO]
--
--   options:
--    -h, --help  show this help message and exit
--    --foo FOO   foo help
-+By default, :class:`ArgumentParser` objects add an option which simply displays
-+the parser's help message. If ``-h`` or ``--help`` is supplied at the command
-+line, the :class:`!ArgumentParser` help will be printed.
- 
- Occasionally, it may be useful to disable the addition of this help option.
- This can be achieved by passing ``False`` as the ``add_help=`` argument to
-@@ -723,7 +537,8 @@
- ^^^^^^^^^^^^^
- 
- Normally, when you pass an invalid argument list to the :meth:`~ArgumentParser.parse_args`
--method of an :class:`ArgumentParser`, it will exit with error info.
-+method of an :class:`ArgumentParser`, it will print a *message* to :data:`sys.stderr` and exit with a status
-+code of 2.
- 
- If the user would like to catch errors manually, the feature can be enabled by setting
- ``exit_on_error`` to ``False``::
-@@ -744,15 +559,15 @@
- The add_argument() method
- -------------------------
- 
--.. method:: ArgumentParser.add_argument(name or flags..., [action], [nargs], \
-+.. method:: ArgumentParser.add_argument(name or flags..., *, [action], [nargs], \
-                            [const], [default], [type], [choices], [required], \
-                            [help], [metavar], [dest])
- 
-    Define how a single command-line argument should be parsed.  Each parameter
-    has its own more detailed description below, but in short they are:
- 
--   * `name or flags`_ - Either a name or a list of option strings, e.g. ``foo``
--     or ``-f, --foo``.
-+   * `name or flags`_ - Either a name or a list of option strings, e.g. ``'foo'``
-+     or ``'-f', '--foo'``.
- 
-    * action_ - The basic type of action to be taken when this argument is
-      encountered at the command line.
-@@ -781,7 +596,7 @@
- The following sections describe how each of these are used.
- 
- 
--.. _name_or_flags:
-+.. _`name or flags`:
- 
- name or flags
- ^^^^^^^^^^^^^
-@@ -828,12 +643,7 @@
- how the command-line arguments should be handled. The supplied actions are:
- 
- * ``'store'`` - This just stores the argument's value.  This is the default
--  action. For example::
--
--    >>> parser = argparse.ArgumentParser()
--    >>> parser.add_argument('--foo')
--    >>> parser.parse_args('--foo 1'.split())
--    Namespace(foo='1')
-+  action.
- 
- * ``'store_const'`` - This stores the value specified by the const_ keyword
-   argument; note that the const_ keyword argument defaults to ``None``.  The
-@@ -848,7 +658,7 @@
- * ``'store_true'`` and ``'store_false'`` - These are special cases of
-   ``'store_const'`` used for storing the values ``True`` and ``False``
-   respectively.  In addition, they create default values of ``False`` and
--  ``True`` respectively.  For example::
-+  ``True`` respectively::
- 
-     >>> parser = argparse.ArgumentParser()
-     >>> parser.add_argument('--foo', action='store_true')
-@@ -880,6 +690,21 @@
-     >>> parser.parse_args('--str --int'.split())
-     Namespace(types=[<class 'str'>, <class 'int'>])
- 
-+* ``'extend'`` - This stores a list and appends each item from the multi-value
-+  argument list to it.
-+  The ``'extend'`` action is typically used with the nargs_ keyword argument
-+  value ``'+'`` or ``'*'``.
-+  Note that when nargs_ is ``None`` (the default) or ``'?'``, each
-+  character of the argument string will be appended to the list.
-+  Example usage::
-+
-+    >>> parser = argparse.ArgumentParser()
-+    >>> parser.add_argument("--foo", action="extend", nargs="+", type=str)
-+    >>> parser.parse_args(["--foo", "f1", "--foo", "f2", "f3", "f4"])
-+    Namespace(foo=['f1', 'f2', 'f3', 'f4'])
-+
-+  .. versionadded:: 3.8
-+
- * ``'count'`` - This counts the number of times a keyword argument occurs. For
-   example, this is useful for increasing verbosity levels::
- 
-@@ -905,33 +730,27 @@
-     >>> parser.parse_args(['--version'])
-     PROG 2.0
- 
--* ``'extend'`` - This stores a list, and extends each argument value to the
--  list.
--  Example usage::
--
--    >>> parser = argparse.ArgumentParser()
--    >>> parser.add_argument("--foo", action="extend", nargs="+", type=str)
--    >>> parser.parse_args(["--foo", "f1", "--foo", "f2", "f3", "f4"])
--    Namespace(foo=['f1', 'f2', 'f3', 'f4'])
-+Only actions that consume command-line arguments (e.g. ``'store'``,
-+``'append'`` or ``'extend'``) can be used with positional arguments.
- 
--  .. versionadded:: 3.8
-+.. class:: BooleanOptionalAction
- 
--You may also specify an arbitrary action by passing an Action subclass or
--other object that implements the same interface. The ``BooleanOptionalAction``
--is available in ``argparse`` and adds support for boolean actions such as
--``--foo`` and ``--no-foo``::
-+   You may also specify an arbitrary action by passing an :class:`Action` subclass or
-+   other object that implements the same interface. The :class:`!BooleanOptionalAction`
-+   is available in :mod:`!argparse` and adds support for boolean actions such as
-+   ``--foo`` and ``--no-foo``::
-+
-+       >>> import argparse
-+       >>> parser = argparse.ArgumentParser()
-+       >>> parser.add_argument('--foo', action=argparse.BooleanOptionalAction)
-+       >>> parser.parse_args(['--no-foo'])
-+       Namespace(foo=False)
- 
--    >>> import argparse
--    >>> parser = argparse.ArgumentParser()
--    >>> parser.add_argument('--foo', action=argparse.BooleanOptionalAction)
--    >>> parser.parse_args(['--no-foo'])
--    Namespace(foo=False)
--
--.. versionadded:: 3.9
-+   .. versionadded:: 3.9
- 
- The recommended way to create a custom action is to extend :class:`Action`,
--overriding the ``__call__`` method and optionally the ``__init__`` and
--``format_usage`` methods.
-+overriding the :meth:`!__call__` method and optionally the :meth:`!__init__` and
-+:meth:`!format_usage` methods.
- 
- An example of a custom action::
- 
-@@ -961,7 +780,7 @@
- nargs
- ^^^^^
- 
--ArgumentParser objects usually associate a single command-line argument with a
-+:class:`ArgumentParser` objects usually associate a single command-line argument with a
- single action to be taken.  The ``nargs`` keyword argument associates a
- different number of command-line arguments with a single action.
- See also :ref:`specifying-ambiguous-arguments`. The supported values are:
-@@ -1043,6 +862,8 @@
- If the ``nargs`` keyword argument is not provided, the number of arguments consumed
- is determined by the action_.  Generally this means a single command-line argument
- will be consumed and a single item (not a list) will be produced.
-+Actions that do not consume command-line arguments (e.g.
-+``'store_const'``) set ``nargs=0``.
- 
- 
- .. _const:
-@@ -1093,7 +914,7 @@
-    Namespace(foo=42)
- 
- If the target namespace already has an attribute set, the action *default*
--will not over write it::
-+will not overwrite it::
- 
-    >>> parser = argparse.ArgumentParser()
-    >>> parser.add_argument('--foo', default=42)
-@@ -1167,7 +988,6 @@
-    parser.add_argument('distance', type=float)
-    parser.add_argument('street', type=ascii)
-    parser.add_argument('code_point', type=ord)
--   parser.add_argument('source_file', type=open)
-    parser.add_argument('dest_file', type=argparse.FileType('w', encoding='latin-1'))
-    parser.add_argument('datapath', type=pathlib.Path)
- 
-@@ -1198,10 +1018,11 @@
- :exc:`FileNotFoundError` exception would not be handled at all.
- 
- Even :class:`~argparse.FileType` has its limitations for use with the ``type``
--keyword.  If one argument uses *FileType* and then a subsequent argument fails,
--an error is reported but the file is not automatically closed.  In this case, it
--would be better to wait until after the parser has run and then use the
--:keyword:`with`-statement to manage the files.
-+keyword.  If one argument uses :class:`~argparse.FileType` and then a
-+subsequent argument fails, an error is reported but the file is not
-+automatically closed.  In this case, it would be better to wait until after
-+the parser has run and then use the :keyword:`with`-statement to manage the
-+files.
- 
- For type checkers that simply check against a fixed set of values, consider
- using the choices_ keyword instead.
-@@ -1229,15 +1050,7 @@
- 
- Note that inclusion in the *choices* sequence is checked after any type_
- conversions have been performed, so the type of the objects in the *choices*
--sequence should match the type_ specified::
--
--   >>> parser = argparse.ArgumentParser(prog='doors.py')
--   >>> parser.add_argument('door', type=int, choices=range(1, 4))
--   >>> print(parser.parse_args(['3']))
--   Namespace(door=3)
--   >>> parser.parse_args(['4'])
--   usage: doors.py [-h] {1,2,3}
--   doors.py: error: argument door: invalid choice: 4 (choose from 1, 2, 3)
-+sequence should match the type_ specified.
- 
- Any sequence can be passed as the *choices* value, so :class:`list` objects,
- :class:`tuple` objects, and custom sequences are all supported.
-@@ -1256,7 +1069,7 @@
- required
- ^^^^^^^^
- 
--In general, the :mod:`argparse` module assumes that flags like ``-f`` and ``--bar``
-+In general, the :mod:`!argparse` module assumes that flags like ``-f`` and ``--bar``
- indicate *optional* arguments, which can always be omitted at the command line.
- To make an option *required*, ``True`` can be specified for the ``required=``
- keyword argument to :meth:`~ArgumentParser.add_argument`::
-@@ -1287,22 +1100,7 @@
- The ``help`` value is a string containing a brief description of the argument.
- When a user requests help (usually by using ``-h`` or ``--help`` at the
- command line), these ``help`` descriptions will be displayed with each
--argument::
--
--   >>> parser = argparse.ArgumentParser(prog='frobble')
--   >>> parser.add_argument('--foo', action='store_true',
--   ...                     help='foo the bars before frobbling')
--   >>> parser.add_argument('bar', nargs='+',
--   ...                     help='one of the bars to be frobbled')
--   >>> parser.parse_args(['-h'])
--   usage: frobble [-h] [--foo] bar [bar ...]
--
--   positional arguments:
--    bar     one of the bars to be frobbled
--
--   options:
--    -h, --help  show this help message and exit
--    --foo   foo the bars before frobbling
-+argument.
- 
- The ``help`` strings can include various format specifiers to avoid repetition
- of things like the program name or the argument default_.  The available
-@@ -1324,7 +1122,7 @@
- As the help string supports %-formatting, if you want a literal ``%`` to appear
- in the help string, you must escape it as ``%%``.
- 
--:mod:`argparse` supports silencing the help entry for certain options, by
-+:mod:`!argparse` supports silencing the help entry for certain options, by
- setting the ``help`` value to ``argparse.SUPPRESS``::
- 
-    >>> parser = argparse.ArgumentParser(prog='frobble')
-@@ -1342,7 +1140,7 @@
- ^^^^^^^
- 
- When :class:`ArgumentParser` generates help messages, it needs some way to refer
--to each expected argument.  By default, ArgumentParser objects use the dest_
-+to each expected argument.  By default, :class:`!ArgumentParser` objects use the dest_
- value as the "name" of each object.  By default, for positional argument
- actions, the dest_ value is used directly, and for optional argument actions,
- the dest_ value is uppercased.  So, a single positional argument with
-@@ -1446,7 +1244,7 @@
- Action classes
- ^^^^^^^^^^^^^^
- 
--Action classes implement the Action API, a callable which returns a callable
-+:class:`!Action` classes implement the Action API, a callable which returns a callable
- which processes arguments from the command-line. Any object which follows
- this API may be passed as the ``action`` parameter to
- :meth:`~ArgumentParser.add_argument`.
-@@ -1455,40 +1253,46 @@
-                   type=None, choices=None, required=False, help=None, \
-                   metavar=None)
- 
--Action objects are used by an ArgumentParser to represent the information
--needed to parse a single argument from one or more strings from the
--command line. The Action class must accept the two positional arguments
--plus any keyword arguments passed to :meth:`ArgumentParser.add_argument`
--except for the ``action`` itself.
--
--Instances of Action (or return value of any callable to the ``action``
--parameter) should have attributes "dest", "option_strings", "default", "type",
--"required", "help", etc. defined. The easiest way to ensure these attributes
--are defined is to call ``Action.__init__``.
--
--Action instances should be callable, so subclasses must override the
--``__call__`` method, which should accept four parameters:
--
--* ``parser`` - The ArgumentParser object which contains this action.
--
--* ``namespace`` - The :class:`Namespace` object that will be returned by
--  :meth:`~ArgumentParser.parse_args`.  Most actions add an attribute to this
--  object using :func:`setattr`.
--
--* ``values`` - The associated command-line arguments, with any type conversions
--  applied.  Type conversions are specified with the type_ keyword argument to
--  :meth:`~ArgumentParser.add_argument`.
--
--* ``option_string`` - The option string that was used to invoke this action.
--  The ``option_string`` argument is optional, and will be absent if the action
--  is associated with a positional argument.
--
--The ``__call__`` method may perform arbitrary actions, but will typically set
--attributes on the ``namespace`` based on ``dest`` and ``values``.
--
--Action subclasses can define a ``format_usage`` method that takes no argument
--and return a string which will be used when printing the usage of the program.
--If such method is not provided, a sensible default will be used.
-+   :class:`!Action` objects are used by an :class:`ArgumentParser` to represent the information
-+   needed to parse a single argument from one or more strings from the
-+   command line. The :class:`!Action` class must accept the two positional arguments
-+   plus any keyword arguments passed to :meth:`ArgumentParser.add_argument`
-+   except for the ``action`` itself.
-+
-+   Instances of :class:`!Action` (or return value of any callable to the
-+   ``action`` parameter) should have attributes :attr:`!dest`,
-+   :attr:`!option_strings`, :attr:`!default`, :attr:`!type`, :attr:`!required`,
-+   :attr:`!help`, etc. defined. The easiest way to ensure these attributes
-+   are defined is to call :meth:`!Action.__init__`.
-+
-+   .. method:: __call__(parser, namespace, values, option_string=None)
-+
-+      :class:`!Action` instances should be callable, so subclasses must override the
-+      :meth:`!__call__` method, which should accept four parameters:
-+
-+      * *parser* - The :class:`ArgumentParser` object which contains this action.
-+
-+      * *namespace* - The :class:`Namespace` object that will be returned by
-+        :meth:`~ArgumentParser.parse_args`.  Most actions add an attribute to this
-+        object using :func:`setattr`.
-+
-+      * *values* - The associated command-line arguments, with any type conversions
-+        applied.  Type conversions are specified with the type_ keyword argument to
-+        :meth:`~ArgumentParser.add_argument`.
-+
-+      * *option_string* - The option string that was used to invoke this action.
-+        The ``option_string`` argument is optional, and will be absent if the action
-+        is associated with a positional argument.
-+
-+      The :meth:`!__call__` method may perform arbitrary actions, but will typically set
-+      attributes on the ``namespace`` based on ``dest`` and ``values``.
-+
-+   .. method:: format_usage()
-+
-+      :class:`!Action` subclasses can define a :meth:`!format_usage` method that takes no argument
-+      and return a string which will be used when printing the usage of the program.
-+      If such method is not provided, a sensible default will be used.
-+
- 
- The parse_args() method
- -----------------------
-@@ -1500,7 +1304,7 @@
- 
-    Previous calls to :meth:`add_argument` determine exactly what objects are
-    created and how they are assigned. See the documentation for
--   :meth:`add_argument` for details.
-+   :meth:`!add_argument` for details.
- 
-    * args_ - List of strings to parse.  The default is taken from
-      :data:`sys.argv`.
-@@ -1656,7 +1460,7 @@
- Beyond ``sys.argv``
- ^^^^^^^^^^^^^^^^^^^
- 
--Sometimes it may be useful to have an ArgumentParser parse arguments other than those
-+Sometimes it may be useful to have an :class:`ArgumentParser` parse arguments other than those
- of :data:`sys.argv`.  This can be accomplished by passing a list of strings to
- :meth:`~ArgumentParser.parse_args`.  This is useful for testing at the
- interactive prompt::
-@@ -1683,29 +1487,29 @@
-    Simple class used by default by :meth:`~ArgumentParser.parse_args` to create
-    an object holding attributes and return it.
- 
--This class is deliberately simple, just an :class:`object` subclass with a
--readable string representation. If you prefer to have dict-like view of the
--attributes, you can use the standard Python idiom, :func:`vars`::
-+   This class is deliberately simple, just an :class:`object` subclass with a
-+   readable string representation. If you prefer to have dict-like view of the
-+   attributes, you can use the standard Python idiom, :func:`vars`::
- 
--   >>> parser = argparse.ArgumentParser()
--   >>> parser.add_argument('--foo')
--   >>> args = parser.parse_args(['--foo', 'BAR'])
--   >>> vars(args)
--   {'foo': 'BAR'}
--
--It may also be useful to have an :class:`ArgumentParser` assign attributes to an
--already existing object, rather than a new :class:`Namespace` object.  This can
--be achieved by specifying the ``namespace=`` keyword argument::
--
--   >>> class C:
--   ...     pass
--   ...
--   >>> c = C()
--   >>> parser = argparse.ArgumentParser()
--   >>> parser.add_argument('--foo')
--   >>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)
--   >>> c.foo
--   'BAR'
-+      >>> parser = argparse.ArgumentParser()
-+      >>> parser.add_argument('--foo')
-+      >>> args = parser.parse_args(['--foo', 'BAR'])
-+      >>> vars(args)
-+      {'foo': 'BAR'}
-+
-+   It may also be useful to have an :class:`ArgumentParser` assign attributes to an
-+   already existing object, rather than a new :class:`Namespace` object.  This can
-+   be achieved by specifying the ``namespace=`` keyword argument::
-+
-+      >>> class C:
-+      ...     pass
-+      ...
-+      >>> c = C()
-+      >>> parser = argparse.ArgumentParser()
-+      >>> parser.add_argument('--foo')
-+      >>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)
-+      >>> c.foo
-+      'BAR'
- 
- 
- Other utilities
-@@ -1714,38 +1518,38 @@
- Sub-commands
- ^^^^^^^^^^^^
- 
--.. method:: ArgumentParser.add_subparsers([title], [description], [prog], \
-+.. method:: ArgumentParser.add_subparsers(*, [title], [description], [prog], \
-                                           [parser_class], [action], \
--                                          [option_strings], [dest], [required], \
-+                                          [dest], [required], \
-                                           [help], [metavar])
- 
--   Many programs split up their functionality into a number of sub-commands,
--   for example, the ``svn`` program can invoke sub-commands like ``svn
-+   Many programs split up their functionality into a number of subcommands,
-+   for example, the ``svn`` program can invoke subcommands like ``svn
-    checkout``, ``svn update``, and ``svn commit``.  Splitting up functionality
-    this way can be a particularly good idea when a program performs several
-    different functions which require different kinds of command-line arguments.
--   :class:`ArgumentParser` supports the creation of such sub-commands with the
--   :meth:`add_subparsers` method.  The :meth:`add_subparsers` method is normally
-+   :class:`ArgumentParser` supports the creation of such subcommands with the
-+   :meth:`!add_subparsers` method.  The :meth:`!add_subparsers` method is normally
-    called with no arguments and returns a special action object.  This object
-    has a single method, :meth:`~_SubParsersAction.add_parser`, which takes a
--   command name and any :class:`ArgumentParser` constructor arguments, and
--   returns an :class:`ArgumentParser` object that can be modified as usual.
-+   command name and any :class:`!ArgumentParser` constructor arguments, and
-+   returns an :class:`!ArgumentParser` object that can be modified as usual.
- 
-    Description of parameters:
- 
--   * title - title for the sub-parser group in help output; by default
-+   * *title* - title for the sub-parser group in help output; by default
-      "subcommands" if description is provided, otherwise uses title for
-      positional arguments
- 
--   * description - description for the sub-parser group in help output, by
-+   * *description* - description for the sub-parser group in help output, by
-      default ``None``
- 
--   * prog - usage information that will be displayed with sub-command help,
-+   * *prog* - usage information that will be displayed with sub-command help,
-      by default the name of the program and any positional arguments before the
-      subparser argument
- 
--   * parser_class - class which will be used to create sub-parser instances, by
--     default the class of the current parser (e.g. ArgumentParser)
-+   * *parser_class* - class which will be used to create sub-parser instances, by
-+     default the class of the current parser (e.g. :class:`ArgumentParser`)
- 
-    * action_ - the basic type of action to be taken when this argument is
-      encountered at the command line
-@@ -1758,15 +1562,15 @@
- 
-    * help_ - help for sub-parser group in help output, by default ``None``
- 
--   * metavar_ - string presenting available sub-commands in help; by default it
--     is ``None`` and presents sub-commands in form {cmd1, cmd2, ..}
-+   * metavar_ - string presenting available subcommands in help; by default it
-+     is ``None`` and presents subcommands in form {cmd1, cmd2, ..}
- 
-    Some example usage::
- 
-      >>> # create the top-level parser
-      >>> parser = argparse.ArgumentParser(prog='PROG')
-      >>> parser.add_argument('--foo', action='store_true', help='foo help')
--     >>> subparsers = parser.add_subparsers(help='sub-command help')
-+     >>> subparsers = parser.add_subparsers(help='subcommand help')
-      >>>
-      >>> # create the parser for the "a" command
-      >>> parser_a = subparsers.add_parser('a', help='a help')
-@@ -1801,7 +1605,7 @@
-      usage: PROG [-h] [--foo] {a,b} ...
- 
-      positional arguments:
--       {a,b}   sub-command help
-+       {a,b}   subcommand help
-          a     a help
-          b     b help
- 
-@@ -1862,7 +1666,7 @@
-    that each subparser knows which Python function it should execute.  For
-    example::
- 
--     >>> # sub-command functions
-+     >>> # subcommand functions
-      >>> def foo(args):
-      ...     print(args.x * args.y)
-      ...
-@@ -1911,7 +1715,7 @@
-      Namespace(subparser_name='2', y='frobble')
- 
-    .. versionchanged:: 3.7
--      New *required* keyword argument.
-+      New *required* keyword-only parameter.
- 
- 
- FileType objects
-@@ -1947,13 +1751,14 @@
- Argument groups
- ^^^^^^^^^^^^^^^
- 
--.. method:: ArgumentParser.add_argument_group(title=None, description=None)
-+.. method:: ArgumentParser.add_argument_group(title=None, description=None, *, \
-+                                              [argument_default], [conflict_handler])
- 
-    By default, :class:`ArgumentParser` groups command-line arguments into
-    "positional arguments" and "options" when displaying help
-    messages. When there is a better conceptual grouping of arguments than this
-    default one, appropriate groups can be created using the
--   :meth:`add_argument_group` method::
-+   :meth:`!add_argument_group` method::
- 
-      >>> parser = argparse.ArgumentParser(prog='PROG', add_help=False)
-      >>> group = parser.add_argument_group('group')
-@@ -1970,7 +1775,7 @@
-    has an :meth:`~ArgumentParser.add_argument` method just like a regular
-    :class:`ArgumentParser`.  When an argument is added to the group, the parser
-    treats it just like a normal argument, but displays the argument in a
--   separate group for help messages.  The :meth:`add_argument_group` method
-+   separate group for help messages.  The :meth:`!add_argument_group` method
-    accepts *title* and *description* arguments which can be used to
-    customize this display::
- 
-@@ -1992,6 +1797,11 @@
- 
-        --bar BAR  bar help
- 
-+   The optional, keyword-only parameters argument_default_ and conflict_handler_
-+   allow for finer-grained control of the behavior of the argument group. These
-+   parameters have the same meaning as in the :class:`ArgumentParser` constructor,
-+   but apply specifically to the argument group rather than the entire parser.
-+
-    Note that any arguments not in your user-defined groups will end up back
-    in the usual "positional arguments" and "optional arguments" sections.
- 
-@@ -2007,7 +1817,7 @@
- 
- .. method:: ArgumentParser.add_mutually_exclusive_group(required=False)
- 
--   Create a mutually exclusive group. :mod:`argparse` will make sure that only
-+   Create a mutually exclusive group. :mod:`!argparse` will make sure that only
-    one of the arguments in the mutually exclusive group was present on the
-    command line::
- 
-@@ -2144,20 +1954,20 @@
- 
- .. method:: ArgumentParser.parse_known_args(args=None, namespace=None)
- 
--Sometimes a script may only parse a few of the command-line arguments, passing
--the remaining arguments on to another script or program. In these cases, the
--:meth:`~ArgumentParser.parse_known_args` method can be useful.  It works much like
--:meth:`~ArgumentParser.parse_args` except that it does not produce an error when
--extra arguments are present.  Instead, it returns a two item tuple containing
--the populated namespace and the list of remaining argument strings.
-+   Sometimes a script may only parse a few of the command-line arguments, passing
-+   the remaining arguments on to another script or program. In these cases, the
-+   :meth:`~ArgumentParser.parse_known_args` method can be useful.  It works much like
-+   :meth:`~ArgumentParser.parse_args` except that it does not produce an error when
-+   extra arguments are present.  Instead, it returns a two item tuple containing
-+   the populated namespace and the list of remaining argument strings.
- 
--::
-+   ::
- 
--   >>> parser = argparse.ArgumentParser()
--   >>> parser.add_argument('--foo', action='store_true')
--   >>> parser.add_argument('bar')
--   >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])
--   (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])
-+      >>> parser = argparse.ArgumentParser()
-+      >>> parser.add_argument('--foo', action='store_true')
-+      >>> parser.add_argument('bar')
-+      >>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])
-+      (Namespace(bar='BAR', foo=True), ['--badger', 'spam'])
- 
- .. warning::
-    :ref:`Prefix matching <prefix-matching>` rules apply to
-@@ -2215,90 +2025,38 @@
- .. method:: ArgumentParser.parse_intermixed_args(args=None, namespace=None)
- .. method:: ArgumentParser.parse_known_intermixed_args(args=None, namespace=None)
- 
--A number of Unix commands allow the user to intermix optional arguments with
--positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args`
--and :meth:`~ArgumentParser.parse_known_intermixed_args` methods
--support this parsing style.
--
--These parsers do not support all the argparse features, and will raise
--exceptions if unsupported features are used.  In particular, subparsers,
--and mutually exclusive groups that include both
--optionals and positionals are not supported.
--
--The following example shows the difference between
--:meth:`~ArgumentParser.parse_known_args` and
--:meth:`~ArgumentParser.parse_intermixed_args`: the former returns ``['2',
--'3']`` as unparsed arguments, while the latter collects all the positionals
--into ``rest``.  ::
-+   A number of Unix commands allow the user to intermix optional arguments with
-+   positional arguments.  The :meth:`~ArgumentParser.parse_intermixed_args`
-+   and :meth:`~ArgumentParser.parse_known_intermixed_args` methods
-+   support this parsing style.
-+
-+   These parsers do not support all the :mod:`!argparse` features, and will raise
-+   exceptions if unsupported features are used.  In particular, subparsers,
-+   and mutually exclusive groups that include both
-+   optionals and positionals are not supported.
-+
-+   The following example shows the difference between
-+   :meth:`~ArgumentParser.parse_known_args` and
-+   :meth:`~ArgumentParser.parse_intermixed_args`: the former returns ``['2',
-+   '3']`` as unparsed arguments, while the latter collects all the positionals
-+   into ``rest``.  ::
- 
--   >>> parser = argparse.ArgumentParser()
--   >>> parser.add_argument('--foo')
--   >>> parser.add_argument('cmd')
--   >>> parser.add_argument('rest', nargs='*', type=int)
--   >>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())
--   (Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])
--   >>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())
--   Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])
--
--:meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple
--containing the populated namespace and the list of remaining argument strings.
--:meth:`~ArgumentParser.parse_intermixed_args` raises an error if there are any
--remaining unparsed argument strings.
--
--.. versionadded:: 3.7
--
--.. _upgrading-optparse-code:
--
--Upgrading optparse code
-------------------------
-+      >>> parser = argparse.ArgumentParser()
-+      >>> parser.add_argument('--foo')
-+      >>> parser.add_argument('cmd')
-+      >>> parser.add_argument('rest', nargs='*', type=int)
-+      >>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())
-+      (Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])
-+      >>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())
-+      Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])
-+
-+   :meth:`~ArgumentParser.parse_known_intermixed_args` returns a two item tuple
-+   containing the populated namespace and the list of remaining argument strings.
-+   :meth:`~ArgumentParser.parse_intermixed_args` raises an error if there are any
-+   remaining unparsed argument strings.
- 
--Originally, the :mod:`argparse` module had attempted to maintain compatibility
--with :mod:`optparse`.  However, :mod:`optparse` was difficult to extend
--transparently, particularly with the changes required to support the new
--``nargs=`` specifiers and better usage messages.  When most everything in
--:mod:`optparse` had either been copy-pasted over or monkey-patched, it no
--longer seemed practical to try to maintain the backwards compatibility.
--
--The :mod:`argparse` module improves on the standard library :mod:`optparse`
--module in a number of ways including:
--
--* Handling positional arguments.
--* Supporting sub-commands.
--* Allowing alternative option prefixes like ``+`` and ``/``.
--* Handling zero-or-more and one-or-more style arguments.
--* Producing more informative usage messages.
--* Providing a much simpler interface for custom ``type`` and ``action``.
--
--A partial upgrade path from :mod:`optparse` to :mod:`argparse`:
--
--* Replace all :meth:`optparse.OptionParser.add_option` calls with
--  :meth:`ArgumentParser.add_argument` calls.
--
--* Replace ``(options, args) = parser.parse_args()`` with ``args =
--  parser.parse_args()`` and add additional :meth:`ArgumentParser.add_argument`
--  calls for the positional arguments. Keep in mind that what was previously
--  called ``options``, now in the :mod:`argparse` context is called ``args``.
--
--* Replace :meth:`optparse.OptionParser.disable_interspersed_args`
--  by using :meth:`~ArgumentParser.parse_intermixed_args` instead of
--  :meth:`~ArgumentParser.parse_args`.
--
--* Replace callback actions and the ``callback_*`` keyword arguments with
--  ``type`` or ``action`` arguments.
--
--* Replace string names for ``type`` keyword arguments with the corresponding
--  type objects (e.g. int, float, complex, etc).
--
--* Replace :class:`optparse.Values` with :class:`Namespace` and
--  :exc:`optparse.OptionError` and :exc:`optparse.OptionValueError` with
--  :exc:`ArgumentError`.
--
--* Replace strings with implicit arguments such as ``%default`` or ``%prog`` with
--  the standard Python syntax to use dictionaries to format strings, that is,
--  ``%(default)s`` and ``%(prog)s``.
-+   .. versionadded:: 3.7
- 
--* Replace the OptionParser constructor ``version`` argument with a call to
--  ``parser.add_argument('--version', action='version', version='<the version>')``.
- 
- Exceptions
- ----------
-@@ -2313,3 +2071,12 @@
- .. exception:: ArgumentTypeError
- 
-    Raised when something goes wrong converting a command line string to a type.
-+
-+
-+.. rubric:: Guides and Tutorials
-+
-+.. toctree::
-+   :maxdepth: 1
-+
-+   ../howto/argparse.rst
-+   ../howto/argparse-optparse.rst
---- a/Doc/library/ast.rst
-+++ b/Doc/library/ast.rst
-@@ -889,7 +889,7 @@
-    (indicating a "simple" target). A "simple" target consists solely of a
-    :class:`Name` node that does not appear between parentheses; all other
-    targets are considered complex. Only simple targets appear in
--   the :attr:`__annotations__` dictionary of modules and classes.
-+   the :attr:`~object.__annotations__` dictionary of modules and classes.
- 
-    .. doctest::
- 
---- a/Doc/library/asyncio-task.rst
-+++ b/Doc/library/asyncio-task.rst
-@@ -158,7 +158,7 @@
-         # Nothing happens if we just call "nested()".
-         # A coroutine object is created but not awaited,
-         # so it *won't run at all*.
--        nested()
-+        nested()  # will raise a "RuntimeWarning".
- 
-         # Let's do it differently now and await it:
-         print(await nested())  # will print "42".
---- a/Doc/library/builtins.rst
-+++ b/Doc/library/builtins.rst
-@@ -7,10 +7,7 @@
- --------------
- 
- This module provides direct access to all 'built-in' identifiers of Python; for
--example, ``builtins.open`` is the full name for the built-in function
--:func:`open`.  See :ref:`built-in-funcs` and :ref:`built-in-consts` for
--documentation.
--
-+example, ``builtins.open`` is the full name for the built-in function :func:`open`.
- 
- This module is not normally accessed explicitly by most applications, but can be
- useful in modules that provide objects with the same name as a built-in value,
-@@ -40,3 +37,10 @@
- either this module or the value of this module's :attr:`~object.__dict__` attribute.
- Since this is an implementation detail, it may not be used by alternate
- implementations of Python.
-+
-+.. seealso::
-+
-+   * :ref:`built-in-consts`
-+   * :ref:`bltin-exceptions`
-+   * :ref:`built-in-funcs`
-+   * :ref:`bltin-types`
---- a/Doc/library/configparser.rst
-+++ b/Doc/library/configparser.rst
-@@ -54,6 +54,7 @@
- 
-    import os
-    os.remove("example.ini")
-+   os.remove("override.ini")
- 
- 
- Quick Start
---- a/Doc/library/csv.rst
-+++ b/Doc/library/csv.rst
-@@ -365,6 +365,12 @@
- 
-    .. versionadded:: 3.12
- 
-+.. note::
-+
-+   Due to a bug, constants :data:`QUOTE_NOTNULL` and :data:`QUOTE_STRINGS`
-+   do not affect behaviour of :class:`reader` objects.
-+   This bug is fixed in Python 3.13.
-+
- The :mod:`csv` module defines the following exception:
- 
- 
---- a/Doc/library/ctypes.rst
-+++ b/Doc/library/ctypes.rst
-@@ -383,7 +383,7 @@
- particular ARM64 for Apple Platforms, the calling convention for variadic functions
- is different than that for regular functions.
- 
--On those platforms it is required to specify the :attr:`~_FuncPtr.argtypes`
-+On those platforms it is required to specify the :attr:`~_CFuncPtr.argtypes`
- attribute for the regular, non-variadic, function arguments:
- 
- .. code-block:: python3
-@@ -391,7 +391,7 @@
-    libc.printf.argtypes = [ctypes.c_char_p]
- 
- Because specifying the attribute does not inhibit portability it is advised to always
--specify :attr:`~_FuncPtr.argtypes` for all variadic functions.
-+specify :attr:`~_CFuncPtr.argtypes` for all variadic functions.
- 
- 
- .. _ctypes-calling-functions-with-own-custom-data-types:
-@@ -426,9 +426,9 @@
- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
- 
- It is possible to specify the required argument types of functions exported from
--DLLs by setting the :attr:`~_FuncPtr.argtypes` attribute.
-+DLLs by setting the :attr:`~_CFuncPtr.argtypes` attribute.
- 
--:attr:`~_FuncPtr.argtypes` must be a sequence of C data types (the :func:`!printf` function is
-+:attr:`~_CFuncPtr.argtypes` must be a sequence of C data types (the :func:`!printf` function is
- probably not a good example here, because it takes a variable number and
- different types of parameters depending on the format string, on the other hand
- this is quite handy to experiment with this feature)::
-@@ -453,7 +453,7 @@
- 
- If you have defined your own classes which you pass to function calls, you have
- to implement a :meth:`~_CData.from_param` class method for them to be able to use them
--in the :attr:`~_FuncPtr.argtypes` sequence. The :meth:`~_CData.from_param` class method receives
-+in the :attr:`~_CFuncPtr.argtypes` sequence. The :meth:`~_CData.from_param` class method receives
- the Python object passed to the function call, it should do a typecheck or
- whatever is needed to make sure this object is acceptable, and then return the
- object itself, its :attr:`!_as_parameter_` attribute, or whatever you want to
-@@ -476,7 +476,7 @@
- 
- 
- By default functions are assumed to return the C :c:expr:`int` type.  Other
--return types can be specified by setting the :attr:`~_FuncPtr.restype` attribute of the
-+return types can be specified by setting the :attr:`~_CFuncPtr.restype` attribute of the
- function object.
- 
- The C prototype of :c:func:`time` is ``time_t time(time_t *)``. Because :c:type:`time_t`
-@@ -485,7 +485,7 @@
- 
-    >>> libc.time.restype = c_time_t
- 
--The argument types can be specified using :attr:`~_FuncPtr.argtypes`::
-+The argument types can be specified using :attr:`~_CFuncPtr.argtypes`::
- 
-    >>> libc.time.argtypes = (POINTER(c_time_t),)
- 
-@@ -508,7 +508,7 @@
-    >>>
- 
- If you want to avoid the :func:`ord("x") <ord>` calls above, you can set the
--:attr:`~_FuncPtr.argtypes` attribute, and the second argument will be converted from a
-+:attr:`~_CFuncPtr.argtypes` attribute, and the second argument will be converted from a
- single character Python bytes object into a C char:
- 
- .. doctest::
-@@ -527,7 +527,7 @@
-    >>>
- 
- You can also use a callable Python object (a function or a class for example) as
--the :attr:`~_FuncPtr.restype` attribute, if the foreign function returns an integer.  The
-+the :attr:`~_CFuncPtr.restype` attribute, if the foreign function returns an integer.  The
- callable will be called with the *integer* the C function returns, and the
- result of this call will be used as the result of your function call. This is
- useful to check for error return values and automatically raise an exception::
-@@ -555,7 +555,7 @@
- :func:`GetLastError` to retrieve it.
- 
- Please note that a much more powerful error checking mechanism is available
--through the :attr:`~_FuncPtr.errcheck` attribute;
-+through the :attr:`~_CFuncPtr.errcheck` attribute;
- see the reference manual for details.
- 
- 
-@@ -855,7 +855,7 @@
- ^^^^^^^^^^^^^^^^
- 
- Usually, ctypes does strict type checking.  This means, if you have
--``POINTER(c_int)`` in the :attr:`~_FuncPtr.argtypes` list of a function or as the type of
-+``POINTER(c_int)`` in the :attr:`~_CFuncPtr.argtypes` list of a function or as the type of
- a member field in a structure definition, only instances of exactly the same
- type are accepted.  There are some exceptions to this rule, where ctypes accepts
- other objects.  For example, you can pass compatible array instances instead of
-@@ -876,7 +876,7 @@
-    >>>
- 
- In addition, if a function argument is explicitly declared to be a pointer type
--(such as ``POINTER(c_int)``) in :attr:`~_FuncPtr.argtypes`, an object of the pointed
-+(such as ``POINTER(c_int)``) in :attr:`~_CFuncPtr.argtypes`, an object of the pointed
- type (``c_int`` in this case) can be passed to the function.  ctypes will apply
- the required :func:`byref` conversion in this case automatically.
- 
-@@ -1604,10 +1604,20 @@
- attributes of loaded shared libraries.  The function objects created in this way
- by default accept any number of arguments, accept any ctypes data instances as
- arguments, and return the default result type specified by the library loader.
--They are instances of a private class:
- 
-+They are instances of a private local class :class:`!_FuncPtr` (not exposed
-+in :mod:`!ctypes`) which inherits from the private :class:`_CFuncPtr` class:
- 
--.. class:: _FuncPtr
-+.. doctest::
-+
-+   >>> import ctypes
-+   >>> lib = ctypes.CDLL(None)
-+   >>> issubclass(lib._FuncPtr, ctypes._CFuncPtr)
-+   True
-+   >>> lib._FuncPtr is ctypes._CFuncPtr
-+   False
-+
-+.. class:: _CFuncPtr
- 
-    Base class for C callable foreign functions.
- 
-@@ -1773,7 +1783,7 @@
- The optional *paramflags* parameter creates foreign function wrappers with much
- more functionality than the features described above.
- 
--*paramflags* must be a tuple of the same length as :attr:`~_FuncPtr.argtypes`.
-+*paramflags* must be a tuple of the same length as :attr:`~_CFuncPtr.argtypes`.
- 
- Each item in this tuple contains further information about a parameter, it must
- be a tuple containing one, two, or three items.
-@@ -1844,7 +1854,7 @@
- values when there are more than one, so the GetWindowRect function now returns a
- RECT instance, when called.
- 
--Output parameters can be combined with the :attr:`~_FuncPtr.errcheck` protocol to do
-+Output parameters can be combined with the :attr:`~_CFuncPtr.errcheck` protocol to do
- further output processing and error checking.  The win32 ``GetWindowRect`` api
- function returns a ``BOOL`` to signal success or failure, so this function could
- do the error checking, and raises an exception when the api call failed::
-@@ -1857,7 +1867,7 @@
-    >>> GetWindowRect.errcheck = errcheck
-    >>>
- 
--If the :attr:`~_FuncPtr.errcheck` function returns the argument tuple it receives
-+If the :attr:`~_CFuncPtr.errcheck` function returns the argument tuple it receives
- unchanged, :mod:`ctypes` continues the normal processing it does on the output
- parameters.  If you want to return a tuple of window coordinates instead of a
- ``RECT`` instance, you can retrieve the fields in the function and return them
-@@ -2157,7 +2167,7 @@
- 
-       This method adapts *obj* to a ctypes type.  It is called with the actual
-       object used in a foreign function call when the type is present in the
--      foreign function's :attr:`~_FuncPtr.argtypes` tuple;
-+      foreign function's :attr:`~_CFuncPtr.argtypes` tuple;
-       it must return an object that can be used as a function call parameter.
- 
-       All ctypes data types have a default implementation of this classmethod
-@@ -2223,7 +2233,7 @@
- Fundamental data types, when returned as foreign function call results, or, for
- example, by retrieving structure field members or array items, are transparently
- converted to native Python types.  In other words, if a foreign function has a
--:attr:`~_FuncPtr.restype` of :class:`c_char_p`, you will always receive a Python bytes
-+:attr:`~_CFuncPtr.restype` of :class:`c_char_p`, you will always receive a Python bytes
- object, *not* a :class:`c_char_p` instance.
- 
- .. XXX above is false, it actually returns a Unicode string
---- a/Doc/library/datetime.rst
-+++ b/Doc/library/datetime.rst
-@@ -180,19 +180,19 @@
- 
- An object of type :class:`.time` or :class:`.datetime` may be aware or naive.
- 
--A :class:`.datetime` object *d* is aware if both of the following hold:
-+A :class:`.datetime` object ``d`` is aware if both of the following hold:
- 
- 1. ``d.tzinfo`` is not ``None``
- 2. ``d.tzinfo.utcoffset(d)`` does not return ``None``
- 
--Otherwise, *d* is naive.
-+Otherwise, ``d`` is naive.
- 
--A :class:`.time` object *t* is aware if both of the following hold:
-+A :class:`.time` object ``t`` is aware if both of the following hold:
- 
- 1. ``t.tzinfo`` is not ``None``
- 2. ``t.tzinfo.utcoffset(None)`` does not return ``None``.
- 
--Otherwise, *t* is naive.
-+Otherwise, ``t`` is naive.
- 
- The distinction between aware and naive doesn't apply to :class:`timedelta`
- objects.
-@@ -295,6 +295,20 @@
- 
-    Between 0 and 86,399 inclusive.
- 
-+   .. caution::
-+
-+      It is a somewhat common bug for code to unintentionally use this attribute
-+      when it is actually intended to get a :meth:`~timedelta.total_seconds`
-+      value instead:
-+
-+      .. doctest::
-+
-+         >>> from datetime import timedelta
-+         >>> duration = timedelta(seconds=11235813)
-+         >>> duration.days, duration.seconds
-+         (130, 3813)
-+         >>> duration.total_seconds()
-+         11235813.0
- 
- .. attribute:: timedelta.microseconds
- 
-@@ -344,14 +358,14 @@
- +--------------------------------+-----------------------------------------------+
- | ``q, r = divmod(t1, t2)``      | Computes the quotient and the remainder:      |
- |                                | ``q = t1 // t2`` (3) and ``r = t1 % t2``.     |
--|                                | q is an integer and r is a :class:`timedelta` |
--|                                | object.                                       |
-+|                                | ``q`` is an integer and ``r`` is a            |
-+|                                | :class:`timedelta` object.                    |
- +--------------------------------+-----------------------------------------------+
- | ``+t1``                        | Returns a :class:`timedelta` object with the  |
- |                                | same value. (2)                               |
- +--------------------------------+-----------------------------------------------+
- | ``-t1``                        | Equivalent to ``timedelta(-t1.days,           |
--|                                | -t1.seconds*, -t1.microseconds)``,            |
-+|                                | -t1.seconds, -t1.microseconds)``,             |
- |                                | and to ``t1 * -1``. (1)(4)                    |
- +--------------------------------+-----------------------------------------------+
- | ``abs(t)``                     | Equivalent to ``+t`` when ``t.days >= 0``,    |
-@@ -512,7 +526,7 @@
-    January 1 of year 1 has ordinal 1.
- 
-    :exc:`ValueError` is raised unless ``1 <= ordinal <=
--   date.max.toordinal()``. For any date *d*,
-+   date.max.toordinal()``. For any date ``d``,
-    ``date.fromordinal(d.toordinal()) == d``.
- 
- 
-@@ -664,7 +678,7 @@
- .. method:: date.toordinal()
- 
-    Return the proleptic Gregorian ordinal of the date, where January 1 of year 1
--   has ordinal 1. For any :class:`date` object *d*,
-+   has ordinal 1. For any :class:`date` object ``d``,
-    ``date.fromordinal(d.toordinal()) == d``.
- 
- 
-@@ -716,7 +730,7 @@
- 
- .. method:: date.__str__()
- 
--   For a date *d*, ``str(d)`` is equivalent to ``d.isoformat()``.
-+   For a date ``d``, ``str(d)`` is equivalent to ``d.isoformat()``.
- 
- 
- .. method:: date.ctime()
-@@ -882,6 +896,10 @@
- 
-    This function is preferred over :meth:`today` and :meth:`utcnow`.
- 
-+   .. note::
-+
-+      Subsequent calls to :meth:`!datetime.now` may return the same
-+      instant depending on the precision of the underlying clock.
- 
- .. classmethod:: datetime.utcnow()
- 
-@@ -993,7 +1011,7 @@
-    is used.  If the *date* argument is a :class:`.datetime` object, its time components
-    and :attr:`.tzinfo` attributes are ignored.
- 
--   For any :class:`.datetime` object *d*,
-+   For any :class:`.datetime` object ``d``,
-    ``d == datetime.combine(d.date(), d.time(), d.tzinfo)``.
- 
-    .. versionchanged:: 3.6
-@@ -1182,11 +1200,11 @@
- 
-    If both are naive, or both are aware and have the same :attr:`~.datetime.tzinfo` attribute,
-    the :attr:`~.datetime.tzinfo` attributes are ignored, and the result is a :class:`timedelta`
--   object *t* such that ``datetime2 + t == datetime1``. No time zone adjustments
-+   object ``t`` such that ``datetime2 + t == datetime1``. No time zone adjustments
-    are done in this case.
- 
-    If both are aware and have different :attr:`~.datetime.tzinfo` attributes, ``a-b`` acts
--   as if *a* and *b* were first converted to naive UTC datetimes. The
-+   as if ``a`` and ``b`` were first converted to naive UTC datetimes. The
-    result is ``(a.replace(tzinfo=None) - a.utcoffset()) - (b.replace(tzinfo=None)
-    - b.utcoffset())`` except that the implementation never overflows.
- 
-@@ -1359,11 +1377,11 @@
- 
- .. method:: datetime.utctimetuple()
- 
--   If :class:`.datetime` instance *d* is naive, this is the same as
-+   If :class:`.datetime` instance ``d`` is naive, this is the same as
-    ``d.timetuple()`` except that :attr:`~.time.struct_time.tm_isdst` is forced to 0 regardless of what
-    ``d.dst()`` returns. DST is never in effect for a UTC time.
- 
--   If *d* is aware, *d* is normalized to UTC time, by subtracting
-+   If ``d`` is aware, ``d`` is normalized to UTC time, by subtracting
-    ``d.utcoffset()``, and a :class:`time.struct_time` for the
-    normalized time is returned. :attr:`!tm_isdst` is forced to 0. Note
-    that an :exc:`OverflowError` may be raised if ``d.year`` was
-@@ -1511,7 +1529,7 @@
- 
- .. method:: datetime.__str__()
- 
--   For a :class:`.datetime` instance *d*, ``str(d)`` is equivalent to
-+   For a :class:`.datetime` instance ``d``, ``str(d)`` is equivalent to
-    ``d.isoformat(' ')``.
- 
- 
-@@ -1758,7 +1776,7 @@
-    .. versionadded:: 3.6
- 
- :class:`.time` objects support equality and order comparisons,
--where *a* is considered less than *b* when *a* precedes *b* in time.
-+where ``a`` is considered less than ``b`` when ``a`` precedes ``b`` in time.
- 
- Naive and aware :class:`!time` objects are never equal.
- Order comparison between naive and aware :class:`!time` objects raises
-@@ -1886,7 +1904,7 @@
- 
- .. method:: time.__str__()
- 
--   For a time *t*, ``str(t)`` is equivalent to ``t.isoformat()``.
-+   For a time ``t``, ``str(t)`` is equivalent to ``t.isoformat()``.
- 
- 
- .. method:: time.strftime(format)
---- a/Doc/library/dis.rst
-+++ b/Doc/library/dis.rst
-@@ -850,7 +850,8 @@
- 
- .. opcode:: GET_LEN
- 
--   Perform ``STACK.append(len(STACK[-1]))``.
-+   Perform ``STACK.append(len(STACK[-1]))``. Used in :keyword:`match` statements where
-+   comparison with structure of pattern is needed.
- 
-    .. versionadded:: 3.10
- 
---- a/Doc/library/enum.rst
-+++ b/Doc/library/enum.rst
-@@ -44,7 +44,7 @@
-    ...     BLUE = 3
- 
-    >>> # functional syntax
--   >>> Color = Enum('Color', ['RED', 'GREEN', 'BLUE'])
-+   >>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])
- 
- Even though we can use :keyword:`class` syntax to create Enums, Enums
- are not normal Python classes.  See
---- a/Doc/library/functions.rst
-+++ b/Doc/library/functions.rst
-@@ -588,6 +588,11 @@
-    :returns: The result of the evaluated expression.
-    :raises: Syntax errors are reported as exceptions.
- 
-+   .. warning::
-+
-+      This function executes arbitrary code. Calling it with
-+      user-supplied input may lead to security vulnerabilities.
-+
-    The *expression* argument is parsed and evaluated as a Python expression
-    (technically speaking, a condition list) using the *globals* and *locals*
-    dictionaries as global and local namespace.  If the *globals* dictionary is
-@@ -634,6 +639,11 @@
- 
- .. function:: exec(object, globals=None, locals=None, /, *, closure=None)
- 
-+   .. warning::
-+
-+      This function executes arbitrary code. Calling it with
-+      user-supplied input may lead to security vulnerabilities.
-+
-    This function supports dynamic execution of Python code. *object* must be
-    either a string or a code object.  If it is a string, the string is parsed as
-    a suite of Python statements which is then executed (unless a syntax error
-@@ -1213,9 +1223,10 @@
- 
- .. class:: object()
- 
--   Return a new featureless object.  :class:`object` is a base for all classes.
--   It has methods that are common to all instances of Python classes.  This
--   function does not accept any arguments.
-+   This is the ultimate base class of all other classes. It has methods
-+   that are common to all instances of Python classes. When the constructor
-+   is called, it returns a new featureless object. The constructor does not
-+   accept any arguments.
- 
-    .. note::
- 
---- a/Doc/library/importlib.metadata.rst
-+++ b/Doc/library/importlib.metadata.rst
-@@ -100,6 +100,13 @@
- :ref:`requirements`.
- 
- 
-+.. exception:: PackageNotFoundError
-+
-+   Subclass of :class:`ModuleNotFoundError` raised by several functions in this
-+   module when queried for a distribution package which is not installed in the
-+   current Python environment.
-+
-+
- Functional API
- ==============
- 
-@@ -111,31 +118,53 @@
- Entry points
- ------------
- 
--The ``entry_points()`` function returns a collection of entry points.
--Entry points are represented by ``EntryPoint`` instances;
--each ``EntryPoint`` has a ``.name``, ``.group``, and ``.value`` attributes and
--a ``.load()`` method to resolve the value.  There are also ``.module``,
--``.attr``, and ``.extras`` attributes for getting the components of the
--``.value`` attribute.
-+.. function:: entry_points(**select_params)
-+
-+   Returns a :class:`EntryPoints` instance describing entry points for the
-+   current environment. Any given keyword parameters are passed to the
-+   :meth:`!select` method for comparison to the attributes of
-+   the individual entry point definitions.
-+
-+   Note: it is not currently possible to query for entry points based on
-+   their :attr:`!EntryPoint.dist` attribute (as different :class:`!Distribution`
-+   instances do not currently compare equal, even if they have the same attributes)
-+
-+.. class:: EntryPoints
-+
-+   Details of a collection of installed entry points.
-+
-+   Also provides a ``.groups`` attribute that reports all identifed entry
-+   point groups, and a ``.names`` attribute that reports all identified entry
-+   point names.
-+
-+.. class:: EntryPoint
-+
-+   Details of an installed entry point.
-+
-+   Each :class:`!EntryPoint` instance has ``.name``, ``.group``, and ``.value``
-+   attributes and a ``.load()`` method to resolve the value. There are also
-+   ``.module``, ``.attr``, and ``.extras`` attributes for getting the
-+   components of the ``.value`` attribute, and ``.dist`` for obtaining
-+   information regarding the distribution package that provides the entry point.
- 
- Query all entry points::
- 
-     >>> eps = entry_points()  # doctest: +SKIP
- 
--The ``entry_points()`` function returns an ``EntryPoints`` object,
--a collection of all ``EntryPoint`` objects with ``names`` and ``groups``
-+The :func:`!entry_points` function returns a :class:`!EntryPoints` object,
-+a collection of all :class:`!EntryPoint` objects with ``names`` and ``groups``
- attributes for convenience::
- 
-     >>> sorted(eps.groups)  # doctest: +SKIP
-     ['console_scripts', 'distutils.commands', 'distutils.setup_keywords', 'egg_info.writers', 'setuptools.installation']
- 
--``EntryPoints`` has a ``select`` method to select entry points
-+:class:`!EntryPoints` has a :meth:`!select` method to select entry points
- matching specific properties. Select entry points in the
- ``console_scripts`` group::
- 
-     >>> scripts = eps.select(group='console_scripts')  # doctest: +SKIP
- 
--Equivalently, since ``entry_points`` passes keyword arguments
-+Equivalently, since :func:`!entry_points` passes keyword arguments
- through to select::
- 
-     >>> scripts = entry_points(group='console_scripts')  # doctest: +SKIP
-@@ -187,31 +216,41 @@
- Distribution metadata
- ---------------------
- 
--Every `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_ includes some metadata,
--which you can extract using the
--``metadata()`` function::
-+.. function:: metadata(distribution_name)
-+
-+   Return the distribution metadata corresponding to the named
-+   distribution package as a :class:`PackageMetadata` instance.
-+
-+   Raises :exc:`PackageNotFoundError` if the named distribution
-+   package is not installed in the current Python environment.
-+
-+.. class:: PackageMetadata
-+
-+   A concrete implementation of the
-+   `PackageMetadata protocol <https://importlib-metadata.readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_.
-+
-+   In addition to providing the defined protocol methods and attributes, subscripting
-+   the instance is equivalent to calling the :meth:`!get` method.
-+
-+Every `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_
-+includes some metadata, which you can extract using the :func:`!metadata` function::
- 
-     >>> wheel_metadata = metadata('wheel')  # doctest: +SKIP
- 
--The keys of the returned data structure, a ``PackageMetadata``,
--name the metadata keywords, and
-+The keys of the returned data structure name the metadata keywords, and
- the values are returned unparsed from the distribution metadata::
- 
-     >>> wheel_metadata['Requires-Python']  # doctest: +SKIP
-     '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
- 
--``PackageMetadata`` also presents a ``json`` attribute that returns
-+:class:`PackageMetadata` also presents a :attr:`!json` attribute that returns
- all the metadata in a JSON-compatible form per :PEP:`566`::
- 
-     >>> wheel_metadata.json['requires_python']
-     '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
- 
--.. note::
--
--    The actual type of the object returned by ``metadata()`` is an
--    implementation detail and should be accessed only through the interface
--    described by the
--    `PackageMetadata protocol <https://importlib-metadata.readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata>`_.
-+The full set of available metadata is not described here.
-+See the PyPA `Core metadata specification <https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata>`_ for additional details.
- 
- .. versionchanged:: 3.10
-    The ``Description`` is now included in the metadata when presented
-@@ -225,7 +264,15 @@
- Distribution versions
- ---------------------
- 
--The ``version()`` function is the quickest way to get a
-+.. function:: version(distribution_name)
-+
-+   Return the installed distribution package version for the named
-+   distribution package.
-+
-+   Raises :exc:`PackageNotFoundError` if the named distribution
-+   package is not installed in the current Python environment.
-+
-+The :func:`!version` function is the quickest way to get a
- `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_'s version
- number, as a string::
- 
-@@ -238,12 +285,28 @@
- Distribution files
- ------------------
- 
--You can also get the full set of files contained within a distribution.  The
--``files()`` function takes a `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_ name
--and returns all of the
--files installed by this distribution.  Each file object returned is a
--``PackagePath``, a :class:`pathlib.PurePath` derived object with additional ``dist``,
--``size``, and ``hash`` properties as indicated by the metadata.  For example::
-+.. function:: files(distribution_name)
-+
-+   Return the full set of files contained within the named
-+   distribution package.
-+
-+   Raises :exc:`PackageNotFoundError` if the named distribution
-+   package is not installed in the current Python environment.
-+
-+   Returns :const:`None` if the distribution is found but the installation
-+   database records reporting the files associated with the distribuion package
-+   are missing.
-+
-+.. class:: PackagePath
-+
-+    A :class:`pathlib.PurePath` derived object with additional ``dist``,
-+    ``size``, and ``hash`` properties corresponding to the distribution
-+    package's installation metadata for that file.
-+
-+The :func:`!files` function takes a
-+`Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_
-+name and returns all of the files installed by this distribution. Each file is reported
-+as a :class:`PackagePath` instance. For example::
- 
-     >>> util = [p for p in files('wheel') if 'util.py' in str(p)][0]  # doctest: +SKIP
-     >>> util  # doctest: +SKIP
-@@ -266,16 +329,16 @@
-             return s.encode('utf-8')
-         return s
- 
--You can also use the ``locate`` method to get a the absolute path to the
--file::
-+You can also use the :meth:`!locate` method to get the absolute
-+path to the file::
- 
-     >>> util.locate()  # doctest: +SKIP
-     PosixPath('/home/gustav/example/lib/site-packages/wheel/util.py')
- 
- In the case where the metadata file listing files
--(RECORD or SOURCES.txt) is missing, ``files()`` will
--return ``None``. The caller may wish to wrap calls to
--``files()`` in `always_iterable
-+(``RECORD`` or ``SOURCES.txt``) is missing, :func:`!files` will
-+return :const:`None`. The caller may wish to wrap calls to
-+:func:`!files` in `always_iterable
- <https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.always_iterable>`_
- or otherwise guard against this condition if the target
- distribution is not known to have the metadata present.
-@@ -285,8 +348,16 @@
- Distribution requirements
- -------------------------
- 
-+.. function:: requires(distribution_name)
-+
-+   Return the declared dependency specifiers for the named
-+   distribution package.
-+
-+   Raises :exc:`PackageNotFoundError` if the named distribution
-+   package is not installed in the current Python environment.
-+
- To get the full set of requirements for a `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_,
--use the ``requires()``
-+use the :func:`!requires`
- function::
- 
-     >>> requires('wheel')  # doctest: +SKIP
-@@ -299,6 +370,16 @@
- Mapping import to distribution packages
- ---------------------------------------
- 
-+.. function:: packages_distributions()
-+
-+   Return a mapping from the top level module and import package
-+   names found via :attr:`sys.meta_path` to the names of the distribution
-+   packages (if any) that provide the corresponding files.
-+
-+   To allow for namespace packages (which may have members provided by
-+   multiple distribution packages), each top level import name maps to a
-+   list of distribution names rather than mapping directly to a single name.
-+
- A convenience method to resolve the `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_
- name (or names, in the case of a namespace package)
- that provide each importable top-level
-@@ -318,23 +399,42 @@
- Distributions
- =============
- 
--While the above API is the most common and convenient usage, you can get all
--of that information from the ``Distribution`` class.  A ``Distribution`` is an
--abstract object that represents the metadata for
--a Python `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_.  You can
--get the ``Distribution`` instance::
-+.. function:: distribution(distribution_name)
-+
-+   Return a :class:`Distribution` instance describing the named
-+   distribution package.
-+
-+   Raises :exc:`PackageNotFoundError` if the named distribution
-+   package is not installed in the current Python environment.
-+
-+.. class:: Distribution
-+
-+   Details of an installed distribution package.
-+
-+   Note: different :class:`!Distribution` instances do not currently compare
-+   equal, even if they relate to the same installed distribution and
-+   accordingly have the same attributes.
-+
-+While the module level API described above is the most common and convenient usage,
-+you can get all of that information from the :class:`!Distribution` class.
-+:class:`!Distribution` is an abstract object that represents the metadata for
-+a Python `Distribution Package <https://packaging.python.org/en/latest/glossary/#term-Distribution-Package>`_.
-+You can get the concreate :class:`!Distribution` subclass instance for an installed
-+distribution package by calling the :func:`distribution` function::
- 
-     >>> from importlib.metadata import distribution  # doctest: +SKIP
-     >>> dist = distribution('wheel')  # doctest: +SKIP
-+    >>> type(dist)  # doctest: +SKIP
-+    <class 'importlib.metadata.PathDistribution'>
- 
- Thus, an alternative way to get the version number is through the
--``Distribution`` instance::
-+:class:`!Distribution` instance::
- 
-     >>> dist.version  # doctest: +SKIP
-     '0.32.3'
- 
--There are all kinds of additional metadata available on the ``Distribution``
--instance::
-+There are all kinds of additional metadata available on :class:`!Distribution`
-+instances::
- 
-     >>> dist.metadata['Requires-Python']  # doctest: +SKIP
-     '>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'
-@@ -342,7 +442,7 @@
-     'MIT'
- 
- The full set of available metadata is not described here.
--See the `Core metadata specifications <https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata>`_ for additional details.
-+See the PyPA `Core metadata specification <https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata>`_ for additional details.
- 
- 
- Distribution Discovery
---- a/Doc/library/importlib.rst
-+++ b/Doc/library/importlib.rst
-@@ -249,7 +249,7 @@
-       An abstract method for finding a :term:`spec <module spec>` for
-       the specified module.  If this is a top-level import, *path* will
-       be ``None``.  Otherwise, this is a search for a subpackage or
--      module and *path* will be the value of :attr:`__path__` from the
-+      module and *path* will be the value of :attr:`~module.__path__` from the
-       parent package. If a spec cannot be found, ``None`` is returned.
-       When passed in, ``target`` is a module object that the finder may
-       use to make a more educated guess about what spec to return.
-@@ -355,34 +355,12 @@
-         (note that some of these attributes can change when a module is
-         reloaded):
- 
--        - :attr:`__name__`
--            The module's fully qualified name.
--            It is ``'__main__'`` for an executed module.
--
--        - :attr:`__file__`
--            The location the :term:`loader` used to load the module.
--            For example, for modules loaded from a .py file this is the filename.
--            It is not set on all modules (e.g. built-in modules).
--
--        - :attr:`__cached__`
--            The filename of a compiled version of the module's code.
--            It is not set on all modules (e.g. built-in modules).
--
--        - :attr:`__path__`
--            The list of locations where the package's submodules will be found.
--            Most of the time this is a single directory.
--            The import system passes this attribute to ``__import__()`` and to finders
--            in the same way as :data:`sys.path` but just for the package.
--            It is not set on non-package modules so it can be used
--            as an indicator that the module is a package.
--
--        - :attr:`__package__`
--            The fully qualified name of the package the module is in (or the
--            empty string for a top-level module).
--            If the module is a package then this is the same as :attr:`__name__`.
--
--        - :attr:`__loader__`
--            The :term:`loader` used to load the module.
-+        - :attr:`module.__name__`
-+        - :attr:`module.__file__`
-+        - :attr:`module.__cached__`
-+        - :attr:`module.__path__`
-+        - :attr:`module.__package__`
-+        - :attr:`module.__loader__` *(deprecated)*
- 
-         When :meth:`exec_module` is available then backwards-compatible
-         functionality is provided.
-@@ -418,7 +396,8 @@
-         can implement this abstract method to give direct access
-         to the data stored. :exc:`OSError` is to be raised if the *path* cannot
-         be found. The *path* is expected to be constructed using a module's
--        :attr:`__file__` attribute or an item from a package's :attr:`__path__`.
-+        :attr:`~module.__file__` attribute or an item from a package's
-+        :attr:`~module.__path__`.
- 
-         .. versionchanged:: 3.4
-            Raises :exc:`OSError` instead of :exc:`NotImplementedError`.
-@@ -505,9 +484,9 @@
- 
-     .. abstractmethod:: get_filename(fullname)
- 
--        An abstract method that is to return the value of :attr:`__file__` for
--        the specified module. If no path is available, :exc:`ImportError` is
--        raised.
-+        An abstract method that is to return the value of
-+        :attr:`~module.__file__` for the specified module. If no path is
-+        available, :exc:`ImportError` is raised.
- 
-         If source code is available, then the method should return the path to
-         the source file, regardless of whether a bytecode was used to load the
-@@ -1166,43 +1145,45 @@
- .. class:: ModuleSpec(name, loader, *, origin=None, loader_state=None, is_package=None)
- 
-    A specification for a module's import-system-related state.  This is
--   typically exposed as the module's :attr:`__spec__` attribute.  Many
-+   typically exposed as the module's :attr:`~module.__spec__` attribute.  Many
-    of these attributes are also available directly on a module: for example,
-    ``module.__spec__.origin == module.__file__``.  Note, however, that
-    while the *values* are usually equivalent, they can differ since there is
--   no synchronization between the two objects.  For example, it is possible to update
--   the module's :attr:`__file__` at runtime and this will not be automatically
--   reflected in the module's :attr:`__spec__.origin`, and vice versa.
-+   no synchronization between the two objects.  For example, it is possible to
-+   update the module's :attr:`~module.__file__` at runtime and this will not be
-+   automatically reflected in the module's
-+   :attr:`__spec__.origin <ModuleSpec.origin>`, and vice versa.
- 
-    .. versionadded:: 3.4
- 
-    .. attribute:: name
- 
--      The module's fully qualified name
--      (see :attr:`__name__` attributes on modules).
-+      The module's fully qualified name (see :attr:`module.__name__`).
-       The :term:`finder` should always set this attribute to a non-empty string.
- 
-    .. attribute:: loader
- 
--      The :term:`loader` used to load the module
--      (see :attr:`__loader__` attributes on modules).
-+      The :term:`loader` used to load the module (see :attr:`module.__loader__`).
-       The :term:`finder` should always set this attribute.
- 
-    .. attribute:: origin
- 
-       The location the :term:`loader` should use to load the module
--      (see :attr:`__file__` attributes on modules).
--      For example, for modules loaded from a .py file this is the filename.
-+      (see :attr:`module.__file__`).
-+      For example, for modules loaded from a ``.py`` file this is the filename.
-       The :term:`finder` should always set this attribute to a meaningful value
-       for the :term:`loader` to use.  In the uncommon case that there is not one
-       (like for namespace packages), it should be set to ``None``.
- 
-    .. attribute:: submodule_search_locations
- 
--      The list of locations where the package's submodules will be found
--      (see :attr:`__path__` attributes on modules).
--      Most of the time this is a single directory.
--      The :term:`finder` should set this attribute to a list, even an empty one, to indicate
-+      A (possibly empty) :term:`sequence` of strings enumerating the locations
-+      in which a package's submodules will be found
-+      (see :attr:`module.__path__`). Most of the time there will only be a
-+      single directory in this list.
-+
-+      The :term:`finder` should set this attribute to a sequence, even an empty
-+      one, to indicate
-       to the import system that the module is a package.  It should be set to ``None`` for
-       non-package modules.  It is set automatically later to a special object for
-       namespace packages.
-@@ -1216,7 +1197,7 @@
-    .. attribute:: cached
- 
-       The filename of a compiled version of the module's code
--      (see :attr:`__cached__` attributes on modules).
-+      (see :attr:`module.__cached__`).
-       The :term:`finder` should always set this attribute but it may be ``None``
-       for modules that do not need compiled code stored.
- 
-@@ -1224,14 +1205,14 @@
- 
-       (Read-only) The fully qualified name of the package the module is in (or the
-       empty string for a top-level module).
--      See :attr:`__package__` attributes on modules.
-+      See :attr:`module.__package__`.
-       If the module is a package then this is the same as :attr:`name`.
- 
-    .. attribute:: has_location
- 
-       ``True`` if the spec's :attr:`origin` refers to a loadable location,
--      ``False`` otherwise.  This value impacts how :attr:`origin` is interpreted
--      and how the module's :attr:`__file__` is populated.
-+      ``False`` otherwise.  This value impacts how :attr:`!origin` is interpreted
-+      and how the module's :attr:`~module.__file__` is populated.
- 
- 
- :mod:`importlib.util` -- Utility code for importers
-@@ -1353,8 +1334,8 @@
- 
-    .. versionchanged:: 3.7
-       Raises :exc:`ModuleNotFoundError` instead of :exc:`AttributeError` if
--      **package** is in fact not a package (i.e. lacks a :attr:`__path__`
--      attribute).
-+      **package** is in fact not a package (i.e. lacks a
-+      :attr:`~module.__path__` attribute).
- 
- .. function:: module_from_spec(spec)
- 
-@@ -1514,20 +1495,34 @@
- Importing a source file directly
- ''''''''''''''''''''''''''''''''
- 
--To import a Python source file directly, use the following recipe::
--
--  import importlib.util
--  import sys
-+This recipe should be used with caution: it is an approximation of an import
-+statement where the file path is specified directly, rather than
-+:data:`sys.path` being searched. Alternatives should first be considered first,
-+such as modifying :data:`sys.path` when a proper module is required, or using
-+:func:`runpy.run_path` when the global namespace resulting from running a Python
-+file is appropriate.
-+
-+To import a Python source file directly from a path, use the following recipe::
-+
-+    import importlib.util
-+    import sys
-+
-+
-+    def import_from_path(module_name, file_path):
-+        spec = importlib.util.spec_from_file_location(module_name, file_path)
-+        module = importlib.util.module_from_spec(spec)
-+        sys.modules[module_name] = module
-+        spec.loader.exec_module(module)
-+        return module
-+
-+
-+    # For illustrative purposes only (use of `json` is arbitrary).
-+    import json
-+    file_path = json.__file__
-+    module_name = json.__name__
- 
--  # For illustrative purposes.
--  import tokenize
--  file_path = tokenize.__file__
--  module_name = tokenize.__name__
--
--  spec = importlib.util.spec_from_file_location(module_name, file_path)
--  module = importlib.util.module_from_spec(spec)
--  sys.modules[module_name] = module
--  spec.loader.exec_module(module)
-+    # Similar outcome as `import json`.
-+    json = import_from_path(module_name, file_path)
- 
- 
- Implementing lazy imports
-@@ -1553,7 +1548,6 @@
-     False
- 
- 
--
- Setting up an importer
- ''''''''''''''''''''''
- 
---- a/Doc/library/itertools.rst
-+++ b/Doc/library/itertools.rst
-@@ -676,24 +676,37 @@
-    Roughly equivalent to::
- 
-         def tee(iterable, n=2):
--            iterator = iter(iterable)
--            shared_link = [None, None]
--            return tuple(_tee(iterator, shared_link) for _ in range(n))
--
--        def _tee(iterator, link):
--            try:
--                while True:
--                    if link[1] is None:
--                        link[0] = next(iterator)
--                        link[1] = [None, None]
--                    value, link = link
--                    yield value
--            except StopIteration:
--                return
--
--   Once a :func:`tee` has been created, the original *iterable* should not be
--   used anywhere else; otherwise, the *iterable* could get advanced without
--   the tee objects being informed.
-+            if n < 0:
-+                raise ValueError
-+            if n == 0:
-+                return ()
-+            iterator = _tee(iterable)
-+            result = [iterator]
-+            for _ in range(n - 1):
-+                result.append(_tee(iterator))
-+            return tuple(result)
-+
-+        class _tee:
-+
-+            def __init__(self, iterable):
-+                it = iter(iterable)
-+                if isinstance(it, _tee):
-+                    self.iterator = it.iterator
-+                    self.link = it.link
-+                else:
-+                    self.iterator = it
-+                    self.link = [None, None]
-+
-+            def __iter__(self):
-+                return self
-+
-+            def __next__(self):
-+                link = self.link
-+                if link[1] is None:
-+                    link[0] = next(self.iterator)
-+                    link[1] = [None, None]
-+                value, self.link = link
-+                return value
- 
-    ``tee`` iterators are not threadsafe. A :exc:`RuntimeError` may be
-    raised when simultaneously using iterators returned by the same :func:`tee`
---- a/Doc/library/locale.rst
-+++ b/Doc/library/locale.rst
-@@ -311,8 +311,9 @@
- 
-    .. data:: ALT_DIGITS
- 
--      Get a representation of up to 100 values used to represent the values
--      0 to 99.
-+      Get a string consisting of up to 100 semicolon-separated symbols used
-+      to represent the values 0 to 99 in a locale-specific way.
-+      In most locales this is an empty string.
- 
- 
- .. function:: getdefaultlocale([envvars])
---- a/Doc/library/logging.config.rst
-+++ b/Doc/library/logging.config.rst
-@@ -752,16 +752,17 @@
- 
- If the ``queue`` key is present, the corresponding value can be one of the following:
- 
--* An object implementing the :class:`queue.Queue` public API. For instance,
--  this may be an actual instance of :class:`queue.Queue` or a subclass thereof,
--  or a proxy obtained by :meth:`multiprocessing.managers.SyncManager.Queue`.
-+* An object implementing the :meth:`Queue.put_nowait <queue.Queue.put_nowait>`
-+  and :meth:`Queue.get <queue.Queue.get>` public API. For instance, this may be
-+  an actual instance of :class:`queue.Queue` or a subclass thereof, or a proxy
-+  obtained by :meth:`multiprocessing.managers.SyncManager.Queue`.
- 
-   This is of course only possible if you are constructing or modifying
-   the configuration dictionary in code.
- 
- * A string that resolves to a callable which, when called with no arguments, returns
--  the :class:`queue.Queue` instance to use. That callable could be a
--  :class:`queue.Queue` subclass or a function which returns a suitable queue instance,
-+  the queue instance to use. That callable could be a :class:`queue.Queue` subclass
-+  or a function which returns a suitable queue instance,
-   such as ``my.module.queue_factory()``.
- 
- * A dict with a ``'()'`` key which is constructed in the usual way as discussed in
---- a/Doc/library/os.rst
-+++ b/Doc/library/os.rst
-@@ -3571,6 +3571,7 @@
-               os.remove(os.path.join(root, name))
-           for name in dirs:
-               os.rmdir(os.path.join(root, name))
-+      os.rmdir(top)
- 
-    .. audit-event:: os.walk top,topdown,onerror,followlinks os.walk
- 
---- a/Doc/library/pkgutil.rst
-+++ b/Doc/library/pkgutil.rst
-@@ -26,7 +26,8 @@
-       __path__ = extend_path(__path__, __name__)
- 
-    For each directory on :data:`sys.path` that has a subdirectory that matches the
--   package name, add the subdirectory to the package's :attr:`__path__`.  This is useful
-+   package name, add the subdirectory to the package's
-+   :attr:`~module.__path__`. This is useful
-    if one wants to distribute different parts of a single logical package as multiple
-    directories.
- 
---- a/Doc/library/pydoc.rst
-+++ b/Doc/library/pydoc.rst
-@@ -52,8 +52,9 @@
-    only execute code when a file is invoked as a script and not just imported.
- 
- When printing output to the console, :program:`pydoc` attempts to paginate the
--output for easier reading.  If the :envvar:`PAGER` environment variable is set,
--:program:`pydoc` will use its value as a pagination program.
-+output for easier reading.  If either the :envvar:`MANPAGER` or the
-+:envvar:`PAGER` environment variable is set, :program:`pydoc` will use its
-+value as a pagination program. When both are set, :envvar:`MANPAGER` is used.
- 
- Specifying a ``-w`` flag before the argument will cause HTML documentation
- to be written out to a file in the current directory, instead of displaying text
---- a/Doc/library/sqlite3.rst
-+++ b/Doc/library/sqlite3.rst
-@@ -2420,6 +2420,7 @@
-    >>> con.execute("CREATE TABLE readonly(data)")
-    Traceback (most recent call last):
-    OperationalError: attempt to write a readonly database
-+   >>> con.close()
- 
- * Do not implicitly create a new database file if it does not already exist;
-   will raise :exc:`~sqlite3.OperationalError` if unable to create a new file:
---- a/Doc/library/stdtypes.rst
-+++ b/Doc/library/stdtypes.rst
-@@ -4460,14 +4460,14 @@
-      ``dict([('foo', 100), ('bar', 200)])``, ``dict(foo=100, bar=200)``
- 
-    If no positional argument is given, an empty dictionary is created.
--   If a positional argument is given and it is a mapping object, a dictionary
--   is created with the same key-value pairs as the mapping object.  Otherwise,
--   the positional argument must be an :term:`iterable` object.  Each item in
--   the iterable must itself be an iterable with exactly two objects.  The
--   first object of each item becomes a key in the new dictionary, and the
--   second object the corresponding value.  If a key occurs more than once, the
--   last value for that key becomes the corresponding value in the new
--   dictionary.
-+   If a positional argument is given and it defines a ``keys()`` method, a
-+   dictionary is created by calling :meth:`~object.__getitem__` on the argument with
-+   each returned key from the method.  Otherwise, the positional argument must be an
-+   :term:`iterable` object.  Each item in the iterable must itself be an iterable
-+   with exactly two elements.  The first element of each item becomes a key in the
-+   new dictionary, and the second element the corresponding value.  If a key occurs
-+   more than once, the last value for that key becomes the corresponding value in
-+   the new dictionary.
- 
-    If keyword arguments are given, the keyword arguments and their values are
-    added to the dictionary created from the positional argument.  If a key
-@@ -4624,10 +4624,11 @@
-       Update the dictionary with the key/value pairs from *other*, overwriting
-       existing keys.  Return ``None``.
- 
--      :meth:`update` accepts either another dictionary object or an iterable of
--      key/value pairs (as tuples or other iterables of length two).  If keyword
--      arguments are specified, the dictionary is then updated with those
--      key/value pairs: ``d.update(red=1, blue=2)``.
-+      :meth:`update` accepts either another object with a ``keys()`` method (in
-+      which case :meth:`~object.__getitem__` is called with every key returned from
-+      the method) or an iterable of key/value pairs (as tuples or other iterables
-+      of length two). If keyword arguments are specified, the dictionary is then
-+      updated with those key/value pairs: ``d.update(red=1, blue=2)``.
- 
-    .. method:: values()
- 
---- a/Doc/library/string.rst
-+++ b/Doc/library/string.rst
-@@ -350,8 +350,9 @@
- | ``'='`` | Forces the padding to be placed after the sign (if any)  |
- |         | but before the digits.  This is used for printing fields |
- |         | in the form '+000000120'. This alignment option is only  |
--|         | valid for numeric types.  It becomes the default for     |
--|         | numbers when '0' immediately precedes the field width.   |
-+|         | valid for numeric types, excluding :class:`complex`.     |
-+|         | It becomes the default for numbers when '0' immediately  |
-+|         | precedes the field width.                                |
- +---------+----------------------------------------------------------+
- | ``'^'`` | Forces the field to be centered within the available     |
- |         | space.                                                   |
-@@ -432,9 +433,9 @@
- If not specified, then the field width will be determined by the content.
- 
- When no explicit alignment is given, preceding the *width* field by a zero
--(``'0'``) character enables
--sign-aware zero-padding for numeric types.  This is equivalent to a *fill*
--character of ``'0'`` with an *alignment* type of ``'='``.
-+(``'0'``) character enables sign-aware zero-padding for numeric types,
-+excluding :class:`complex`.  This is equivalent to a *fill* character of
-+``'0'`` with an *alignment* type of ``'='``.
- 
- .. versionchanged:: 3.10
-    Preceding the *width* field by ``'0'`` no longer affects the default
-@@ -509,9 +510,8 @@
-    |         | significant digits. With no precision given, uses a      |
-    |         | precision of ``6`` digits after the decimal point for    |
-    |         | :class:`float`, and shows all coefficient digits         |
--   |         | for :class:`~decimal.Decimal`. If no digits follow the   |
--   |         | decimal point, the decimal point is also removed unless  |
--   |         | the ``#`` option is used.                                |
-+   |         | for :class:`~decimal.Decimal`.  If ``p=0``, the decimal  |
-+   |         | point is omitted unless the ``#`` option is used.        |
-    +---------+----------------------------------------------------------+
-    | ``'E'`` | Scientific notation. Same as ``'e'`` except it uses      |
-    |         | an upper case 'E' as the separator character.            |
-@@ -522,9 +522,8 @@
-    |         | precision given, uses a precision of ``6`` digits after  |
-    |         | the decimal point for :class:`float`, and uses a         |
-    |         | precision large enough to show all coefficient digits    |
--   |         | for :class:`~decimal.Decimal`. If no digits follow the   |
--   |         | decimal point, the decimal point is also removed unless  |
--   |         | the ``#`` option is used.                                |
-+   |         | for :class:`~decimal.Decimal`.  If ``p=0``, the decimal  |
-+   |         | point is omitted unless the ``#`` option is used.        |
-    +---------+----------------------------------------------------------+
-    | ``'F'`` | Fixed-point notation. Same as ``'f'``, but converts      |
-    |         | ``nan`` to  ``NAN`` and ``inf`` to ``INF``.              |
-@@ -590,6 +589,15 @@
-    |         | as altered by the other format modifiers.                |
-    +---------+----------------------------------------------------------+
- 
-+The available presentation types for :class:`complex` are the same as those for
-+:class:`float` (``'%'`` is not allowed).  Both the real and imaginary components
-+of a complex number are formatted as floating-point numbers, according to the
-+specified presentation type.  They are separated by the mandatory sign of the
-+imaginary part, the latter being terminated by a ``j`` suffix.  If the presentation
-+type is missing, the result will match the output of :func:`str` (complex numbers with
-+a non-zero real part are also surrounded by parentheses), possibly altered by
-+other format modifiers.
-+
- 
- .. _formatexamples:
- 
---- a/Doc/library/sys.rst
-+++ b/Doc/library/sys.rst
-@@ -1239,7 +1239,8 @@
-     that implement Python's default import semantics. The
-     :meth:`~importlib.abc.MetaPathFinder.find_spec` method is called with at
-     least the absolute name of the module being imported. If the module to be
--    imported is contained in a package, then the parent package's :attr:`__path__`
-+    imported is contained in a package, then the parent package's
-+    :attr:`~module.__path__`
-     attribute is passed in as a second argument. The method returns a
-     :term:`module spec`, or ``None`` if the module cannot be found.
- 
---- a/Doc/library/time.rst
-+++ b/Doc/library/time.rst
-@@ -460,6 +460,9 @@
-    |           |                                                |       |
-    |           |                                                |       |
-    +-----------+------------------------------------------------+-------+
-+   | ``%u``    | Day of the week (Monday is 1; Sunday is 7)     |       |
-+   |           | as a decimal number [1, 7].                    |       |
-+   +-----------+------------------------------------------------+-------+
-    | ``%w``    | Weekday as a decimal number [0(Sunday),6].     |       |
-    |           |                                                |       |
-    +-----------+------------------------------------------------+-------+
-@@ -492,6 +495,16 @@
-    | ``%Z``    | Time zone name (no characters if no time zone  |       |
-    |           | exists). Deprecated. [1]_                      |       |
-    +-----------+------------------------------------------------+-------+
-+   | ``%G``    | ISO 8601 year (similar to ``%Y`` but follows   |       |
-+   |           | the rules for the ISO 8601 calendar year).     |       |
-+   |           | The year starts with the week that contains    |       |
-+   |           | the first Thursday of the calendar year.       |       |
-+   +-----------+------------------------------------------------+-------+
-+   | ``%V``    | ISO 8601 week number (as a decimal number      |       |
-+   |           | [01,53]). The first week of the year is the    |       |
-+   |           | one that contains the first Thursday of the    |       |
-+   |           | year. Weeks start on Monday.                   |       |
-+   +-----------+------------------------------------------------+-------+
-    | ``%%``    | A literal ``'%'`` character.                   |       |
-    +-----------+------------------------------------------------+-------+
- 
---- a/Doc/library/traceback.rst
-+++ b/Doc/library/traceback.rst
-@@ -8,11 +8,15 @@
- 
- --------------
- 
--This module provides a standard interface to extract, format and print stack
--traces of Python programs.  It exactly mimics the behavior of the Python
--interpreter when it prints a stack trace.  This is useful when you want to print
--stack traces under program control, such as in a "wrapper" around the
--interpreter.
-+This module provides a standard interface to extract, format and print
-+stack traces of Python programs. It is more flexible than the
-+interpreter's default traceback display, and therefore makes it
-+possible to configure certain aspects of the output. Finally,
-+it contains a utility for capturing enough information about an
-+exception to print it later, without the need to save a reference
-+to the actual exception. Since exceptions can be the roots of large
-+objects graph, this utility can significantly improve
-+memory management.
- 
- .. index:: pair: object; traceback
- 
-@@ -29,7 +33,20 @@
-    Module :mod:`pdb`
-       Interactive source code debugger for Python programs.
- 
--The module defines the following functions:
-+The module's API can be divided into two parts:
-+
-+* Module-level functions offering basic functionality, which are useful for interactive
-+  inspection of exceptions and tracebacks.
-+
-+* :class:`TracebackException` class and its helper classes
-+  :class:`StackSummary` and :class:`FrameSummary`. These offer both more
-+  flexibility in the output generated and the ability to store the information
-+  necessary for later formatting without holding references to actual exception
-+  and traceback objects.
-+
-+
-+Module-Level Functions
-+----------------------
- 
- .. function:: print_tb(tb, limit=None, file=None)
- 
-@@ -230,7 +247,6 @@
- 
-    .. versionadded:: 3.5
- 
--The module also defines the following classes:
- 
- :class:`!TracebackException` Objects
- ------------------------------------
-@@ -238,12 +254,17 @@
- .. versionadded:: 3.5
- 
- :class:`!TracebackException` objects are created from actual exceptions to
--capture data for later printing in a lightweight fashion.
-+capture data for later printing.  They offer a more lightweight method of
-+storing this information by avoiding holding references to
-+:ref:`traceback<traceback-objects>` and :ref:`frame<frame-objects>` objects
-+In addition, they expose more options to configure the output compared to
-+the module-level functions described above.
- 
- .. class:: TracebackException(exc_type, exc_value, exc_traceback, *, limit=None, lookup_lines=True, capture_locals=False, compact=False, max_group_width=15, max_group_depth=10)
- 
--   Capture an exception for later rendering. *limit*, *lookup_lines* and
--   *capture_locals* are as for the :class:`StackSummary` class.
-+   Capture an exception for later rendering. The meaning of *limit*,
-+   *lookup_lines* and *capture_locals* are as for the :class:`StackSummary`
-+   class.
- 
-    If *compact* is true, only data that is required by
-    :class:`!TracebackException`'s :meth:`format` method
-@@ -488,8 +509,8 @@
- 
- .. _traceback-example:
- 
--Traceback Examples
--------------------
-+Examples of Using the Module-Level Functions
-+--------------------------------------------
- 
- This simple example implements a basic read-eval-print loop, similar to (but
- less useful than) the standard Python interactive interpreter loop.  For a more
-@@ -528,8 +549,7 @@
- 
-    try:
-        lumberjack()
--   except IndexError:
--       exc = sys.exception()
-+   except IndexError as exc:
-        print("*** print_tb:")
-        traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)
-        print("*** print_exception:")
-@@ -627,5 +647,88 @@
-    ['  File "spam.py", line 3, in <module>\n    spam.eggs()\n',
-     '  File "eggs.py", line 42, in eggs\n    return "bacon"\n']
-    >>> an_error = IndexError('tuple index out of range')
--   >>> traceback.format_exception_only(type(an_error), an_error)
-+   >>> traceback.format_exception_only(an_error)
-    ['IndexError: tuple index out of range\n']
-+
-+
-+Examples of Using :class:`TracebackException`
-+---------------------------------------------
-+
-+With the helper class, we have more options::
-+
-+   >>> import sys
-+   >>> from traceback import TracebackException
-+   >>>
-+   >>> def lumberjack():
-+   ...     bright_side_of_life()
-+   ...
-+   >>> def bright_side_of_life():
-+   ...     t = "bright", "side", "of", "life"
-+   ...     return t[5]
-+   ...
-+   >>> try:
-+   ...     lumberjack()
-+   ... except IndexError as e:
-+   ...     exc = e
-+   ...
-+   >>> try:
-+   ...     try:
-+   ...         lumberjack()
-+   ...     except:
-+   ...         1/0
-+   ... except Exception as e:
-+   ...     chained_exc = e
-+   ...
-+   >>> # limit works as with the module-level functions
-+   >>> TracebackException.from_exception(exc, limit=-2).print()
-+   Traceback (most recent call last):
-+     File "<python-input-1>", line 6, in lumberjack
-+       bright_side_of_life()
-+       ~~~~~~~~~~~~~~~~~~~^^
-+     File "<python-input-1>", line 10, in bright_side_of_life
-+       return t[5]
-+              ~^^^
-+   IndexError: tuple index out of range
-+
-+   >>> # capture_locals adds local variables in frames
-+   >>> TracebackException.from_exception(exc, limit=-2, capture_locals=True).print()
-+   Traceback (most recent call last):
-+     File "<python-input-1>", line 6, in lumberjack
-+       bright_side_of_life()
-+       ~~~~~~~~~~~~~~~~~~~^^
-+     File "<python-input-1>", line 10, in bright_side_of_life
-+       return t[5]
-+              ~^^^
-+       t = ("bright", "side", "of", "life")
-+   IndexError: tuple index out of range
-+
-+   >>> # The *chain* kwarg to print() controls whether chained
-+   >>> # exceptions are displayed
-+   >>> TracebackException.from_exception(chained_exc).print()
-+   Traceback (most recent call last):
-+     File "<python-input-19>", line 4, in <module>
-+       lumberjack()
-+       ~~~~~~~~~~^^
-+     File "<python-input-8>", line 7, in lumberjack
-+       bright_side_of_life()
-+       ~~~~~~~~~~~~~~~~~~~^^
-+     File "<python-input-8>", line 11, in bright_side_of_life
-+       return t[5]
-+              ~^^^
-+   IndexError: tuple index out of range
-+
-+   During handling of the above exception, another exception occurred:
-+
-+   Traceback (most recent call last):
-+     File "<python-input-19>", line 6, in <module>
-+       1/0
-+       ~^~
-+   ZeroDivisionError: division by zero
-+
-+   >>> TracebackException.from_exception(chained_exc).print(chain=False)
-+   Traceback (most recent call last):
-+     File "<python-input-19>", line 6, in <module>
-+       1/0
-+       ~^~
-+   ZeroDivisionError: division by zero
-+
---- a/Doc/library/types.rst
-+++ b/Doc/library/types.rst
-@@ -260,63 +260,18 @@
-    The type of :term:`modules <module>`. The constructor takes the name of the
-    module to be created and optionally its :term:`docstring`.
- 
--   .. note::
--      Use :func:`importlib.util.module_from_spec` to create a new module if you
--      wish to set the various import-controlled attributes.
--
--   .. attribute:: __doc__
--
--      The :term:`docstring` of the module. Defaults to ``None``.
--
--   .. attribute:: __loader__
--
--      The :term:`loader` which loaded the module. Defaults to ``None``.
--
--      This attribute is to match :attr:`importlib.machinery.ModuleSpec.loader`
--      as stored in the :attr:`__spec__` object.
--
--      .. note::
--         A future version of Python may stop setting this attribute by default.
--         To guard against this potential change, preferably read from the
--         :attr:`__spec__` attribute instead or use
--         ``getattr(module, "__loader__", None)`` if you explicitly need to use
--         this attribute.
--
--      .. versionchanged:: 3.4
--         Defaults to ``None``. Previously the attribute was optional.
--
--   .. attribute:: __name__
--
--      The name of the module. Expected to match
--      :attr:`importlib.machinery.ModuleSpec.name`.
--
--   .. attribute:: __package__
--
--      Which :term:`package` a module belongs to. If the module is top-level
--      (i.e. not a part of any specific package) then the attribute should be set
--      to ``''``, else it should be set to the name of the package (which can be
--      :attr:`__name__` if the module is a package itself). Defaults to ``None``.
--
--      This attribute is to match :attr:`importlib.machinery.ModuleSpec.parent`
--      as stored in the :attr:`__spec__` object.
--
--      .. note::
--         A future version of Python may stop setting this attribute by default.
--         To guard against this potential change, preferably read from the
--         :attr:`__spec__` attribute instead or use
--         ``getattr(module, "__package__", None)`` if you explicitly need to use
--         this attribute.
--
--      .. versionchanged:: 3.4
--         Defaults to ``None``. Previously the attribute was optional.
--
--   .. attribute:: __spec__
--
--      A record of the module's import-system-related state. Expected to be an
--      instance of :class:`importlib.machinery.ModuleSpec`.
--
--      .. versionadded:: 3.4
-+   .. seealso::
- 
-+      :ref:`Documentation on module objects <module-objects>`
-+         Provides details on the special attributes that can be found on
-+         instances of :class:`!ModuleType`.
-+
-+      :func:`importlib.util.module_from_spec`
-+         Modules created using the :class:`!ModuleType` constructor are
-+         created with many of their special attributes unset or set to default
-+         values. :func:`!module_from_spec` provides a more robust way of
-+         creating :class:`!ModuleType` instances which ensures the various
-+         attributes are set appropriately.
- 
- .. data:: EllipsisType
- 
---- a/Doc/library/unittest.mock.rst
-+++ b/Doc/library/unittest.mock.rst
-@@ -68,7 +68,7 @@
-     3
-     >>> thing.method.assert_called_with(3, 4, 5, key='value')
- 
--:attr:`side_effect` allows you to perform side effects, including raising an
-+:attr:`~Mock.side_effect` allows you to perform side effects, including raising an
- exception when a mock is called:
- 
-    >>> from unittest.mock import Mock
-@@ -756,8 +756,8 @@
- 
-     .. attribute:: __class__
- 
--        Normally the :attr:`__class__` attribute of an object will return its type.
--        For a mock object with a :attr:`spec`, ``__class__`` returns the spec class
-+        Normally the :attr:`!__class__` attribute of an object will return its type.
-+        For a mock object with a :attr:`!spec`, :attr:`!__class__` returns the spec class
-         instead. This allows mock objects to pass :func:`isinstance` tests for the
-         object they are replacing / masquerading as:
- 
-@@ -765,7 +765,7 @@
-             >>> isinstance(mock, int)
-             True
- 
--        :attr:`__class__` is assignable to, this allows a mock to pass an
-+        :attr:`!__class__` is assignable to, this allows a mock to pass an
-         :func:`isinstance` check without forcing you to use a spec:
- 
-             >>> mock = Mock()
-@@ -779,8 +779,8 @@
-     meaning of :class:`Mock`, with the exception of *return_value* and *side_effect*
-     which have no meaning on a non-callable mock.
- 
--Mock objects that use a class or an instance as a :attr:`spec` or
--:attr:`spec_set` are able to pass :func:`isinstance` tests:
-+Mock objects that use a class or an instance as a :attr:`!spec` or
-+:attr:`!spec_set` are able to pass :func:`isinstance` tests:
- 
-     >>> mock = Mock(spec=SomeClass)
-     >>> isinstance(mock, SomeClass)
-@@ -1149,7 +1149,7 @@
- like :attr:`~Mock.call_args` and :attr:`~Mock.call_args_list`.
- 
- If :attr:`~Mock.side_effect` is set then it will be called after the call has
--been recorded, so if :attr:`side_effect` raises an exception the call is still
-+been recorded, so if :attr:`!side_effect` raises an exception the call is still
- recorded.
- 
- The simplest way to make a mock raise an exception when called is to make
-@@ -1170,8 +1170,8 @@
-         >>> m.mock_calls
-         [call(1, 2, 3), call('two', 'three', 'four')]
- 
--If :attr:`side_effect` is a function then whatever that function returns is what
--calls to the mock return. The :attr:`side_effect` function is called with the
-+If :attr:`~Mock.side_effect` is a function then whatever that function returns is what
-+calls to the mock return. The :attr:`!side_effect` function is called with the
- same arguments as the mock. This allows you to vary the return value of the
- call dynamically, based on the input:
- 
-@@ -1188,7 +1188,7 @@
- 
- If you want the mock to still return the default return value (a new mock), or
- any set return value, then there are two ways of doing this. Either return
--:attr:`mock.return_value` from inside :attr:`side_effect`, or return :data:`DEFAULT`:
-+:attr:`~Mock.return_value` from inside :attr:`~Mock.side_effect`, or return :data:`DEFAULT`:
- 
-         >>> m = MagicMock()
-         >>> def side_effect(*args, **kwargs):
-@@ -1205,8 +1205,8 @@
-         >>> m()
-         3
- 
--To remove a :attr:`side_effect`, and return to the default behaviour, set the
--:attr:`side_effect` to ``None``:
-+To remove a :attr:`~Mock.side_effect`, and return to the default behaviour, set the
-+:attr:`!side_effect` to ``None``:
- 
-         >>> m = MagicMock(return_value=6)
-         >>> def side_effect(*args, **kwargs):
-@@ -1219,7 +1219,7 @@
-         >>> m()
-         6
- 
--The :attr:`side_effect` can also be any iterable object. Repeated calls to the mock
-+The :attr:`~Mock.side_effect` can also be any iterable object. Repeated calls to the mock
- will return values from the iterable (until the iterable is exhausted and
- a :exc:`StopIteration` is raised):
- 
-@@ -1260,7 +1260,7 @@
- 
- You may want a mock object to return ``False`` to a :func:`hasattr` call, or raise an
- :exc:`AttributeError` when an attribute is fetched. You can do this by providing
--an object as a :attr:`spec` for a mock, but that isn't always convenient.
-+an object as a :attr:`!spec` for a mock, but that isn't always convenient.
- 
- You "block" attributes by deleting them. Once deleted, accessing an attribute
- will raise an :exc:`AttributeError`.
-@@ -1429,7 +1429,7 @@
-           If you are patching builtins in a module then you don't
-           need to pass ``create=True``, it will be added by default.
- 
--    Patch can be used as a :class:`TestCase` class decorator. It works by
-+    Patch can be used as a :class:`~unittest.TestCase` class decorator. It works by
-     decorating each test method in the class. This reduces the boilerplate
-     code when your test methods share a common patchings set. :func:`patch` finds
-     tests by looking for method names that start with ``patch.TEST_PREFIX``.
-@@ -1467,7 +1467,7 @@
- can set the *return_value* to be anything you want.
- 
- To configure return values on methods of *instances* on the patched class
--you must do this on the :attr:`return_value`. For example::
-+you must do this on the :attr:`~Mock.return_value`. For example::
- 
-     >>> class Class:
-     ...     def method(self):
-@@ -1788,13 +1788,13 @@
- patch methods: start and stop
- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- 
--All the patchers have :meth:`start` and :meth:`stop` methods. These make it simpler to do
-+All the patchers have :meth:`!start` and :meth:`!stop` methods. These make it simpler to do
- patching in ``setUp`` methods or where you want to do multiple patches without
- nesting decorators or with statements.
- 
- To use them call :func:`patch`, :func:`patch.object` or :func:`patch.dict` as
- normal and keep a reference to the returned ``patcher`` object. You can then
--call :meth:`start` to put the patch in place and :meth:`stop` to undo it.
-+call :meth:`!start` to put the patch in place and :meth:`!stop` to undo it.
- 
- If you are using :func:`patch` to create a mock for you then it will be returned by
- the call to ``patcher.start``. ::
-@@ -1811,7 +1811,7 @@
- 
- 
- A typical use case for this might be for doing multiple patches in the ``setUp``
--method of a :class:`TestCase`::
-+method of a :class:`~unittest.TestCase`::
- 
-     >>> class MyTest(unittest.TestCase):
-     ...     def setUp(self):
-@@ -2484,7 +2484,7 @@
- 
- Alternatively you can just use ``vars(my_mock)`` (instance members) and
- ``dir(type(my_mock))`` (type members) to bypass the filtering irrespective of
--:const:`mock.FILTER_DIR`.
-+:const:`FILTER_DIR`.
- 
- 
- mock_open
-@@ -2499,7 +2499,7 @@
-    default) then a :class:`MagicMock` will be created for you, with the API limited
-    to methods or attributes available on standard file handles.
- 
--   *read_data* is a string for the :meth:`~io.IOBase.read`,
-+   *read_data* is a string for the :meth:`~io.RawIOBase.read`,
-    :meth:`~io.IOBase.readline`, and :meth:`~io.IOBase.readlines` methods
-    of the file handle to return.  Calls to those methods will take data from
-    *read_data* until it is depleted.  The mock of these methods is pretty
-@@ -2511,7 +2511,7 @@
- 
-    .. versionchanged:: 3.4
-       Added :meth:`~io.IOBase.readline` and :meth:`~io.IOBase.readlines` support.
--      The mock of :meth:`~io.IOBase.read` changed to consume *read_data* rather
-+      The mock of :meth:`~io.RawIOBase.read` changed to consume *read_data* rather
-       than returning it on each call.
- 
-    .. versionchanged:: 3.5
-@@ -2563,7 +2563,7 @@
- Autospeccing
- ~~~~~~~~~~~~
- 
--Autospeccing is based on the existing :attr:`spec` feature of mock. It limits the
-+Autospeccing is based on the existing :attr:`!spec` feature of mock. It limits the
- api of mocks to the api of an original object (the spec), but it is recursive
- (implemented lazily) so that attributes of mocks only have the same api as
- the attributes of the spec. In addition mocked functions / methods have the
-@@ -2588,8 +2588,8 @@
- don't test how your units are "wired together" there is still lots of room
- for bugs that tests might have caught.
- 
--:mod:`mock` already provides a feature to help with this, called speccing. If you
--use a class or instance as the :attr:`spec` for a mock then you can only access
-+:mod:`unittest.mock` already provides a feature to help with this, called speccing. If you
-+use a class or instance as the :attr:`!spec` for a mock then you can only access
- attributes on the mock that exist on the real class:
- 
-     >>> from urllib import request
-@@ -2627,7 +2627,7 @@
-     >>> mock_request.Request
-     <MagicMock name='request.Request' spec='Request' id='...'>
- 
--You can see that :class:`request.Request` has a spec. :class:`request.Request` takes two
-+You can see that :class:`!request.Request` has a spec. :class:`!request.Request` takes two
- arguments in the constructor (one of which is *self*). Here's what happens if
- we try to call it incorrectly::
- 
-@@ -2643,8 +2643,8 @@
-     >>> req
-     <NonCallableMagicMock name='request.Request()' spec='Request' id='...'>
- 
--:class:`Request` objects are not callable, so the return value of instantiating our
--mocked out :class:`request.Request` is a non-callable mock. With the spec in place
-+:class:`!Request` objects are not callable, so the return value of instantiating our
-+mocked out :class:`!request.Request` is a non-callable mock. With the spec in place
- any typos in our asserts will raise the correct error::
- 
-     >>> req.add_header('spam', 'eggs')
-@@ -2796,8 +2796,8 @@
-     .. versionadded:: 3.7
- 
- 
--Order of precedence of :attr:`side_effect`, :attr:`return_value` and *wraps*
------------------------------------------------------------------------------
-+Order of precedence of :attr:`!side_effect`, :attr:`!return_value` and *wraps*
-+------------------------------------------------------------------------------
- 
- The order of their precedence is:
- 
---- a/Doc/library/venv.rst
-+++ b/Doc/library/venv.rst
-@@ -205,7 +205,7 @@
- |             +------------+--------------------------------------------------+
- |             | csh/tcsh   | :samp:`$ source {<venv>}/bin/activate.csh`       |
- |             +------------+--------------------------------------------------+
--|             | PowerShell | :samp:`$ {<venv>}/bin/Activate.ps1`              |
-+|             | pwsh       | :samp:`$ {<venv>}/bin/Activate.ps1`              |
- +-------------+------------+--------------------------------------------------+
- | Windows     | cmd.exe    | :samp:`C:\\> {<venv>}\\Scripts\\activate.bat`    |
- |             +------------+--------------------------------------------------+
---- a/Doc/library/warnings.rst
-+++ b/Doc/library/warnings.rst
-@@ -178,6 +178,19 @@
- "default" action is applied (hence its name).
- 
- 
-+
-+.. _repeated-warning-suppression-criteria:
-+
-+Repeated Warning Suppression Criteria
-+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-+
-+The filters that suppress repeated warnings apply the following criteria to determine if a warning is considered a repeat:
-+
-+- ``"default"``: A warning is considered a repeat only if the (*message*, *category*, *module*, *lineno*) are all the same.
-+- ``"module"``: A warning is considered a repeat if the (*message*, *category*, *module*) are the same, ignoring the line number.
-+- ``"once"``: A warning is considered a repeat if the (*message*, *category*) are the same, ignoring the module and line number.
-+
-+
- .. _describing-warning-filters:
- 
- Describing Warning Filters
-@@ -396,7 +409,7 @@
- -------------------
- 
- 
--.. function:: warn(message, category=None, stacklevel=1, source=None, *, skip_file_prefixes=None)
-+.. function:: warn(message, category=None, stacklevel=1, source=None, *, skip_file_prefixes=())
- 
-    Issue a warning, or maybe ignore it or raise an exception.  The *category*
-    argument, if given, must be a :ref:`warning category class <warning-categories>`; it
---- a/Doc/reference/datamodel.rst
-+++ b/Doc/reference/datamodel.rst
-@@ -849,6 +849,8 @@
- :meth:`~object.__call__` method in their class.
- 
- 
-+.. _module-objects:
-+
- Modules
- -------
- 
-@@ -874,46 +876,222 @@
- 
- .. index::
-    single: __name__ (module attribute)
--   single: __doc__ (module attribute)
-+   single: __spec__ (module attribute)
-+   single: __package__ (module attribute)
-+   single: __loader__ (module attribute)
-+   single: __path__ (module attribute)
-    single: __file__ (module attribute)
-+   single: __cached__ (module attribute)
-+   single: __doc__ (module attribute)
-    single: __annotations__ (module attribute)
-    pair: module; namespace
- 
--Predefined (writable) attributes:
-+.. _import-mod-attrs:
-+
-+Import-related attributes on module objects
-+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-+
-+Module objects have the following attributes that relate to the
-+:ref:`import system <importsystem>`. When a module is created using the machinery associated
-+with the import system, these attributes are filled in based on the module's
-+:term:`spec <module spec>`, before the :term:`loader` executes and loads the
-+module.
-+
-+To create a module dynamically rather than using the import system,
-+it's recommended to use :func:`importlib.util.module_from_spec`,
-+which will set the various import-controlled attributes to appropriate values.
-+It's also possible to use the :class:`types.ModuleType` constructor to create
-+modules directly, but this technique is more error-prone, as most attributes
-+must be manually set on the module object after it has been created when using
-+this approach.
-+
-+.. caution::
-+
-+   With the exception of :attr:`~module.__name__`, it is **strongly**
-+   recommended that you rely on :attr:`~module.__spec__` and its attributes
-+   instead of any of the other individual attributes listed in this subsection.
-+   Note that updating an attribute on :attr:`!__spec__` will not update the
-+   corresponding attribute on the module itself:
-+
-+   .. doctest::
-+
-+     >>> import typing
-+     >>> typing.__name__, typing.__spec__.name
-+     ('typing', 'typing')
-+     >>> typing.__spec__.name = 'spelling'
-+     >>> typing.__name__, typing.__spec__.name
-+     ('typing', 'spelling')
-+     >>> typing.__name__ = 'keyboard_smashing'
-+     >>> typing.__name__, typing.__spec__.name
-+     ('keyboard_smashing', 'spelling')
-+
-+.. attribute:: module.__name__
-+
-+   The name used to uniquely identify the module in the import system.
-+   For a directly executed module, this will be set to ``"__main__"``.
-+
-+   This attribute must be set to the fully qualified name of the module.
-+   It is expected to match the value of
-+   :attr:`module.__spec__.name <importlib.machinery.ModuleSpec.name>`.
-+
-+.. attribute:: module.__spec__
-+
-+   A record of the module's import-system-related state.
-+
-+   Set to the :class:`module spec <importlib.machinery.ModuleSpec>` that was
-+   used when importing the module. See :ref:`module-specs` for more details.
-+
-+   .. versionadded:: 3.4
-+
-+.. attribute:: module.__package__
-+
-+   The :term:`package` a module belongs to.
-+
-+   If the module is top-level (that is, not a part of any specific package)
-+   then the attribute should be set to ``''`` (the empty string). Otherwise,
-+   it should be set to the name of the module's package (which can be equal to
-+   :attr:`module.__name__` if the module itself is a package). See :pep:`366`
-+   for further details.
-+
-+   This attribute is used instead of :attr:`~module.__name__` to calculate
-+   explicit relative imports for main modules. It defaults to ``None`` for
-+   modules created dynamically using the :class:`types.ModuleType` constructor;
-+   use :func:`importlib.util.module_from_spec` instead to ensure the attribute
-+   is set to a :class:`str`.
-+
-+   It is **strongly** recommended that you use
-+   :attr:`module.__spec__.parent <importlib.machinery.ModuleSpec.parent>`
-+   instead of :attr:`!module.__package__`. :attr:`__package__` is now only used
-+   as a fallback if :attr:`!__spec__.parent` is not set, and this fallback
-+   path is deprecated.
-+
-+   .. versionchanged:: 3.4
-+      This attribute now defaults to ``None`` for modules created dynamically
-+      using the :class:`types.ModuleType` constructor.
-+      Previously the attribute was optional.
-+
-+   .. versionchanged:: 3.6
-+      The value of :attr:`!__package__` is expected to be the same as
-+      :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>`.
-+      :attr:`__package__` is now only used as a fallback during import
-+      resolution if :attr:`!__spec__.parent` is not defined.
-+
-+   .. versionchanged:: 3.10
-+      :exc:`ImportWarning` is raised if an import resolution falls back to
-+      :attr:`!__package__` instead of
-+      :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>`.
-+
-+   .. versionchanged:: 3.12
-+      Raise :exc:`DeprecationWarning` instead of :exc:`ImportWarning` when
-+      falling back to :attr:`!__package__` during import resolution.
-+
-+.. attribute:: module.__loader__
-+
-+   The :term:`loader` object that the import machinery used to load the module.
-+
-+   This attribute is mostly useful for introspection, but can be used for
-+   additional loader-specific functionality, for example getting data
-+   associated with a loader.
-+
-+   :attr:`!__loader__` defaults to ``None`` for modules created dynamically
-+   using the :class:`types.ModuleType` constructor;
-+   use :func:`importlib.util.module_from_spec` instead to ensure the attribute
-+   is set to a :term:`loader` object.
-+
-+   It is **strongly** recommended that you use
-+   :attr:`module.__spec__.loader <importlib.machinery.ModuleSpec.loader>`
-+   instead of :attr:`!module.__loader__`.
-+
-+   .. versionchanged:: 3.4
-+      This attribute now defaults to ``None`` for modules created dynamically
-+      using the :class:`types.ModuleType` constructor.
-+      Previously the attribute was optional.
-+
-+   .. deprecated-removed:: 3.12 3.14
-+      Setting :attr:`!__loader__` on a module while failing to set
-+      :attr:`!__spec__.loader` is deprecated. In Python 3.14,
-+      :attr:`!__loader__` will cease to be set or taken into consideration by
-+      the import system or the standard library.
-+
-+.. attribute:: module.__path__
-+
-+   A (possibly empty) :term:`sequence` of strings enumerating the locations
-+   where the package's submodules will be found. Non-package modules should
-+   not have a :attr:`!__path__` attribute. See :ref:`package-path-rules` for
-+   more details.
-+
-+   It is **strongly** recommended that you use
-+   :attr:`module.__spec__.submodule_search_locations <importlib.machinery.ModuleSpec.submodule_search_locations>`
-+   instead of :attr:`!module.__path__`.
-+
-+.. attribute:: module.__file__
-+.. attribute:: module.__cached__
-+
-+   :attr:`!__file__` and :attr:`!__cached__` are both optional attributes that
-+   may or may not be set. Both attributes should be a :class:`str` when they
-+   are available.
-+
-+   :attr:`!__file__` indicates the pathname of the file from which the module
-+   was loaded (if loaded from a file), or the pathname of the shared library
-+   file for extension modules loaded dynamically from a shared library.
-+   It might be missing for certain types of modules, such as C modules that are
-+   statically linked into the interpreter, and the
-+   :ref:`import system <importsystem>` may opt to leave it unset if it
-+   has no semantic meaning (for example, a module loaded from a database).
-+
-+   If :attr:`!__file__` is set then the :attr:`!__cached__` attribute might
-+   also be set,  which is the path to any compiled version of
-+   the code (for example, a byte-compiled file). The file does not need to exist
-+   to set this attribute; the path can simply point to where the
-+   compiled file *would* exist (see :pep:`3147`).
-+
-+   Note that :attr:`!__cached__` may be set even if :attr:`!__file__` is not
-+   set.  However, that scenario is quite atypical.  Ultimately, the
-+   :term:`loader` is what makes use of the module spec provided by the
-+   :term:`finder` (from which :attr:`!__file__` and :attr:`!__cached__` are
-+   derived).  So if a loader can load from a cached module but otherwise does
-+   not load from a file, that atypical scenario may be appropriate.
-+
-+   It is **strongly** recommended that you use
-+   :attr:`module.__spec__.cached <importlib.machinery.ModuleSpec.cached>`
-+   instead of :attr:`!module.__cached__`.
-+
-+Other writable attributes on module objects
-+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-+
-+As well as the import-related attributes listed above, module objects also have
-+the following writable attributes:
-+
-+.. attribute:: module.__doc__
-+
-+   The module's documentation string, or ``None`` if unavailable.
-+   See also: :attr:`__doc__ attributes <definition.__doc__>`.
-+
-+.. attribute:: module.__annotations__
-+
-+   A dictionary containing
-+   :term:`variable annotations <variable annotation>` collected during module
-+   body execution.  For best practices on working with :attr:`__annotations__`,
-+   please see :ref:`annotations-howto`.
- 
--   :attr:`__name__`
--      The module's name.
-+Module dictionaries
-+^^^^^^^^^^^^^^^^^^^
- 
--   :attr:`__doc__`
--      The module's documentation string, or ``None`` if
--      unavailable.
--
--   :attr:`__file__`
--      The pathname of the file from which the
--      module was loaded, if it was loaded from a file.
--      The :attr:`__file__`
--      attribute may be missing for certain types of modules, such as C modules
--      that are statically linked into the interpreter.  For extension modules
--      loaded dynamically from a shared library, it's the pathname of the shared
--      library file.
--
--   :attr:`__annotations__`
--      A dictionary containing
--      :term:`variable annotations <variable annotation>` collected during
--      module body execution.  For best practices on working
--      with :attr:`__annotations__`, please see :ref:`annotations-howto`.
-+Module objects also have the following special read-only attribute:
- 
- .. index:: single: __dict__ (module attribute)
-+.. attribute:: module.__dict__
- 
--Special read-only attribute: :attr:`~object.__dict__` is the module's
--namespace as a dictionary object.
-+   The module's namespace as a dictionary object. Uniquely among the attributes
-+   listed here, :attr:`!__dict__` cannot be accessed as a global variable from
-+   within a module; it can only be accessed as an attribute on module objects.
- 
--.. impl-detail::
-+   .. impl-detail::
- 
--   Because of the way CPython clears module dictionaries, the module
--   dictionary will be cleared when the module falls out of scope even if the
--   dictionary still has live references.  To avoid this, copy the dictionary
--   or keep the module around while using its dictionary directly.
-+      Because of the way CPython clears module dictionaries, the module
-+      dictionary will be cleared when the module falls out of scope even if the
-+      dictionary still has live references.  To avoid this, copy the dictionary
-+      or keep the module around while using its dictionary directly.
- 
- 
- .. _class-attrs-and-methods:
-@@ -1764,7 +1942,8 @@
-    "informal" string representation of instances of that class is required.
- 
-    This is typically used for debugging, so it is important that the representation
--   is information-rich and unambiguous.
-+   is information-rich and unambiguous. A default implementation is provided by the
-+   :class:`object` class itself.
- 
-    .. index::
-       single: string; __str__() (object method)
-@@ -1774,10 +1953,10 @@
- 
- .. method:: object.__str__(self)
- 
--   Called by :func:`str(object) <str>` and the built-in functions
--   :func:`format` and :func:`print` to compute the "informal" or nicely
-+   Called by :func:`str(object) <str>`, the default :meth:`__format__` implementation,
-+   and the built-in function :func:`print`, to compute the "informal" or nicely
-    printable string representation of an object.  The return value must be a
--   :ref:`string <textseq>` object.
-+   :ref:`str <textseq>` object.
- 
-    This method differs from :meth:`object.__repr__` in that there is no
-    expectation that :meth:`__str__` return a valid Python expression: a more
-@@ -1794,7 +1973,8 @@
-    .. index:: pair: built-in function; bytes
- 
-    Called by :ref:`bytes <func-bytes>` to compute a byte-string representation
--   of an object. This should return a :class:`bytes` object.
-+   of an object. This should return a :class:`bytes` object. The :class:`object`
-+   class itself does not provide this method.
- 
-    .. index::
-       single: string; __format__() (object method)
-@@ -1818,6 +1998,9 @@
- 
-    The return value must be a string object.
- 
-+   The default implementation by the :class:`object` class should be given
-+   an empty *format_spec* string. It delegates to :meth:`__str__`.
-+
-    .. versionchanged:: 3.4
-       The __format__ method of ``object`` itself raises a :exc:`TypeError`
-       if passed any non-empty string.
-@@ -1860,6 +2043,12 @@
-    ``(x<y or x==y)`` does not imply ``x<=y``. To automatically generate ordering
-    operations from a single root operation, see :func:`functools.total_ordering`.
- 
-+   By default, the :class:`object` class provides implementations consistent
-+   with :ref:`expressions-value-comparisons`: equality compares according to
-+   object identity, and order comparisons raise :exc:`TypeError`. Each default
-+   method may generate these results directly, but may also return
-+   :data:`NotImplemented`.
-+
-    See the paragraph on :meth:`__hash__` for
-    some important notes on creating :term:`hashable` objects which support
-    custom comparison operations and are usable as dictionary keys.
-@@ -1915,9 +2104,9 @@
-    bucket).
- 
-    User-defined classes have :meth:`__eq__` and :meth:`__hash__` methods
--   by default; with them, all objects compare unequal (except with themselves)
--   and ``x.__hash__()`` returns an appropriate value such that ``x == y``
--   implies both that ``x is y`` and ``hash(x) == hash(y)``.
-+   by default (inherited from the :class:`object` class); with them, all objects compare
-+   unequal (except with themselves) and ``x.__hash__()`` returns an appropriate
-+   value such that ``x == y`` implies both that ``x is y`` and ``hash(x) == hash(y)``.
- 
-    A class that overrides :meth:`__eq__` and does not define :meth:`__hash__`
-    will have its :meth:`__hash__` implicitly set to ``None``.  When the
-@@ -1967,8 +2156,8 @@
-    ``bool()``; should return ``False`` or ``True``.  When this method is not
-    defined, :meth:`~object.__len__` is called, if it is defined, and the object is
-    considered true if its result is nonzero.  If a class defines neither
--   :meth:`!__len__` nor :meth:`!__bool__`, all its instances are considered
--   true.
-+   :meth:`!__len__` nor :meth:`!__bool__` (which is true of the :class:`object`
-+   class itself), all its instances are considered true.
- 
- 
- .. _attribute-access:
-@@ -1990,6 +2179,7 @@
-    for ``self``; or :meth:`__get__` of a *name* property raises
-    :exc:`AttributeError`).  This method should either return the (computed)
-    attribute value or raise an :exc:`AttributeError` exception.
-+   The :class:`object` class itself does not provide this method.
- 
-    Note that if the attribute is found through the normal mechanism,
-    :meth:`__getattr__` is not called.  (This is an intentional asymmetry between
-@@ -2128,8 +2318,8 @@
- descriptor must be in either the owner's class dictionary or in the class
- dictionary for one of its parents).  In the examples below, "the attribute"
- refers to the attribute whose name is the key of the property in the owner
--class' :attr:`~object.__dict__`.
--
-+class' :attr:`~object.__dict__`.  The :class:`object` class itself does not
-+implement any of these protocols.
- 
- .. method:: object.__get__(self, instance, owner=None)
- 
-@@ -2821,6 +3011,7 @@
- 
-    Called when the instance is "called" as a function; if this method is defined,
-    ``x(arg1, arg2, ...)`` roughly translates to ``type(x).__call__(x, arg1, ...)``.
-+   The :class:`object` class itself does not provide this method.
- 
- 
- .. _sequence-types:
-@@ -2828,10 +3019,11 @@
- Emulating container types
- -------------------------
- 
--The following methods can be defined to implement container objects.  Containers
--usually are :term:`sequences <sequence>` (such as :class:`lists <list>` or
-+The following methods can be defined to implement container objects. None of them
-+are provided by the :class:`object` class itself. Containers usually are
-+:term:`sequences <sequence>` (such as :class:`lists <list>` or
- :class:`tuples <tuple>`) or :term:`mappings <mapping>` (like
--:class:`dictionaries <dict>`),
-+:term:`dictionaries <dictionary>`),
- but can represent other containers as well.  The first set of methods is used
- either to emulate a sequence or to emulate a mapping; the difference is that for
- a sequence, the allowable keys should be the integers *k* for which ``0 <= k <
-@@ -3194,6 +3386,7 @@
- global state, locking and unlocking resources, closing opened files, etc.
- 
- For more information on context managers, see :ref:`typecontextmanager`.
-+The :class:`object` class itself does not provide the context manager methods.
- 
- 
- .. method:: object.__enter__(self)
-@@ -3398,6 +3591,8 @@
-    Must return an :term:`iterator`.  Should be used to implement
-    :term:`awaitable` objects.  For instance, :class:`asyncio.Future` implements
-    this method to be compatible with the :keyword:`await` expression.
-+   The :class:`object` class itself is not awaitable and does not provide
-+   this method.
- 
-    .. note::
- 
-@@ -3483,6 +3678,9 @@
- 
- Asynchronous iterators can be used in an :keyword:`async for` statement.
- 
-+The :class:`object` class itself does not provide these methods.
-+
-+
- .. method:: object.__aiter__(self)
- 
-    Must return an *asynchronous iterator* object.
-@@ -3529,6 +3727,8 @@
- 
- Asynchronous context managers can be used in an :keyword:`async with` statement.
- 
-+The :class:`object` class itself does not provide these methods.
-+
- .. method:: object.__aenter__(self)
- 
-    Semantically similar to :meth:`~object.__enter__`, the only
---- a/Doc/reference/import.rst
-+++ b/Doc/reference/import.rst
-@@ -513,8 +513,10 @@
- ``sys.modules['spam.foo']`` (as you would after the above import), the latter
- must appear as the ``foo`` attribute of the former.
- 
--Module spec
-------------
-+.. _module-specs:
-+
-+Module specs
-+------------
- 
- The import machinery uses a variety of information about each module
- during import, especially before loading.  Most of the information is
-@@ -527,155 +529,44 @@
- import machinery to perform the boilerplate operations of loading,
- whereas without a module spec the loader had that responsibility.
- 
--The module's spec is exposed as the ``__spec__`` attribute on a module object.
-+The module's spec is exposed as :attr:`module.__spec__`. Setting
-+:attr:`!__spec__` appropriately applies equally to
-+:ref:`modules initialized during interpreter startup <programs>`.
-+The one exception is ``__main__``, where :attr:`!__spec__` is
-+:ref:`set to None in some cases <main_spec>`.
-+
- See :class:`~importlib.machinery.ModuleSpec` for details on the contents of
- the module spec.
- 
- .. versionadded:: 3.4
- 
--.. _import-mod-attrs:
--
--Import-related module attributes
----------------------------------
--
--The import machinery fills in these attributes on each module object
--during loading, based on the module's spec, before the loader executes
--the module.
--
--It is **strongly** recommended that you rely on :attr:`__spec__` and
--its attributes instead of any of the other individual attributes
--listed below.
--
--.. attribute:: __name__
--
--   The ``__name__`` attribute must be set to the fully qualified name of
--   the module.  This name is used to uniquely identify the module in
--   the import system.
--
--.. attribute:: __loader__
--
--   The ``__loader__`` attribute must be set to the loader object that
--   the import machinery used when loading the module.  This is mostly
--   for introspection, but can be used for additional loader-specific
--   functionality, for example getting data associated with a loader.
--
--   It is **strongly** recommended that you rely on :attr:`__spec__`
--   instead of this attribute.
--
--   .. versionchanged:: 3.12
--      The value of ``__loader__`` is expected to be the same as
--      ``__spec__.loader``.  The use of ``__loader__`` is deprecated and slated
--      for removal in Python 3.14.
--
--.. attribute:: __package__
--
--   The module's ``__package__`` attribute may be set.  Its value must
--   be a string, but it can be the same value as its ``__name__``.  When
--   the module is a package, its ``__package__`` value should be set to
--   its ``__name__``.  When the module is not a package, ``__package__``
--   should be set to the empty string for top-level modules, or for
--   submodules, to the parent package's name.  See :pep:`366` for further
--   details.
--
--   This attribute is used instead of ``__name__`` to calculate explicit
--   relative imports for main modules, as defined in :pep:`366`.
--
--   It is **strongly** recommended that you rely on :attr:`__spec__`
--   instead of this attribute.
--
--   .. versionchanged:: 3.6
--      The value of ``__package__`` is expected to be the same as
--      ``__spec__.parent``.
--
--   .. versionchanged:: 3.10
--      :exc:`ImportWarning` is raised if import falls back to
--      ``__package__`` instead of
--      :attr:`~importlib.machinery.ModuleSpec.parent`.
--
--   .. versionchanged:: 3.12
--      Raise :exc:`DeprecationWarning` instead of :exc:`ImportWarning`
--      when falling back to ``__package__``.
--
--
--.. attribute:: __spec__
--
--   The ``__spec__`` attribute must be set to the module spec that was
--   used when importing the module. Setting ``__spec__``
--   appropriately applies equally to :ref:`modules initialized during
--   interpreter startup <programs>`.  The one exception is ``__main__``,
--   where ``__spec__`` is :ref:`set to None in some cases <main_spec>`.
--
--   When ``__spec__.parent`` is not set, ``__package__`` is used as
--   a fallback.
--
--   .. versionadded:: 3.4
--
--   .. versionchanged:: 3.6
--      ``__spec__.parent`` is used as a fallback when ``__package__`` is
--      not defined.
--
--.. attribute:: __path__
--
--   If the module is a package (either regular or namespace), the module
--   object's ``__path__`` attribute must be set.  The value must be
--   iterable, but may be empty if ``__path__`` has no further significance.
--   If ``__path__`` is not empty, it must produce strings when iterated
--   over. More details on the semantics of ``__path__`` are given
--   :ref:`below <package-path-rules>`.
--
--   Non-package modules should not have a ``__path__`` attribute.
--
--.. attribute:: __file__
--.. attribute:: __cached__
--
--   ``__file__`` is optional (if set, value must be a string). It indicates
--   the pathname of the file from which the module was loaded (if
--   loaded from a file), or the pathname of the shared library file
--   for extension modules loaded dynamically from a shared library.
--   It might be missing for certain types of modules, such as C
--   modules that are statically linked into the interpreter, and the
--   import system may opt to leave it unset if it has no semantic
--   meaning (e.g. a module loaded from a database).
--
--   If ``__file__`` is set then the ``__cached__`` attribute might also
--   be set,  which is the path to any compiled version of
--   the code (e.g. byte-compiled file). The file does not need to exist
--   to set this attribute; the path can simply point to where the
--   compiled file would exist (see :pep:`3147`).
--
--   Note that ``__cached__`` may be set even if ``__file__`` is not
--   set.  However, that scenario is quite atypical.  Ultimately, the
--   loader is what makes use of the module spec provided by the finder
--   (from which ``__file__`` and ``__cached__`` are derived).  So
--   if a loader can load from a cached module but otherwise does not load
--   from a file, that atypical scenario may be appropriate.
--
--   It is **strongly** recommended that you rely on :attr:`__spec__`
--   instead of ``__cached__``.
--
- .. _package-path-rules:
- 
--module.__path__
-----------------
-+__path__ attributes on modules
-+------------------------------
- 
--By definition, if a module has a ``__path__`` attribute, it is a package.
-+The :attr:`~module.__path__` attribute should be a (possibly empty)
-+:term:`sequence` of strings enumerating the locations where the package's
-+submodules will be found. By definition, if a module has a :attr:`!__path__`
-+attribute, it is a :term:`package`.
- 
--A package's ``__path__`` attribute is used during imports of its subpackages.
-+A package's :attr:`~module.__path__` attribute is used during imports of its
-+subpackages.
- Within the import machinery, it functions much the same as :data:`sys.path`,
- i.e. providing a list of locations to search for modules during import.
--However, ``__path__`` is typically much more constrained than
--:data:`sys.path`.
-+However, :attr:`!__path__` is typically much more constrained than
-+:data:`!sys.path`.
- 
--``__path__`` must be an iterable of strings, but it may be empty.
- The same rules used for :data:`sys.path` also apply to a package's
--``__path__``, and :data:`sys.path_hooks` (described below) are
--consulted when traversing a package's ``__path__``.
-+:attr:`!__path__`. :data:`sys.path_hooks` (described below) are
-+consulted when traversing a package's :attr:`!__path__`.
- 
--A package's ``__init__.py`` file may set or alter the package's ``__path__``
-+A package's ``__init__.py`` file may set or alter the package's
-+:attr:`~module.__path__`
- attribute, and this was typically the way namespace packages were implemented
- prior to :pep:`420`.  With the adoption of :pep:`420`, namespace packages no
--longer need to supply ``__init__.py`` files containing only ``__path__``
--manipulation code; the import machinery automatically sets ``__path__``
-+longer need to supply ``__init__.py`` files containing only :attr:`!__path__`
-+manipulation code; the import machinery automatically sets :attr:`!__path__`
- correctly for the namespace package.
- 
- Module reprs
---- a/Doc/reference/lexical_analysis.rst
-+++ b/Doc/reference/lexical_analysis.rst
-@@ -284,11 +284,10 @@
- further details.
- 
- Within the ASCII range (U+0001..U+007F), the valid characters for identifiers
--are the same as in Python 2.x: the uppercase and lowercase letters ``A`` through
-+include the uppercase and lowercase letters ``A`` through
- ``Z``, the underscore ``_`` and, except for the first character, the digits
- ``0`` through ``9``.
--
--Python 3.0 introduces additional characters from outside the ASCII range (see
-+Python 3.0 introduced additional characters from outside the ASCII range (see
- :pep:`3131`).  For these characters, the classification uses the version of the
- Unicode Character Database as included in the :mod:`unicodedata` module.
- 
---- a/Doc/requirements-oldest-sphinx.txt
-+++ b/Doc/requirements-oldest-sphinx.txt
-@@ -7,29 +7,29 @@
- python-docs-theme>=2022.1
- 
- # Generated from:
--#     pip install "Sphinx~=6.2.1"
-+#     pip install "Sphinx~=7.2.6"
- #     pip freeze
- #
--# Sphinx 6.2.1 comes from ``needs_sphinx = '6.2.1'`` in ``Doc/conf.py``.
-+# Sphinx 7.2.6 comes from ``needs_sphinx = '7.2.6'`` in ``Doc/conf.py``.
- 
- alabaster==0.7.16
--Babel==2.15.0
--certifi==2024.7.4
--charset-normalizer==3.3.2
--docutils==0.19
--idna==3.7
-+Babel==2.16.0
-+certifi==2024.8.30
-+charset-normalizer==3.4.0
-+docutils==0.20.1
-+idna==3.10
- imagesize==1.4.1
- Jinja2==3.1.4
--MarkupSafe==2.1.5
-+MarkupSafe==3.0.1
- packaging==24.1
- Pygments==2.18.0
- requests==2.32.3
- snowballstemmer==2.2.0
--Sphinx==6.2.1
--sphinxcontrib-applehelp==1.0.8
--sphinxcontrib-devhelp==1.0.6
--sphinxcontrib-htmlhelp==2.0.5
-+Sphinx==7.2.6
-+sphinxcontrib-applehelp==2.0.0
-+sphinxcontrib-devhelp==2.0.0
-+sphinxcontrib-htmlhelp==2.1.0
- sphinxcontrib-jsmath==1.0.1
--sphinxcontrib-qthelp==1.0.7
--sphinxcontrib-serializinghtml==1.1.10
--urllib3==2.2.2
-+sphinxcontrib-qthelp==2.0.0
-+sphinxcontrib-serializinghtml==2.0.0
-+urllib3==2.2.3
---- a/Doc/requirements.txt
-+++ b/Doc/requirements.txt
-@@ -6,7 +6,7 @@
- # Sphinx version is pinned so that new versions that introduce new warnings
- # won't suddenly cause build failures. Updating the version is fine as long
- # as no warnings are raised by doing so.
--sphinx~=8.0.0
-+sphinx~=8.1.0
- 
- blurb
- 
---- /dev/null
-+++ b/Doc/tools/extensions/availability.py
-@@ -0,0 +1,123 @@
-+"""Support for documenting platform availability"""
-+
-+from __future__ import annotations
-+
-+from typing import TYPE_CHECKING
-+
-+from docutils import nodes
-+from sphinx import addnodes
-+from sphinx.util import logging
-+from sphinx.util.docutils import SphinxDirective
-+
-+if TYPE_CHECKING:
-+    from sphinx.application import Sphinx
-+    from sphinx.util.typing import ExtensionMetadata
-+
-+logger = logging.getLogger("availability")
-+
-+# known platform, libc, and threading implementations
-+_PLATFORMS = frozenset({
-+    "AIX",
-+    "Android",
-+    "BSD",
-+    "DragonFlyBSD",
-+    "Emscripten",
-+    "FreeBSD",
-+    "Linux",
-+    "macOS",
-+    "NetBSD",
-+    "OpenBSD",
-+    "POSIX",
-+    "Solaris",
-+    "Unix",
-+    "VxWorks",
-+    "WASI",
-+    "Windows",
-+})
-+_LIBC = frozenset({
-+    "BSD libc",
-+    "glibc",
-+    "musl",
-+})
-+_THREADING = frozenset({
-+    # POSIX platforms with pthreads
-+    "pthreads",
-+})
-+KNOWN_PLATFORMS = _PLATFORMS | _LIBC | _THREADING
-+
-+
-+class Availability(SphinxDirective):
-+    has_content = True
-+    required_arguments = 1
-+    optional_arguments = 0
-+    final_argument_whitespace = True
-+
-+    def run(self) -> list[nodes.container]:
-+        title = "Availability"
-+        refnode = addnodes.pending_xref(
-+            title,
-+            nodes.inline(title, title, classes=["xref", "std", "std-ref"]),
-+            refdoc=self.env.docname,
-+            refdomain="std",
-+            refexplicit=True,
-+            reftarget="availability",
-+            reftype="ref",
-+            refwarn=True,
-+        )
-+        sep = nodes.Text(": ")
-+        parsed, msgs = self.state.inline_text(self.arguments[0], self.lineno)
-+        pnode = nodes.paragraph(title, "", refnode, sep, *parsed, *msgs)
-+        self.set_source_info(pnode)
-+        cnode = nodes.container("", pnode, classes=["availability"])
-+        self.set_source_info(cnode)
-+        if self.content:
-+            self.state.nested_parse(self.content, self.content_offset, cnode)
-+        self.parse_platforms()
-+
-+        return [cnode]
-+
-+    def parse_platforms(self) -> dict[str, str | bool]:
-+        """Parse platform information from arguments
-+
-+        Arguments is a comma-separated string of platforms. A platform may
-+        be prefixed with "not " to indicate that a feature is not available.
-+
-+        Example::
-+
-+           .. availability:: Windows, Linux >= 4.2, not WASI
-+
-+        Arguments like "Linux >= 3.17 with glibc >= 2.27" are currently not
-+        parsed into separate tokens.
-+        """
-+        platforms = {}
-+        for arg in self.arguments[0].rstrip(".").split(","):
-+            arg = arg.strip()
-+            platform, _, version = arg.partition(" >= ")
-+            if platform.startswith("not "):
-+                version = False
-+                platform = platform.removeprefix("not ")
-+            elif not version:
-+                version = True
-+            platforms[platform] = version
-+
-+        if unknown := set(platforms).difference(KNOWN_PLATFORMS):
-+            logger.warning(
-+                "Unknown platform%s or syntax '%s' in '.. availability:: %s', "
-+                "see %s:KNOWN_PLATFORMS for a set of known platforms.",
-+                "s" if len(platforms) != 1 else "",
-+                " ".join(sorted(unknown)),
-+                self.arguments[0],
-+                __file__,
-+            )
-+
-+        return platforms
-+
-+
-+def setup(app: Sphinx) -> ExtensionMetadata:
-+    app.add_directive("availability", Availability)
-+
-+    return {
-+        "version": "1.0",
-+        "parallel_read_safe": True,
-+        "parallel_write_safe": True,
-+    }
---- a/Doc/tools/extensions/patchlevel.py
-+++ b/Doc/tools/extensions/patchlevel.py
-@@ -74,4 +74,8 @@
- 
- 
- if __name__ == "__main__":
--    print(format_version_info(get_header_version_info())[0])
-+    short_ver, full_ver = format_version_info(get_header_version_info())
-+    if sys.argv[1:2] == ["--short"]:
-+        print(short_ver)
-+    else:
-+        print(full_ver)
---- a/Doc/tools/extensions/pyspecific.py
-+++ b/Doc/tools/extensions/pyspecific.py
-@@ -24,7 +24,6 @@
- from sphinx.domains.changeset import VersionChange, versionlabels, versionlabel_classes
- from sphinx.domains.python import PyFunction, PyMethod, PyModule
- from sphinx.locale import _ as sphinx_gettext
--from sphinx.util import logging
- from sphinx.util.docutils import SphinxDirective
- from sphinx.writers.text import TextWriter, TextTranslator
- from sphinx.util.display import status_iterator
-@@ -108,80 +107,6 @@
-         return [pnode]
- 
- 
--# Support for documenting platform availability
--
--class Availability(SphinxDirective):
--
--    has_content = True
--    required_arguments = 1
--    optional_arguments = 0
--    final_argument_whitespace = True
--
--    # known platform, libc, and threading implementations
--    known_platforms = frozenset({
--        "AIX", "Android", "BSD", "DragonFlyBSD", "Emscripten", "FreeBSD",
--        "Linux", "NetBSD", "OpenBSD", "POSIX", "Solaris", "Unix", "VxWorks",
--        "WASI", "Windows", "macOS",
--        # libc
--        "BSD libc", "glibc", "musl",
--        # POSIX platforms with pthreads
--        "pthreads",
--    })
--
--    def run(self):
--        availability_ref = ':ref:`Availability <availability>`: '
--        avail_nodes, avail_msgs = self.state.inline_text(
--            availability_ref + self.arguments[0],
--            self.lineno)
--        pnode = nodes.paragraph(availability_ref + self.arguments[0],
--                                '', *avail_nodes, *avail_msgs)
--        self.set_source_info(pnode)
--        cnode = nodes.container("", pnode, classes=["availability"])
--        self.set_source_info(cnode)
--        if self.content:
--            self.state.nested_parse(self.content, self.content_offset, cnode)
--        self.parse_platforms()
--
--        return [cnode]
--
--    def parse_platforms(self):
--        """Parse platform information from arguments
--
--        Arguments is a comma-separated string of platforms. A platform may
--        be prefixed with "not " to indicate that a feature is not available.
--
--        Example::
--
--           .. availability:: Windows, Linux >= 4.2, not Emscripten, not WASI
--
--        Arguments like "Linux >= 3.17 with glibc >= 2.27" are currently not
--        parsed into separate tokens.
--        """
--        platforms = {}
--        for arg in self.arguments[0].rstrip(".").split(","):
--            arg = arg.strip()
--            platform, _, version = arg.partition(" >= ")
--            if platform.startswith("not "):
--                version = False
--                platform = platform[4:]
--            elif not version:
--                version = True
--            platforms[platform] = version
--
--        unknown = set(platforms).difference(self.known_platforms)
--        if unknown:
--            cls = type(self)
--            logger = logging.getLogger(cls.__qualname__)
--            logger.warning(
--                f"Unknown platform(s) or syntax '{' '.join(sorted(unknown))}' "
--                f"in '.. availability:: {self.arguments[0]}', see "
--                f"{__file__}:{cls.__qualname__}.known_platforms for a set "
--                "known platforms."
--            )
--
--        return platforms
--
--
- # Support for documenting decorators
- 
- class PyDecoratorMixin(object):
-@@ -259,7 +184,22 @@
-         return PyMethod.run(self)
- 
- 
--# Support for documenting version of removal in deprecations
-+# Support for documenting version of changes, additions, deprecations
-+
-+def expand_version_arg(argument, release):
-+    """Expand "next" to the current version"""
-+    if argument == 'next':
-+        return sphinx_gettext('{} (unreleased)').format(release)
-+    return argument
-+
-+
-+class PyVersionChange(VersionChange):
-+    def run(self):
-+        # Replace the 'next' special token with the current development version
-+        self.arguments[0] = expand_version_arg(self.arguments[0],
-+                                               self.config.release)
-+        return super().run()
-+
- 
- class DeprecatedRemoved(VersionChange):
-     required_arguments = 2
-@@ -270,8 +210,12 @@
-     def run(self):
-         # Replace the first two arguments (deprecated version and removed version)
-         # with a single tuple of both versions.
--        version_deprecated = self.arguments[0]
-+        version_deprecated = expand_version_arg(self.arguments[0],
-+                                                self.config.release)
-         version_removed = self.arguments.pop(1)
-+        if version_removed == 'next':
-+            raise ValueError(
-+                'deprecated-removed:: second argument cannot be `next`')
-         self.arguments[0] = version_deprecated, version_removed
- 
-         # Set the label based on if we have reached the removal version
-@@ -473,7 +417,10 @@
-     app.add_role('issue', issue_role)
-     app.add_role('gh', gh_issue_role)
-     app.add_directive('impl-detail', ImplementationDetail)
--    app.add_directive('availability', Availability)
-+    app.add_directive('versionadded', PyVersionChange, override=True)
-+    app.add_directive('versionchanged', PyVersionChange, override=True)
-+    app.add_directive('versionremoved', PyVersionChange, override=True)
-+    app.add_directive('deprecated', PyVersionChange, override=True)
-     app.add_directive('deprecated-removed', DeprecatedRemoved)
-     app.add_builder(PydocTopicsBuilder)
-     app.add_object_type('opcode', 'opcode', '%s (opcode)', parse_opcode_signature)
-@@ -488,5 +435,6 @@
-     app.add_directive_to_domain('py', 'awaitablemethod', PyAwaitableMethod)
-     app.add_directive_to_domain('py', 'abstractmethod', PyAbstractMethod)
-     app.add_directive('miscnews', MiscNews)
-+    app.add_css_file('sidebar-wrap.css')
-     app.connect('env-check-consistency', patch_pairindextypes)
-     return {'version': '1.0', 'parallel_read_safe': True}
---- a/Doc/tools/static/rtd_switcher.js
-+++ b/Doc/tools/static/rtd_switcher.js
-@@ -7,7 +7,7 @@
-  document.addEventListener("readthedocs-addons-data-ready", function(event) {
-    const config = event.detail.data()
-    const versionSelect = `
--   <select id="version_select">
-+   <select id="version_select" aria-label="Python version">
-    ${ config.versions.active.map(
-        (version) => `
-        <option
-@@ -25,7 +25,7 @@
-    languages = languages.sort((a, b) => a.language.name.localeCompare(b.language.name));
- 
-    const languageSelect = `
--   <select id="language_select">
-+   <select id="language_select" aria-label="Language">
-    ${ languages.map(
-        (translation) => `
-        <option
---- /dev/null
-+++ b/Doc/tools/static/sidebar-wrap.css
-@@ -0,0 +1,6 @@
-+div.sphinxsidebarwrapper {
-+    overflow-x: scroll;
-+}
-+div.sphinxsidebarwrapper li code {
-+    overflow-wrap: normal;
-+}
---- a/Doc/tools/templates/indexcontent.html
-+++ b/Doc/tools/templates/indexcontent.html
-@@ -59,7 +59,7 @@
-   <table class="contentstable" align="center"><tr>
-     <td width="50%">
-       <p class="biglink"><a class="biglink" href="{{ pathto("bugs") }}">{% trans %}Reporting issues{% endtrans %}</a></p>
--      <p class="biglink"><a class="biglink" href="https://devguide.python.org/docquality/#helping-with-documentation">{% trans %}Contributing to Docs{% endtrans %}</a></p>
-+      <p class="biglink"><a class="biglink" href="https://devguide.python.org/documentation/help-documenting/">{% trans %}Contributing to Docs{% endtrans %}</a></p>
-       <p class="biglink"><a class="biglink" href="{{ pathto("download") }}">{% trans %}Download the documentation{% endtrans %}</a></p>
-     </td><td width="50%">
-       <p class="biglink"><a class="biglink" href="{{ pathto("license") }}">{% trans %}History and license of Python{% endtrans %}</a></p>
---- a/Doc/tutorial/controlflow.rst
-+++ b/Doc/tutorial/controlflow.rst
-@@ -196,6 +196,7 @@
-     Found an odd number 9
- 
- .. _tut-for-else:
-+.. _break-and-continue-statements-and-else-clauses-on-loops:
- 
- :keyword:`!else` Clauses on Loops
- =================================
-@@ -461,8 +462,8 @@
- We can create a function that writes the Fibonacci series to an arbitrary
- boundary::
- 
--   >>> def fib(n):    # write Fibonacci series up to n
--   ...     """Print a Fibonacci series up to n."""
-+   >>> def fib(n):    # write Fibonacci series less than n
-+   ...     """Print a Fibonacci series less than n."""
-    ...     a, b = 0, 1
-    ...     while a < n:
-    ...         print(a, end=' ')
-@@ -832,7 +833,7 @@
-      File "<stdin>", line 1, in <module>
-    TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg'
- 
--The third function ``kwd_only_args`` only allows keyword arguments as indicated
-+The third function ``kwd_only_arg`` only allows keyword arguments as indicated
- by a ``*`` in the function definition::
- 
-    >>> kwd_only_arg(3)
---- a/Doc/tutorial/datastructures.rst
-+++ b/Doc/tutorial/datastructures.rst
-@@ -19,13 +19,13 @@
- .. method:: list.append(x)
-    :noindex:
- 
--   Add an item to the end of the list.  Equivalent to ``a[len(a):] = [x]``.
-+   Add an item to the end of the list.  Similar to ``a[len(a):] = [x]``.
- 
- 
- .. method:: list.extend(iterable)
-    :noindex:
- 
--   Extend the list by appending all the items from the iterable.  Equivalent to
-+   Extend the list by appending all the items from the iterable.  Similar to
-    ``a[len(a):] = iterable``.
- 
- 
-@@ -56,7 +56,7 @@
- .. method:: list.clear()
-    :noindex:
- 
--   Remove all items from the list.  Equivalent to ``del a[:]``.
-+   Remove all items from the list.  Similar to ``del a[:]``.
- 
- 
- .. method:: list.index(x[, start[, end]])
-@@ -93,7 +93,7 @@
- .. method:: list.copy()
-    :noindex:
- 
--   Return a shallow copy of the list.  Equivalent to ``a[:]``.
-+   Return a shallow copy of the list.  Similar to ``a[:]``.
- 
- 
- An example that uses most of the list methods::
---- a/Doc/tutorial/inputoutput.rst
-+++ b/Doc/tutorial/inputoutput.rst
-@@ -100,6 +100,13 @@
- ``$x`` and replacing them with values from a dictionary, but offers much less
- control of the formatting.
- 
-+.. index::
-+   single: formatted string literal
-+   single: interpolated string literal
-+   single: string; formatted literal
-+   single: string; interpolated literal
-+   single: f-string
-+   single: fstring
- 
- .. _tut-f-strings:
- 
---- a/Doc/tutorial/introduction.rst
-+++ b/Doc/tutorial/introduction.rst
-@@ -197,21 +197,19 @@
- String literals can span multiple lines.  One way is using triple-quotes:
- ``"""..."""`` or ``'''...'''``.  End of lines are automatically
- included in the string, but it's possible to prevent this by adding a ``\`` at
--the end of the line.  The following example::
-+the end of the line.  In the following example, the initial newline is not
-+included::
- 
--   print("""\
-+   >>> print("""\
-+   ... Usage: thingy [OPTIONS]
-+   ...      -h                        Display this usage message
-+   ...      -H hostname               Hostname to connect to
-+   ... """)
-    Usage: thingy [OPTIONS]
-         -h                        Display this usage message
-         -H hostname               Hostname to connect to
--   """)
- 
--produces the following output (note that the initial newline is not included):
--
--.. code-block:: text
--
--   Usage: thingy [OPTIONS]
--        -h                        Display this usage message
--        -H hostname               Hostname to connect to
-+   >>>
- 
- Strings can be concatenated (glued together) with the ``+`` operator, and
- repeated with ``*``::
---- a/Doc/tutorial/modules.rst
-+++ b/Doc/tutorial/modules.rst
-@@ -585,8 +585,9 @@
- Packages in Multiple Directories
- --------------------------------
- 
--Packages support one more special attribute, :attr:`__path__`.  This is
--initialized to be a list containing the name of the directory holding the
-+Packages support one more special attribute, :attr:`~module.__path__`.  This is
-+initialized to be a :term:`sequence` of strings containing the name of the
-+directory holding the
- package's :file:`__init__.py` before the code in that file is executed.  This
- variable can be modified; doing so affects future searches for modules and
- subpackages contained in the package.
---- a/Doc/using/unix.rst
-+++ b/Doc/using/unix.rst
-@@ -17,12 +17,12 @@
- 
- Python comes preinstalled on most Linux distributions, and is available as a
- package on all others.  However there are certain features you might want to use
--that are not available on your distro's package.  You can easily compile the
-+that are not available on your distro's package.  You can compile the
- latest version of Python from source.
- 
--In the event that Python doesn't come preinstalled and isn't in the repositories as
--well, you can easily make packages for your own distro.  Have a look at the
--following links:
-+In the event that the latest version of Python doesn't come preinstalled and isn't
-+in the repositories as well, you can make packages for your own distro.  Have a
-+look at the following links:
- 
- .. seealso::
- 
---- a/Doc/whatsnew/2.6.rst
-+++ b/Doc/whatsnew/2.6.rst
-@@ -502,12 +502,12 @@
- When you ran a module that was located inside a package, relative
- imports didn't work correctly.
- 
--The fix for Python 2.6 adds a :attr:`__package__` attribute to
--modules.  When this attribute is present, relative imports will be
-+The fix for Python 2.6 adds a :attr:`module.__package__` attribute.
-+When this attribute is present, relative imports will be
- relative to the value of this attribute instead of the
--:attr:`__name__` attribute.
-+:attr:`~module.__name__` attribute.
- 
--PEP 302-style importers can then set :attr:`__package__` as necessary.
-+PEP 302-style importers can then set :attr:`~module.__package__` as necessary.
- The :mod:`runpy` module that implements the :option:`-m` switch now
- does this, so relative imports will now work correctly in scripts
- running from inside a package.
---- a/Doc/whatsnew/3.0.rst
-+++ b/Doc/whatsnew/3.0.rst
-@@ -357,8 +357,8 @@
-   provides a standardized way of annotating a function's parameters
-   and return value.  There are no semantics attached to such
-   annotations except that they can be introspected at runtime using
--  the :attr:`__annotations__` attribute.  The intent is to encourage
--  experimentation through metaclasses, decorators or frameworks.
-+  the :attr:`~object.__annotations__` attribute.  The intent is to
-+  encourage experimentation through metaclasses, decorators or frameworks.
- 
- * :pep:`3102`: Keyword-only arguments.  Named parameters occurring
-   after ``*args`` in the parameter list *must* be specified using
---- a/Doc/whatsnew/3.12.rst
-+++ b/Doc/whatsnew/3.12.rst
-@@ -59,7 +59,7 @@
- .. This section singles out the most important changes in Python 3.12.
-    Brevity is key.
- 
--Python 3.12 is the latest stable release of the Python programming language,
-+Python 3.12 is a stable release of the Python programming language,
- with a mix of changes to the language and the standard library.
- The library changes focus on cleaning up deprecated APIs, usability, and correctness.
- Of note, the :mod:`!distutils` package has been removed from the standard library.
-@@ -359,7 +359,7 @@
-    /* The new interpreter is now active in the current thread. */
- 
- For further examples how to use the C-API for sub-interpreters with a
--per-interpreter GIL, see ``Modules/_xxsubinterpretersmodule.c``.
-+per-interpreter GIL, see :source:`Modules/_xxsubinterpretersmodule.c`.
- 
- (Contributed by Eric Snow in :gh:`104210`, etc.)
- 
-@@ -1320,14 +1320,15 @@
-   may be removed in a future version of Python. Use the single-arg versions
-   of these functions instead. (Contributed by Ofey Chan in :gh:`89874`.)
- 
--* :exc:`DeprecationWarning` is now raised when ``__package__`` on a
--  module differs from ``__spec__.parent`` (previously it was
--  :exc:`ImportWarning`).
-+* :exc:`DeprecationWarning` is now raised when :attr:`~module.__package__` on a
-+  module differs from
-+  :attr:`__spec__.parent <importlib.machinery.ModuleSpec.parent>` (previously
-+  it was :exc:`ImportWarning`).
-   (Contributed by Brett Cannon in :gh:`65961`.)
- 
--* Setting ``__package__`` or ``__cached__`` on a module is deprecated,
--  and will cease to be set or taken into consideration by the import system in Python 3.14.
--  (Contributed by Brett Cannon in :gh:`65961`.)
-+* Setting :attr:`~module.__package__` or :attr:`~module.__cached__` on a
-+  module is deprecated, and will cease to be set or taken into consideration by
-+  the import system in Python 3.14. (Contributed by Brett Cannon in :gh:`65961`.)
- 
- * The bitwise inversion operator (``~``) on bool is deprecated. It will throw an
-   error in Python 3.16. Use ``not`` for logical negation of bools instead.
---- a/Doc/whatsnew/3.2.rst
-+++ b/Doc/whatsnew/3.2.rst
-@@ -312,8 +312,8 @@
- Aside from the filenames and target directories, the new scheme has a few
- aspects that are visible to the programmer:
- 
--* Imported modules now have a :attr:`__cached__` attribute which stores the name
--  of the actual file that was imported:
-+* Imported modules now have a :attr:`~module.__cached__` attribute which stores
-+  the name of the actual file that was imported:
- 
-    >>> import collections
-    >>> collections.__cached__ # doctest: +SKIP
---- a/Doc/whatsnew/3.4.rst
-+++ b/Doc/whatsnew/3.4.rst
-@@ -2271,7 +2271,8 @@
-   :func:`super` and falling through all the way to the ABCs. For compatibility,
-   catch both :exc:`NotImplementedError` or the appropriate exception as needed.
- 
--* The module type now initializes the :attr:`__package__` and :attr:`__loader__`
-+* The module type now initializes the :attr:`~module.__package__` and
-+  :attr:`~module.__loader__`
-   attributes to ``None`` by default. To determine if these attributes were set
-   in a backwards-compatible fashion, use e.g.
-   ``getattr(module, '__loader__', None) is not None``.  (:issue:`17115`.)
---- a/Doc/whatsnew/3.5.rst
-+++ b/Doc/whatsnew/3.5.rst
-@@ -423,8 +423,8 @@
-         return 'Hello ' + name
- 
- While these annotations are available at runtime through the usual
--:attr:`__annotations__` attribute, *no automatic type checking happens at
--runtime*.  Instead, it is assumed that a separate off-line type checker
-+:attr:`~object.__annotations__` attribute, *no automatic type checking happens
-+at runtime*.  Instead, it is assumed that a separate off-line type checker
- (e.g. `mypy <https://mypy-lang.org>`_) will be used for on-demand
- source code analysis.
- 
---- a/Include/patchlevel.h
-+++ b/Include/patchlevel.h
-@@ -23,7 +23,7 @@
- #define PY_RELEASE_SERIAL       0
- 
- /* Version as a string */
--#define PY_VERSION              "3.12.7"
-+#define PY_VERSION              "3.12.7+"
- /*--end constants--*/
- 
- /* Version as a single 4-byte hex number, e.g. 0x010502B2 == 1.5.2b2.
---- a/Lib/_collections_abc.py
-+++ b/Lib/_collections_abc.py
-@@ -973,7 +973,7 @@
- 
-     def update(self, other=(), /, **kwds):
-         ''' D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.
--            If E present and has a .keys() method, does:     for k in E: D[k] = E[k]
-+            If E present and has a .keys() method, does:     for k in E.keys(): D[k] = E[k]
-             If E present and lacks .keys() method, does:     for (k, v) in E: D[k] = v
-             In either case, this is followed by: for k, v in F.items(): D[k] = v
-         '''
---- a/Lib/_strptime.py
-+++ b/Lib/_strptime.py
-@@ -14,6 +14,7 @@
- import locale
- import calendar
- from re import compile as re_compile
-+from re import sub as re_sub
- from re import IGNORECASE
- from re import escape as re_escape
- from datetime import (date as datetime_date,
-@@ -27,6 +28,18 @@
-     # Figure out what the current language is set to.
-     return locale.getlocale(locale.LC_TIME)
- 
-+def _findall(haystack, needle):
-+    # Find all positions of needle in haystack.
-+    if not needle:
-+        return
-+    i = 0
-+    while True:
-+        i = haystack.find(needle, i)
-+        if i < 0:
-+            break
-+        yield i
-+        i += len(needle)
-+
- class LocaleTime(object):
-     """Stores and handles locale-specific information related to time.
- 
-@@ -101,7 +114,8 @@
-         am_pm = []
-         for hour in (1, 22):
-             time_tuple = time.struct_time((1999,3,17,hour,44,55,2,76,0))
--            am_pm.append(time.strftime("%p", time_tuple).lower())
-+            # br_FR has AM/PM info (' ',' ').
-+            am_pm.append(time.strftime("%p", time_tuple).lower().strip())
-         self.am_pm = am_pm
- 
-     def __calc_date_time(self):
-@@ -113,42 +127,130 @@
-         # values within the format string is very important; it eliminates
-         # possible ambiguity for what something represents.
-         time_tuple = time.struct_time((1999,3,17,22,44,55,2,76,0))
--        date_time = [None, None, None]
--        date_time[0] = time.strftime("%c", time_tuple).lower()
--        date_time[1] = time.strftime("%x", time_tuple).lower()
--        date_time[2] = time.strftime("%X", time_tuple).lower()
--        replacement_pairs = [('%', '%%'), (self.f_weekday[2], '%A'),
--                    (self.f_month[3], '%B'), (self.a_weekday[2], '%a'),
--                    (self.a_month[3], '%b'), (self.am_pm[1], '%p'),
--                    ('1999', '%Y'), ('99', '%y'), ('22', '%H'),
--                    ('44', '%M'), ('55', '%S'), ('76', '%j'),
--                    ('17', '%d'), ('03', '%m'), ('3', '%m'),
--                    # '3' needed for when no leading zero.
--                    ('2', '%w'), ('10', '%I')]
--        replacement_pairs.extend([(tz, "%Z") for tz_values in self.timezone
--                                                for tz in tz_values])
--        for offset,directive in ((0,'%c'), (1,'%x'), (2,'%X')):
--            current_format = date_time[offset]
--            for old, new in replacement_pairs:
-+        time_tuple2 = time.struct_time((1999,1,3,1,1,1,6,3,0))
-+        replacement_pairs = [
-+            ('1999', '%Y'), ('99', '%y'), ('22', '%H'),
-+            ('44', '%M'), ('55', '%S'), ('76', '%j'),
-+            ('17', '%d'), ('03', '%m'), ('3', '%m'),
-+            # '3' needed for when no leading zero.
-+            ('2', '%w'), ('10', '%I'),
-+            # Non-ASCII digits
-+            ('\u0661\u0669\u0669\u0669', '%Y'),
-+            ('\u0669\u0669', '%Oy'),
-+            ('\u0662\u0662', '%OH'),
-+            ('\u0664\u0664', '%OM'),
-+            ('\u0665\u0665', '%OS'),
-+            ('\u0661\u0667', '%Od'),
-+            ('\u0660\u0663', '%Om'),
-+            ('\u0663', '%Om'),
-+            ('\u0662', '%Ow'),
-+            ('\u0661\u0660', '%OI'),
-+        ]
-+        date_time = []
-+        for directive in ('%c', '%x', '%X'):
-+            current_format = time.strftime(directive, time_tuple).lower()
-+            current_format = current_format.replace('%', '%%')
-+            # The month and the day of the week formats are treated specially
-+            # because of a possible ambiguity in some locales where the full
-+            # and abbreviated names are equal or names of different types
-+            # are equal. See doc of __find_month_format for more details.
-+            lst, fmt = self.__find_weekday_format(directive)
-+            if lst:
-+                current_format = current_format.replace(lst[2], fmt, 1)
-+            lst, fmt = self.__find_month_format(directive)
-+            if lst:
-+                current_format = current_format.replace(lst[3], fmt, 1)
-+            if self.am_pm[1]:
-                 # Must deal with possible lack of locale info
-                 # manifesting itself as the empty string (e.g., Swedish's
-                 # lack of AM/PM info) or a platform returning a tuple of empty
-                 # strings (e.g., MacOS 9 having timezone as ('','')).
--                if old:
--                    current_format = current_format.replace(old, new)
-+                current_format = current_format.replace(self.am_pm[1], '%p')
-+            for tz_values in self.timezone:
-+                for tz in tz_values:
-+                    if tz:
-+                        current_format = current_format.replace(tz, "%Z")
-+            # Transform all non-ASCII digits to digits in range U+0660 to U+0669.
-+            current_format = re_sub(r'\d(?<![0-9])',
-+                                    lambda m: chr(0x0660 + int(m[0])),
-+                                    current_format)
-+            for old, new in replacement_pairs:
-+                current_format = current_format.replace(old, new)
-             # If %W is used, then Sunday, 2005-01-03 will fall on week 0 since
-             # 2005-01-03 occurs before the first Monday of the year.  Otherwise
-             # %U is used.
--            time_tuple = time.struct_time((1999,1,3,1,1,1,6,3,0))
--            if '00' in time.strftime(directive, time_tuple):
-+            if '00' in time.strftime(directive, time_tuple2):
-                 U_W = '%W'
-             else:
-                 U_W = '%U'
--            date_time[offset] = current_format.replace('11', U_W)
-+            current_format = current_format.replace('11', U_W)
-+            date_time.append(current_format)
-         self.LC_date_time = date_time[0]
-         self.LC_date = date_time[1]
-         self.LC_time = date_time[2]
- 
-+    def __find_month_format(self, directive):
-+        """Find the month format appropriate for the current locale.
-+
-+        In some locales (for example French and Hebrew), the default month
-+        used in __calc_date_time has the same name in full and abbreviated
-+        form.  Also, the month name can by accident match other part of the
-+        representation: the day of the week name (for example in Morisyen)
-+        or the month number (for example in Japanese).  Thus, cycle months
-+        of the year and find all positions that match the month name for
-+        each month,  If no common positions are found, the representation
-+        does not use the month name.
-+        """
-+        full_indices = abbr_indices = None
-+        for m in range(1, 13):
-+            time_tuple = time.struct_time((1999, m, 17, 22, 44, 55, 2, 76, 0))
-+            datetime = time.strftime(directive, time_tuple).lower()
-+            indices = set(_findall(datetime, self.f_month[m]))
-+            if full_indices is None:
-+                full_indices = indices
-+            else:
-+                full_indices &= indices
-+            indices = set(_findall(datetime, self.a_month[m]))
-+            if abbr_indices is None:
-+                abbr_indices = indices
-+            else:
-+                abbr_indices &= indices
-+            if not full_indices and not abbr_indices:
-+                return None, None
-+        if full_indices:
-+            return self.f_month, '%B'
-+        if abbr_indices:
-+            return self.a_month, '%b'
-+        return None, None
-+
-+    def __find_weekday_format(self, directive):
-+        """Find the day of the week format appropriate for the current locale.
-+
-+        Similar to __find_month_format().
-+        """
-+        full_indices = abbr_indices = None
-+        for wd in range(7):
-+            time_tuple = time.struct_time((1999, 3, 17, 22, 44, 55, wd, 76, 0))
-+            datetime = time.strftime(directive, time_tuple).lower()
-+            indices = set(_findall(datetime, self.f_weekday[wd]))
-+            if full_indices is None:
-+                full_indices = indices
-+            else:
-+                full_indices &= indices
-+            if self.f_weekday[wd] != self.a_weekday[wd]:
-+                indices = set(_findall(datetime, self.a_weekday[wd]))
-+            if abbr_indices is None:
-+                abbr_indices = indices
-+            else:
-+                abbr_indices &= indices
-+            if not full_indices and not abbr_indices:
-+                return None, None
-+        if full_indices:
-+            return self.f_weekday, '%A'
-+        if abbr_indices:
-+            return self.a_weekday, '%a'
-+        return None, None
-+
-     def __calc_timezone(self):
-         # Set self.timezone by using time.tzname.
-         # Do not worry about possibility of time.tzname[0] == time.tzname[1]
-@@ -181,12 +283,12 @@
-         else:
-             self.locale_time = LocaleTime()
-         base = super()
--        base.__init__({
-+        mapping = {
-             # The " [1-9]" part of the regex is to make %c from ANSI C work
-             'd': r"(?P<d>3[0-1]|[1-2]\d|0[1-9]|[1-9]| [1-9])",
-             'f': r"(?P<f>[0-9]{1,6})",
-             'H': r"(?P<H>2[0-3]|[0-1]\d|\d)",
--            'I': r"(?P<I>1[0-2]|0[1-9]|[1-9])",
-+            'I': r"(?P<I>1[0-2]|0[1-9]|[1-9]| [1-9])",
-             'G': r"(?P<G>\d\d\d\d)",
-             'j': r"(?P<j>36[0-6]|3[0-5]\d|[1-2]\d\d|0[1-9]\d|00[1-9]|[1-9]\d|0[1-9]|[1-9])",
-             'm': r"(?P<m>1[0-2]|0[1-9]|[1-9])",
-@@ -210,11 +312,15 @@
-             'Z': self.__seqToRE((tz for tz_names in self.locale_time.timezone
-                                         for tz in tz_names),
-                                 'Z'),
--            '%': '%'})
--        base.__setitem__('W', base.__getitem__('U').replace('U', 'W'))
--        base.__setitem__('c', self.pattern(self.locale_time.LC_date_time))
--        base.__setitem__('x', self.pattern(self.locale_time.LC_date))
-+            '%': '%'}
-+        for d in 'dmyHIMS':
-+            mapping['O' + d] = r'(?P<%s>\d\d|\d| \d)' % d
-+        mapping['Ow'] = r'(?P<w>\d)'
-+        mapping['W'] = mapping['U'].replace('U', 'W')
-+        base.__init__(mapping)
-         base.__setitem__('X', self.pattern(self.locale_time.LC_time))
-+        base.__setitem__('x', self.pattern(self.locale_time.LC_date))
-+        base.__setitem__('c', self.pattern(self.locale_time.LC_date_time))
- 
-     def __seqToRE(self, to_convert, directive):
-         """Convert a list to a regex string for matching a directive.
-@@ -242,21 +348,16 @@
-         regex syntax are escaped.
- 
-         """
--        processed_format = ''
-         # The sub() call escapes all characters that might be misconstrued
-         # as regex syntax.  Cannot use re.escape since we have to deal with
-         # format directives (%m, etc.).
--        regex_chars = re_compile(r"([\\.^$*+?\(\){}\[\]|])")
--        format = regex_chars.sub(r"\\\1", format)
--        whitespace_replacement = re_compile(r'\s+')
--        format = whitespace_replacement.sub(r'\\s+', format)
--        while '%' in format:
--            directive_index = format.index('%')+1
--            processed_format = "%s%s%s" % (processed_format,
--                                           format[:directive_index-1],
--                                           self[format[directive_index]])
--            format = format[directive_index+1:]
--        return "%s%s" % (processed_format, format)
-+        format = re_sub(r"([\\.^$*+?\(\){}\[\]|])", r"\\\1", format)
-+        format = re_sub(r'\s+', r'\\s+', format)
-+        format = re_sub(r"'", "['\u02bc]", format)  # needed for br_FR
-+        def repl(m):
-+            return self[m[1]]
-+        format = re_sub(r'%(O?.)', repl, format)
-+        return format
- 
-     def compile(self, format):
-         """Return a compiled re object for the format string."""
---- a/Lib/argparse.py
-+++ b/Lib/argparse.py
-@@ -564,8 +564,7 @@
-     def _format_action_invocation(self, action):
-         if not action.option_strings:
-             default = self._get_default_metavar_for_positional(action)
--            metavar, = self._metavar_formatter(action, default)(1)
--            return metavar
-+            return ' '.join(self._metavar_formatter(action, default)(1))
- 
-         else:
-             parts = []
-@@ -589,8 +588,7 @@
-         if action.metavar is not None:
-             result = action.metavar
-         elif action.choices is not None:
--            choice_strs = [str(choice) for choice in action.choices]
--            result = '{%s}' % ','.join(choice_strs)
-+            result = '{%s}' % ','.join(map(str, action.choices))
-         else:
-             result = default_metavar
- 
-@@ -638,8 +636,7 @@
-             if hasattr(params[name], '__name__'):
-                 params[name] = params[name].__name__
-         if params.get('choices') is not None:
--            choices_str = ', '.join([str(c) for c in params['choices']])
--            params['choices'] = choices_str
-+            params['choices'] = ', '.join(map(str, params['choices']))
-         return self._get_help_string(action) % params
- 
-     def _iter_indented_subactions(self, action):
-@@ -752,11 +749,19 @@
-     elif argument.option_strings:
-         return '/'.join(argument.option_strings)
-     elif argument.metavar not in (None, SUPPRESS):
--        return argument.metavar
-+        metavar = argument.metavar
-+        if not isinstance(metavar, tuple):
-+            return metavar
-+        if argument.nargs == ZERO_OR_MORE and len(metavar) == 2:
-+            return '%s[, %s]' % metavar
-+        elif argument.nargs == ONE_OR_MORE:
-+            return '%s[, %s]' % metavar
-+        else:
-+            return ', '.join(metavar)
-     elif argument.dest not in (None, SUPPRESS):
-         return argument.dest
-     elif argument.choices:
--        return '{' + ','.join(argument.choices) + '}'
-+        return '{%s}' % ','.join(map(str, argument.choices))
-     else:
-         return None
- 
-@@ -1557,7 +1562,11 @@
-         # NOTE: if add_mutually_exclusive_group ever gains title= and
-         # description= then this code will need to be expanded as above
-         for group in container._mutually_exclusive_groups:
--            mutex_group = self.add_mutually_exclusive_group(
-+            if group._container is container:
-+                cont = self
-+            else:
-+                cont = title_group_map[group._container.title]
-+            mutex_group = cont.add_mutually_exclusive_group(
-                 required=group.required)
- 
-             # map the actions to their new mutex group
-@@ -1902,6 +1911,9 @@
-         return args
- 
-     def parse_known_args(self, args=None, namespace=None):
-+        return self._parse_known_args2(args, namespace, intermixed=False)
-+
-+    def _parse_known_args2(self, args, namespace, intermixed):
-         if args is None:
-             # args default to the system args
-             args = _sys.argv[1:]
-@@ -1928,18 +1940,18 @@
-         # parse the arguments and exit if there are any errors
-         if self.exit_on_error:
-             try:
--                namespace, args = self._parse_known_args(args, namespace)
-+                namespace, args = self._parse_known_args(args, namespace, intermixed)
-             except ArgumentError as err:
-                 self.error(str(err))
-         else:
--            namespace, args = self._parse_known_args(args, namespace)
-+            namespace, args = self._parse_known_args(args, namespace, intermixed)
- 
-         if hasattr(namespace, _UNRECOGNIZED_ARGS_ATTR):
-             args.extend(getattr(namespace, _UNRECOGNIZED_ARGS_ATTR))
-             delattr(namespace, _UNRECOGNIZED_ARGS_ATTR)
-         return namespace, args
- 
--    def _parse_known_args(self, arg_strings, namespace):
-+    def _parse_known_args(self, arg_strings, namespace, intermixed):
-         # replace arg strings that are file references
-         if self.fromfile_prefix_chars is not None:
-             arg_strings = self._read_args_from_files(arg_strings)
-@@ -2014,7 +2026,7 @@
-             if len(option_tuples) > 1:
-                 options = ', '.join([option_string
-                     for action, option_string, sep, explicit_arg in option_tuples])
--                args = {'option': arg_string, 'matches': options}
-+                args = {'option': arg_strings[start_index], 'matches': options}
-                 msg = _('ambiguous option: %(option)s could match %(matches)s')
-                 raise ArgumentError(None, msg % args)
- 
-@@ -2029,6 +2041,7 @@
-                 # if we found no optional action, skip it
-                 if action is None:
-                     extras.append(arg_strings[start_index])
-+                    extras_pattern.append('O')
-                     return start_index + 1
- 
-                 # if there is an explicit argument, try to match the
-@@ -2064,6 +2077,7 @@
-                                 sep = ''
-                         else:
-                             extras.append(char + explicit_arg)
-+                            extras_pattern.append('O')
-                             stop = start_index + 1
-                             break
-                     # if the action expect exactly one argument, we've
-@@ -2134,6 +2148,7 @@
-         # consume Positionals and Optionals alternately, until we have
-         # passed the last option string
-         extras = []
-+        extras_pattern = []
-         start_index = 0
-         if option_string_indices:
-             max_option_string_index = max(option_string_indices)
-@@ -2146,7 +2161,7 @@
-                 index
-                 for index in option_string_indices
-                 if index >= start_index])
--            if start_index != next_option_string_index:
-+            if not intermixed and start_index != next_option_string_index:
-                 positionals_end_index = consume_positionals(start_index)
- 
-                 # only try to parse the next optional if we didn't consume
-@@ -2162,16 +2177,35 @@
-             if start_index not in option_string_indices:
-                 strings = arg_strings[start_index:next_option_string_index]
-                 extras.extend(strings)
-+                extras_pattern.extend(arg_strings_pattern[start_index:next_option_string_index])
-                 start_index = next_option_string_index
- 
-             # consume the next optional and any arguments for it
-             start_index = consume_optional(start_index)
- 
--        # consume any positionals following the last Optional
--        stop_index = consume_positionals(start_index)
-+        if not intermixed:
-+            # consume any positionals following the last Optional
-+            stop_index = consume_positionals(start_index)
- 
--        # if we didn't consume all the argument strings, there were extras
--        extras.extend(arg_strings[stop_index:])
-+            # if we didn't consume all the argument strings, there were extras
-+            extras.extend(arg_strings[stop_index:])
-+        else:
-+            extras.extend(arg_strings[start_index:])
-+            extras_pattern.extend(arg_strings_pattern[start_index:])
-+            extras_pattern = ''.join(extras_pattern)
-+            assert len(extras_pattern) == len(extras)
-+            # consume all positionals
-+            arg_strings = [s for s, c in zip(extras, extras_pattern) if c != 'O']
-+            arg_strings_pattern = extras_pattern.replace('O', '')
-+            stop_index = consume_positionals(0)
-+            # leave unknown optionals and non-consumed positionals in extras
-+            for i, c in enumerate(extras_pattern):
-+                if not stop_index:
-+                    break
-+                if c != 'O':
-+                    stop_index -= 1
-+                    extras[i] = None
-+            extras = [s for s in extras if s is not None]
- 
-         # make sure all required actions were present and also convert
-         # action defaults which were not given as arguments
-@@ -2437,10 +2471,6 @@
-         # are then parsed.  If the parser definition is incompatible with the
-         # intermixed assumptions (e.g. use of REMAINDER, subparsers) a
-         # TypeError is raised.
--        #
--        # positionals are 'deactivated' by setting nargs and default to
--        # SUPPRESS.  This blocks the addition of that positional to the
--        # namespace
- 
-         positionals = self._get_positional_actions()
-         a = [action for action in positionals
-@@ -2449,59 +2479,7 @@
-             raise TypeError('parse_intermixed_args: positional arg'
-                             ' with nargs=%s'%a[0].nargs)
- 
--        if [action.dest for group in self._mutually_exclusive_groups
--            for action in group._group_actions if action in positionals]:
--            raise TypeError('parse_intermixed_args: positional in'
--                            ' mutuallyExclusiveGroup')
--
--        try:
--            save_usage = self.usage
--            try:
--                if self.usage is None:
--                    # capture the full usage for use in error messages
--                    self.usage = self.format_usage()[7:]
--                for action in positionals:
--                    # deactivate positionals
--                    action.save_nargs = action.nargs
--                    # action.nargs = 0
--                    action.nargs = SUPPRESS
--                    action.save_default = action.default
--                    action.default = SUPPRESS
--                namespace, remaining_args = self.parse_known_args(args,
--                                                                  namespace)
--                for action in positionals:
--                    # remove the empty positional values from namespace
--                    if (hasattr(namespace, action.dest)
--                            and getattr(namespace, action.dest)==[]):
--                        from warnings import warn
--                        warn('Do not expect %s in %s' % (action.dest, namespace))
--                        delattr(namespace, action.dest)
--            finally:
--                # restore nargs and usage before exiting
--                for action in positionals:
--                    action.nargs = action.save_nargs
--                    action.default = action.save_default
--            optionals = self._get_optional_actions()
--            try:
--                # parse positionals.  optionals aren't normally required, but
--                # they could be, so make sure they aren't.
--                for action in optionals:
--                    action.save_required = action.required
--                    action.required = False
--                for group in self._mutually_exclusive_groups:
--                    group.save_required = group.required
--                    group.required = False
--                namespace, extras = self.parse_known_args(remaining_args,
--                                                          namespace)
--            finally:
--                # restore parser values before exiting
--                for action in optionals:
--                    action.required = action.save_required
--                for group in self._mutually_exclusive_groups:
--                    group.required = group.save_required
--        finally:
--            self.usage = save_usage
--        return namespace, extras
-+        return self._parse_known_args2(args, namespace, intermixed=True)
- 
-     # ========================
-     # Value conversion methods
-@@ -2589,8 +2567,8 @@
-             if isinstance(choices, str):
-                 choices = iter(choices)
-             if value not in choices:
--                args = {'value': value,
--                        'choices': ', '.join(map(repr, action.choices))}
-+                args = {'value': str(value),
-+                        'choices': ', '.join(map(str, action.choices))}
-                 msg = _('invalid choice: %(value)r (choose from %(choices)s)')
-                 raise ArgumentError(action, msg % args)
- 
---- a/Lib/asyncio/__main__.py
-+++ b/Lib/asyncio/__main__.py
-@@ -2,6 +2,7 @@
- import asyncio
- import code
- import concurrent.futures
-+import contextvars
- import inspect
- import sys
- import threading
-@@ -17,6 +18,7 @@
-         super().__init__(locals)
-         self.compile.compiler.flags |= ast.PyCF_ALLOW_TOP_LEVEL_AWAIT
-         self.loop = loop
-+        self.context = contextvars.copy_context()
- 
-     def runcode(self, code):
-         future = concurrent.futures.Future()
-@@ -46,12 +48,12 @@
-                 return
- 
-             try:
--                repl_future = self.loop.create_task(coro)
-+                repl_future = self.loop.create_task(coro, context=self.context)
-                 futures._chain_future(repl_future, future)
-             except BaseException as exc:
-                 future.set_exception(exc)
- 
--        loop.call_soon_threadsafe(callback)
-+        loop.call_soon_threadsafe(callback, context=self.context)
- 
-         try:
-             return future.result()
---- a/Lib/asyncio/base_events.py
-+++ b/Lib/asyncio/base_events.py
-@@ -17,7 +17,6 @@
- import collections.abc
- import concurrent.futures
- import errno
--import functools
- import heapq
- import itertools
- import os
-@@ -1106,11 +1105,18 @@
-                     except OSError:
-                         continue
-             else:  # using happy eyeballs
--                sock, _, _ = await staggered.staggered_race(
--                    (functools.partial(self._connect_sock,
--                                       exceptions, addrinfo, laddr_infos)
--                     for addrinfo in infos),
--                    happy_eyeballs_delay, loop=self)
-+                sock = (await staggered.staggered_race(
-+                    (
-+                        # can't use functools.partial as it keeps a reference
-+                        # to exceptions
-+                        lambda addrinfo=addrinfo: self._connect_sock(
-+                            exceptions, addrinfo, laddr_infos
-+                        )
-+                        for addrinfo in infos
-+                    ),
-+                    happy_eyeballs_delay,
-+                    loop=self,
-+                ))[0]  # can't use sock, _, _ as it keeks a reference to exceptions
- 
-             if sock is None:
-                 exceptions = [exc for sub in exceptions for exc in sub]
---- a/Lib/asyncio/futures.py
-+++ b/Lib/asyncio/futures.py
-@@ -194,8 +194,7 @@
-         the future is done and has an exception set, this exception is raised.
-         """
-         if self._state == _CANCELLED:
--            exc = self._make_cancelled_error()
--            raise exc
-+            raise self._make_cancelled_error()
-         if self._state != _FINISHED:
-             raise exceptions.InvalidStateError('Result is not ready.')
-         self.__log_traceback = False
-@@ -212,8 +211,7 @@
-         InvalidStateError.
-         """
-         if self._state == _CANCELLED:
--            exc = self._make_cancelled_error()
--            raise exc
-+            raise self._make_cancelled_error()
-         if self._state != _FINISHED:
-             raise exceptions.InvalidStateError('Exception is not set.')
-         self.__log_traceback = False
---- a/Lib/asyncio/sslproto.py
-+++ b/Lib/asyncio/sslproto.py
-@@ -101,7 +101,7 @@
-         return self._ssl_protocol._app_protocol
- 
-     def is_closing(self):
--        return self._closed
-+        return self._closed or self._ssl_protocol._is_transport_closing()
- 
-     def close(self):
-         """Close the transport.
-@@ -379,6 +379,9 @@
-             self._app_transport_created = True
-         return self._app_transport
- 
-+    def _is_transport_closing(self):
-+        return self._transport is not None and self._transport.is_closing()
-+
-     def connection_made(self, transport):
-         """Called when the low-level connection is made.
- 
---- a/Lib/asyncio/staggered.py
-+++ b/Lib/asyncio/staggered.py
-@@ -69,7 +69,11 @@
-     exceptions = []
-     running_tasks = []
- 
--    async def run_one_coro(previous_failed) -> None:
-+    async def run_one_coro(ok_to_start, previous_failed) -> None:
-+        # in eager tasks this waits for the calling task to append this task
-+        # to running_tasks, in regular tasks this wait is a no-op that does
-+        # not yield a future. See gh-124309.
-+        await ok_to_start.wait()
-         # Wait for the previous task to finish, or for delay seconds
-         if previous_failed is not None:
-             with contextlib.suppress(exceptions_mod.TimeoutError):
-@@ -85,8 +89,12 @@
-             return
-         # Start task that will run the next coroutine
-         this_failed = locks.Event()
--        next_task = loop.create_task(run_one_coro(this_failed))
-+        next_ok_to_start = locks.Event()
-+        next_task = loop.create_task(run_one_coro(next_ok_to_start, this_failed))
-         running_tasks.append(next_task)
-+        # next_task has been appended to running_tasks so next_task is ok to
-+        # start.
-+        next_ok_to_start.set()
-         assert len(running_tasks) == this_index + 2
-         # Prepare place to put this coroutine's exceptions if not won
-         exceptions.append(None)
-@@ -116,8 +124,11 @@
-                 if i != this_index:
-                     t.cancel()
- 
--    first_task = loop.create_task(run_one_coro(None))
-+    ok_to_start = locks.Event()
-+    first_task = loop.create_task(run_one_coro(ok_to_start, None))
-     running_tasks.append(first_task)
-+    # first_task has been appended to running_tasks so first_task is ok to start.
-+    ok_to_start.set()
-     try:
-         # Wait for a growing list of tasks to all finish: poor man's version of
-         # curio's TaskGroup or trio's nursery
-@@ -133,6 +144,7 @@
-                         raise d.exception()
-         return winner_result, winner_index, exceptions
-     finally:
-+        del exceptions
-         # Make sure no tasks are left running if we leave this function
-         for t in running_tasks:
-             t.cancel()
---- a/Lib/asyncio/taskgroups.py
-+++ b/Lib/asyncio/taskgroups.py
-@@ -66,6 +66,20 @@
-         return self
- 
-     async def __aexit__(self, et, exc, tb):
-+        tb = None
-+        try:
-+            return await self._aexit(et, exc)
-+        finally:
-+            # Exceptions are heavy objects that can have object
-+            # cycles (bad for GC); let's not keep a reference to
-+            # a bunch of them. It would be nicer to use a try/finally
-+            # in __aexit__ directly but that introduced some diff noise
-+            self._parent_task = None
-+            self._errors = None
-+            self._base_error = None
-+            exc = None
-+
-+    async def _aexit(self, et, exc):
-         self._exiting = True
- 
-         if (exc is not None and
-@@ -126,25 +140,34 @@
-         assert not self._tasks
- 
-         if self._base_error is not None:
--            raise self._base_error
-+            try:
-+                raise self._base_error
-+            finally:
-+                exc = None
- 
-         # Propagate CancelledError if there is one, except if there
-         # are other errors -- those have priority.
--        if propagate_cancellation_error and not self._errors:
--            raise propagate_cancellation_error
-+        try:
-+            if propagate_cancellation_error and not self._errors:
-+                try:
-+                    raise propagate_cancellation_error
-+                finally:
-+                    exc = None
-+        finally:
-+            propagate_cancellation_error = None
- 
-         if et is not None and et is not exceptions.CancelledError:
-             self._errors.append(exc)
- 
-         if self._errors:
--            # Exceptions are heavy objects that can have object
--            # cycles (bad for GC); let's not keep a reference to
--            # a bunch of them.
-             try:
--                me = BaseExceptionGroup('unhandled errors in a TaskGroup', self._errors)
--                raise me from None
-+                raise BaseExceptionGroup(
-+                    'unhandled errors in a TaskGroup',
-+                    self._errors,
-+                ) from None
-             finally:
--                self._errors = None
-+                exc = None
-+
- 
-     def create_task(self, coro, *, name=None, context=None):
-         """Create a new task in this group and return it.
---- a/Lib/bdb.py
-+++ b/Lib/bdb.py
-@@ -295,9 +295,10 @@
-         # Issue #13183: pdb skips frames after hitting a breakpoint and running
-         # step commands.
-         # Restore the trace function in the caller (that may not have been set
--        # for performance reasons) when returning from the current frame.
-+        # for performance reasons) when returning from the current frame, unless
-+        # the caller is the botframe.
-         caller_frame = current_frame.f_back
--        if caller_frame and not caller_frame.f_trace:
-+        if caller_frame and not caller_frame.f_trace and caller_frame is not self.botframe:
-             caller_frame.f_trace = self.trace_dispatch
- 
-     # Derived classes and clients can call the following methods
---- a/Lib/concurrent/futures/process.py
-+++ b/Lib/concurrent/futures/process.py
-@@ -68,27 +68,31 @@
- class _ThreadWakeup:
-     def __init__(self):
-         self._closed = False
-+        self._lock = threading.Lock()
-         self._reader, self._writer = mp.Pipe(duplex=False)
- 
-     def close(self):
--        # Please note that we do not take the shutdown lock when
-+        # Please note that we do not take the self._lock when
-         # calling clear() (to avoid deadlocking) so this method can
-         # only be called safely from the same thread as all calls to
--        # clear() even if you hold the shutdown lock. Otherwise we
-+        # clear() even if you hold the lock. Otherwise we
-         # might try to read from the closed pipe.
--        if not self._closed:
--            self._closed = True
--            self._writer.close()
--            self._reader.close()
-+        with self._lock:
-+            if not self._closed:
-+                self._closed = True
-+                self._writer.close()
-+                self._reader.close()
- 
-     def wakeup(self):
--        if not self._closed:
--            self._writer.send_bytes(b"")
-+        with self._lock:
-+            if not self._closed:
-+                self._writer.send_bytes(b"")
- 
-     def clear(self):
--        if not self._closed:
--            while self._reader.poll():
--                self._reader.recv_bytes()
-+        if self._closed:
-+            raise RuntimeError('operation on closed _ThreadWakeup')
-+        while self._reader.poll():
-+            self._reader.recv_bytes()
- 
- 
- def _python_exit():
-@@ -167,10 +171,8 @@
- 
- class _SafeQueue(Queue):
-     """Safe Queue set exception to the future object linked to a job"""
--    def __init__(self, max_size=0, *, ctx, pending_work_items, shutdown_lock,
--                 thread_wakeup):
-+    def __init__(self, max_size=0, *, ctx, pending_work_items, thread_wakeup):
-         self.pending_work_items = pending_work_items
--        self.shutdown_lock = shutdown_lock
-         self.thread_wakeup = thread_wakeup
-         super().__init__(max_size, ctx=ctx)
- 
-@@ -179,8 +181,7 @@
-             tb = format_exception(type(e), e, e.__traceback__)
-             e.__cause__ = _RemoteTraceback('\n"""\n{}"""'.format(''.join(tb)))
-             work_item = self.pending_work_items.pop(obj.work_id, None)
--            with self.shutdown_lock:
--                self.thread_wakeup.wakeup()
-+            self.thread_wakeup.wakeup()
-             # work_item can be None if another process terminated. In this
-             # case, the executor_manager_thread fails all work_items
-             # with BrokenProcessPool
-@@ -305,12 +306,10 @@
-         # will wake up the queue management thread so that it can terminate
-         # if there is no pending work item.
-         def weakref_cb(_,
--                       thread_wakeup=self.thread_wakeup,
--                       shutdown_lock=self.shutdown_lock):
-+                       thread_wakeup=self.thread_wakeup):
-             mp.util.debug('Executor collected: triggering callback for'
-                           ' QueueManager wakeup')
--            with shutdown_lock:
--                thread_wakeup.wakeup()
-+            thread_wakeup.wakeup()
- 
-         self.executor_reference = weakref.ref(executor, weakref_cb)
- 
-@@ -438,11 +437,6 @@
-         elif wakeup_reader in ready:
-             is_broken = False
- 
--        # No need to hold the _shutdown_lock here because:
--        # 1. we're the only thread to use the wakeup reader
--        # 2. we're also the only thread to call thread_wakeup.close()
--        # 3. we want to avoid a possible deadlock when both reader and writer
--        #    would block (gh-105829)
-         self.thread_wakeup.clear()
- 
-         return result_item, is_broken, cause
-@@ -740,10 +734,9 @@
-         # as it could result in a deadlock if a worker process dies with the
-         # _result_queue write lock still acquired.
-         #
--        # _shutdown_lock must be locked to access _ThreadWakeup.close() and
--        # .wakeup(). Care must also be taken to not call clear or close from
--        # more than one thread since _ThreadWakeup.clear() is not protected by
--        # the _shutdown_lock
-+        # Care must be taken to only call clear and close from the
-+        # executor_manager_thread, since _ThreadWakeup.clear() is not protected
-+        # by a lock.
-         self._executor_manager_thread_wakeup = _ThreadWakeup()
- 
-         # Create communication channels for the executor
-@@ -754,7 +747,6 @@
-         self._call_queue = _SafeQueue(
-             max_size=queue_size, ctx=self._mp_context,
-             pending_work_items=self._pending_work_items,
--            shutdown_lock=self._shutdown_lock,
-             thread_wakeup=self._executor_manager_thread_wakeup)
-         # Killed worker processes can produce spurious "broken pipe"
-         # tracebacks in the queue's own worker thread. But we detect killed
---- a/Lib/enum.py
-+++ b/Lib/enum.py
-@@ -592,19 +592,13 @@
-         classdict['_all_bits_'] = 0
-         classdict['_inverted_'] = None
-         try:
--            exc = None
-             enum_class = super().__new__(metacls, cls, bases, classdict, **kwds)
-         except Exception as e:
--            # since 3.12 the line "Error calling __set_name__ on '_proto_member' instance ..."
--            # is tacked on to the error instead of raising a RuntimeError
--            # recreate the exception to discard
--            exc = type(e)(str(e))
--            exc.__cause__ = e.__cause__
--            exc.__context__ = e.__context__
--            tb = e.__traceback__
--        if exc is not None:
--            raise exc.with_traceback(tb)
--        #
-+            # since 3.12 the note "Error calling __set_name__ on '_proto_member' instance ..."
-+            # is tacked on to the error instead of raising a RuntimeError, so discard it
-+            if hasattr(e, '__notes__'):
-+                del e.__notes__
-+            raise
-         # update classdict with any changes made by __init_subclass__
-         classdict.update(enum_class.__dict__)
-         #
---- a/Lib/functools.py
-+++ b/Lib/functools.py
-@@ -238,12 +238,14 @@
-     """
-     reduce(function, iterable[, initial]) -> value
- 
--    Apply a function of two arguments cumulatively to the items of a sequence
--    or iterable, from left to right, so as to reduce the iterable to a single
--    value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
--    ((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
--    of the iterable in the calculation, and serves as a default when the
--    iterable is empty.
-+    Apply a function of two arguments cumulatively to the items of an iterable, from left to right.
-+
-+    This effectively reduces the iterable to a single value.  If initial is present,
-+    it is placed before the items of the iterable in the calculation, and serves as
-+    a default when the iterable is empty.
-+
-+    For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])
-+    calculates ((((1 + 2) + 3) + 4) + 5).
-     """
- 
-     it = iter(sequence)
---- a/Lib/idlelib/help.html
-+++ b/Lib/idlelib/help.html
-@@ -5,7 +5,7 @@
-     <meta charset="utf-8" />
-     <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="viewport" content="width=device-width, initial-scale=1" />
- 
--    <title>IDLE &#8212; Python 3.13.0a2 documentation</title><meta name="viewport" content="width=device-width, initial-scale=1.0">
-+    <title>IDLE &#8212; Python 3.14.0a0 documentation</title><meta name="viewport" content="width=device-width, initial-scale=1.0">
- 
-     <link rel="stylesheet" type="text/css" href="../_static/pygments.css" />
-     <link rel="stylesheet" type="text/css" href="../_static/pydoctheme.css?digest=b37c26da2f7529d09fe70b41c4b2133fe4931a90" />
-@@ -18,7 +18,7 @@
-     <script src="../_static/sidebar.js"></script>
- 
-     <link rel="search" type="application/opensearchdescription+xml"
--          title="Search within Python 3.13.0a2 documentation"
-+          title="Search within Python 3.14.0a0 documentation"
-           href="../_static/opensearch.xml"/>
-     <link rel="author" title="About these documents" href="../about.html" />
-     <link rel="index" title="Index" href="../genindex.html" />
-@@ -26,6 +26,7 @@
-     <link rel="copyright" title="Copyright" href="../copyright.html" />
-     <link rel="next" title="Development Tools" href="development.html" />
-     <link rel="prev" title="tkinter.ttk — Tk themed widgets" href="tkinter.ttk.html" />
-+
-     <link rel="canonical" href="https://docs.python.org/3/library/idle.html" />
- 
- 
-@@ -45,6 +46,8 @@
-             <script type="text/javascript" src="../_static/menu.js"></script>
-             <script type="text/javascript" src="../_static/search-focus.js"></script>
-             <script type="text/javascript" src="../_static/themetoggle.js"></script>
-+            <script type="text/javascript" src="../_static/rtd_switcher.js"></script>
-+            <meta name="readthedocs-addons-api-version" content="1">
- 
-   </head>
- <body>
-@@ -184,7 +187,7 @@
- 
-           </li>
-     <li id="cpython-language-and-version">
--      <a href="../index.html">3.13.0a2 Documentation</a> &#187;
-+      <a href="../index.html">3.14.0a0 Documentation</a> &#187;
-     </li>
- 
-           <li class="nav-item nav-item-1"><a href="index.html" >The Python Standard Library</a> &#187;</li>
-@@ -554,7 +557,7 @@
- delete characters.  Deletion does not puts text on the clipboard,
- but IDLE has an undo list.  Wherever this doc discusses keys,
- ‘C’ refers to the <kbd class="kbd docutils literal notranslate">Control</kbd> key on Windows and
--Unix and the <kbd class="kbd docutils literal notranslate">Command</kbd> key on macOS.  (And all such dicussions
-+Unix and the <kbd class="kbd docutils literal notranslate">Command</kbd> key on macOS.  (And all such discussions
- assume that the keys have not been re-bound to something else.)</p>
- <ul class="simple">
- <li><p>Arrow keys move the cursor one character or line.</p></li>
-@@ -562,8 +565,8 @@
- <li><p><kbd class="kbd docutils literal notranslate">Home</kbd> and <kbd class="kbd docutils literal notranslate">End</kbd> go to the beginning or end of the line.</p></li>
- <li><p><kbd class="kbd docutils literal notranslate">Page Up</kbd> and <kbd class="kbd docutils literal notranslate">Page Down</kbd> go up or down one screen.</p></li>
- <li><p><kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">Home</kbd></kbd> and <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">End</kbd></kbd> go to beginning or end of the file.</p></li>
--<li><p><kbd class="kbd docutils literal notranslate">Backspace</kbd> and <kbd class="kbd docutils literal notranslate">Del</kbd> (or <cite>C-d</cite>) delete the previous or
--next character.</p></li>
-+<li><p><kbd class="kbd docutils literal notranslate">Backspace</kbd> and <kbd class="kbd docutils literal notranslate">Del</kbd> (or <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">d</kbd></kbd>) delete the previous
-+or next character.</p></li>
- <li><p><kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">Backspace</kbd></kbd> and <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">Del</kbd></kbd> delete one word left or right.</p></li>
- <li><p><kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">k</kbd></kbd> deletes (‘kills’) everything to the right.</p></li>
- </ul>
-@@ -694,7 +697,7 @@
- <p>The editing features described in previous subsections work when entering
- code interactively.  IDLE’s Shell window also responds to the following:</p>
- <ul class="simple">
--<li><p><kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">c</kbd></kbd> attemps to interrupt statement execution (but may fail).</p></li>
-+<li><p><kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">c</kbd></kbd> attempts to interrupt statement execution (but may fail).</p></li>
- <li><p><kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">d</kbd></kbd> closes Shell if typed at a <code class="docutils literal notranslate"><span class="pre">&gt;&gt;&gt;</span></code> prompt.</p></li>
- <li><p><kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Alt</kbd>-<kbd class="kbd docutils literal notranslate">p</kbd></kbd> and <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">Alt</kbd>-<kbd class="kbd docutils literal notranslate">n</kbd></kbd> (<kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">p</kbd></kbd> and <kbd class="kbd compound docutils literal notranslate"><kbd class="kbd docutils literal notranslate">C</kbd>-<kbd class="kbd docutils literal notranslate">n</kbd></kbd> on macOS)
- retrieve to the current prompt the previous or next previously
-@@ -1136,7 +1139,7 @@
- 
-           </li>
-     <li id="cpython-language-and-version">
--      <a href="../index.html">3.13.0a2 Documentation</a> &#187;
-+      <a href="../index.html">3.14.0a0 Documentation</a> &#187;
-     </li>
- 
-           <li class="nav-item nav-item-1"><a href="index.html" >The Python Standard Library</a> &#187;</li>
-@@ -1180,7 +1183,7 @@
- <br />
-     <br />
- 
--    Last updated on Jan 17, 2024 (06:57 UTC).
-+    Last updated on Oct 14, 2024 (20:27 UTC).
-     <a href="/bugs.html">Found a bug</a>?
-     <br />
- 
---- a/Lib/idlelib/run.py
-+++ b/Lib/idlelib/run.py
-@@ -101,11 +101,11 @@
- 
- # Thread shared globals: Establish a queue between a subthread (which handles
- # the socket) and the main thread (which runs user code), plus global
--# completion, exit and interruptable (the main thread) flags:
-+# completion, exit and interruptible (the main thread) flags:
- 
- exit_now = False
- quitting = False
--interruptable = False
-+interruptible = False
- 
- def main(del_exitfunc=False):
-     """Start the Python execution server in a subprocess
-@@ -575,14 +575,14 @@
-             self.locals = {}
- 
-     def runcode(self, code):
--        global interruptable
-+        global interruptible
-         try:
-             self.user_exc_info = None
--            interruptable = True
-+            interruptible = True
-             try:
-                 exec(code, self.locals)
-             finally:
--                interruptable = False
-+                interruptible = False
-         except SystemExit as e:
-             if e.args:  # SystemExit called with an argument.
-                 ob = e.args[0]
-@@ -608,7 +608,7 @@
-             flush_stdout()
- 
-     def interrupt_the_server(self):
--        if interruptable:
-+        if interruptible:
-             thread.interrupt_main()
- 
-     def start_the_debugger(self, gui_adap_oid):
---- a/Lib/idlelib/tree.py
-+++ b/Lib/idlelib/tree.py
-@@ -83,6 +83,8 @@
- 
- class TreeNode:
- 
-+    dy = 0
-+
-     def __init__(self, canvas, parent, item):
-         self.canvas = canvas
-         self.parent = parent
-@@ -199,23 +201,22 @@
- 
-     def draw(self, x, y):
-         # XXX This hard-codes too many geometry constants!
--        dy = 20
-         self.x, self.y = x, y
-         self.drawicon()
-         self.drawtext()
-         if self.state != 'expanded':
--            return y + dy
-+            return y + TreeNode.dy
-         # draw children
-         if not self.children:
-             sublist = self.item._GetSubList()
-             if not sublist:
-                 # _IsExpandable() was mistaken; that's allowed
--                return y+17
-+                return y + TreeNode.dy
-             for item in sublist:
-                 child = self.__class__(self.canvas, self, item)
-                 self.children.append(child)
-         cx = x+20
--        cy = y + dy
-+        cy = y + TreeNode.dy
-         cylast = 0
-         for child in self.children:
-             cylast = cy
-@@ -289,6 +290,11 @@
-             self.label.bind("<Button-4>", lambda e: wheel_event(e, self.canvas))
-             self.label.bind("<Button-5>", lambda e: wheel_event(e, self.canvas))
-         self.text_id = id
-+        if TreeNode.dy == 0:
-+            # The first row doesn't matter what the dy is, just measure its
-+            # size to get the value of the subsequent dy
-+            coords = self.canvas.bbox(id)
-+            TreeNode.dy = max(20, coords[3] - coords[1] - 3)
- 
-     def select_or_edit(self, event=None):
-         if self.selected and self.item.IsEditable():
---- a/Lib/importlib/__init__.py
-+++ b/Lib/importlib/__init__.py
-@@ -105,7 +105,7 @@
-         try:
-             name = module.__name__
-         except AttributeError:
--            raise TypeError("reload() argument must be a module")
-+            raise TypeError("reload() argument must be a module") from None
- 
-     if sys.modules.get(name) is not module:
-         raise ImportError(f"module {name} not in sys.modules", name=name)
---- a/Lib/json/decoder.py
-+++ b/Lib/json/decoder.py
-@@ -50,17 +50,18 @@
- }
- 
- 
-+HEXDIGITS = re.compile(r'[0-9A-Fa-f]{4}', FLAGS)
- STRINGCHUNK = re.compile(r'(.*?)(["\\\x00-\x1f])', FLAGS)
- BACKSLASH = {
-     '"': '"', '\\': '\\', '/': '/',
-     'b': '\b', 'f': '\f', 'n': '\n', 'r': '\r', 't': '\t',
- }
- 
--def _decode_uXXXX(s, pos):
--    esc = s[pos + 1:pos + 5]
--    if len(esc) == 4 and esc[1] not in 'xX':
-+def _decode_uXXXX(s, pos, _m=HEXDIGITS.match):
-+    esc = _m(s, pos + 1)
-+    if esc is not None:
-         try:
--            return int(esc, 16)
-+            return int(esc.group(), 16)
-         except ValueError:
-             pass
-     msg = "Invalid \\uXXXX escape"
---- a/Lib/json/scanner.py
-+++ b/Lib/json/scanner.py
-@@ -9,7 +9,7 @@
- __all__ = ['make_scanner']
- 
- NUMBER_RE = re.compile(
--    r'(-?(?:0|[1-9]\d*))(\.\d+)?([eE][-+]?\d+)?',
-+    r'(-?(?:0|[1-9][0-9]*))(\.[0-9]+)?([eE][-+]?[0-9]+)?',
-     (re.VERBOSE | re.MULTILINE | re.DOTALL))
- 
- def py_make_scanner(context):
---- a/Lib/logging/config.py
-+++ b/Lib/logging/config.py
-@@ -502,7 +502,7 @@
- 
- def _is_queue_like_object(obj):
-     """Check that *obj* implements the Queue API."""
--    if isinstance(obj, queue.Queue):
-+    if isinstance(obj, (queue.Queue, queue.SimpleQueue)):
-         return True
-     # defer importing multiprocessing as much as possible
-     from multiprocessing.queues import Queue as MPQueue
-@@ -519,13 +519,13 @@
-     # Ideally, we would have wanted to simply use strict type checking
-     # instead of a protocol-based type checking since the latter does
-     # not check the method signatures.
--    queue_interface = [
--        'empty', 'full', 'get', 'get_nowait',
--        'put', 'put_nowait', 'join', 'qsize',
--        'task_done',
--    ]
-+    #
-+    # Note that only 'put_nowait' and 'get' are required by the logging
-+    # queue handler and queue listener (see gh-124653) and that other
-+    # methods are either optional or unused.
-+    minimal_queue_interface = ['put_nowait', 'get']
-     return all(callable(getattr(obj, method, None))
--               for method in queue_interface)
-+               for method in minimal_queue_interface)
- 
- class DictConfigurator(BaseConfigurator):
-     """
---- a/Lib/nturl2path.py
-+++ b/Lib/nturl2path.py
-@@ -55,16 +55,11 @@
-     if p[:4] == '\\\\?\\':
-         p = p[4:]
-         if p[:4].upper() == 'UNC\\':
--            p = '\\' + p[4:]
-+            p = '\\\\' + p[4:]
-         elif p[1:2] != ':':
-             raise OSError('Bad path: ' + p)
-     if not ':' in p:
-         # No drive specifier, just convert slashes and quote the name
--        if p[:2] == '\\\\':
--        # path is something like \\host\path\on\remote\host
--        # convert this to ////host/path/on/remote/host
--        # (notice doubling of slashes at the start of the path)
--            p = '\\\\' + p
-         components = p.split('\\')
-         return urllib.parse.quote('/'.join(components))
-     comp = p.split(':', maxsplit=2)
---- a/Lib/pathlib.py
-+++ b/Lib/pathlib.py
-@@ -359,9 +359,9 @@
-         paths = []
-         for arg in args:
-             if isinstance(arg, PurePath):
--                if arg._flavour is ntpath and self._flavour is posixpath:
-+                if arg._flavour is not self._flavour:
-                     # GH-103631: Convert separators for backwards compatibility.
--                    paths.extend(path.replace('\\', '/') for path in arg._raw_paths)
-+                    paths.append(arg.as_posix())
-                 else:
-                     paths.extend(arg._raw_paths)
-             else:
---- a/Lib/pdb.py
-+++ b/Lib/pdb.py
-@@ -96,7 +96,7 @@
-            "post_mortem", "help"]
- 
- def find_function(funcname, filename):
--    cre = re.compile(r'def\s+%s\s*[(]' % re.escape(funcname))
-+    cre = re.compile(r'def\s+%s(\s*\[.+\])?\s*[(]' % re.escape(funcname))
-     try:
-         fp = tokenize.open(filename)
-     except OSError:
-@@ -321,8 +321,7 @@
-     def user_line(self, frame):
-         """This function is called when we stop or break at this line."""
-         if self._wait_for_mainpyfile:
--            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)
--                or frame.f_lineno <= 0):
-+            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)):
-                 return
-             self._wait_for_mainpyfile = False
-         if self.bp_commands(frame):
---- a/Lib/reprlib.py
-+++ b/Lib/reprlib.py
-@@ -35,6 +35,17 @@
-     return decorating_function
- 
- class Repr:
-+    _lookup = {
-+        'tuple': 'builtins',
-+        'list': 'builtins',
-+        'array': 'array',
-+        'set': 'builtins',
-+        'frozenset': 'builtins',
-+        'deque': 'collections',
-+        'dict': 'builtins',
-+        'str': 'builtins',
-+        'int': 'builtins'
-+    }
- 
-     def __init__(
-         self, *, maxlevel=6, maxtuple=6, maxlist=6, maxarray=5, maxdict=4,
-@@ -59,14 +70,24 @@
-         return self.repr1(x, self.maxlevel)
- 
-     def repr1(self, x, level):
--        typename = type(x).__name__
-+        cls = type(x)
-+        typename = cls.__name__
-+
-         if ' ' in typename:
-             parts = typename.split()
-             typename = '_'.join(parts)
--        if hasattr(self, 'repr_' + typename):
--            return getattr(self, 'repr_' + typename)(x, level)
--        else:
--            return self.repr_instance(x, level)
-+
-+        method = getattr(self, 'repr_' + typename, None)
-+        if method:
-+            # not defined in this class
-+            if typename not in self._lookup:
-+                return method(x, level)
-+            module = getattr(cls, '__module__', None)
-+            # defined in this class and is the module intended
-+            if module == self._lookup[typename]:
-+                return method(x, level)
-+
-+        return self.repr_instance(x, level)
- 
-     def _join(self, pieces, level):
-         if self.indent is None:
---- a/Lib/test/_test_multiprocessing.py
-+++ b/Lib/test/_test_multiprocessing.py
-@@ -5655,6 +5655,8 @@
-         # Catchable signal (ignored by semaphore tracker)
-         self.check_resource_tracker_death(signal.SIGTERM, False)
- 
-+    @unittest.skipIf(sys.platform.startswith("netbsd"),
-+                     "gh-125620: Skip on NetBSD due to long wait for SIGKILL process termination.")
-     def test_resource_tracker_sigkill(self):
-         # Uncatchable signal.
-         self.check_resource_tracker_death(signal.SIGKILL, True)
---- a/Lib/test/datetimetester.py
-+++ b/Lib/test/datetimetester.py
-@@ -2816,11 +2816,32 @@
-             self.assertEqual(t.strftime("%z"), "-0200" + z)
-             self.assertEqual(t.strftime("%:z"), "-02:00:" + z)
- 
--        # bpo-34482: Check that surrogates don't cause a crash.
--        try:
--            t.strftime('%y\ud800%m %H\ud800%M')
--        except UnicodeEncodeError:
--            pass
-+    def test_strftime_special(self):
-+        t = self.theclass(2004, 12, 31, 6, 22, 33, 47)
-+        s1 = t.strftime('%c')
-+        s2 = t.strftime('%B')
-+        # gh-52551, gh-78662: Unicode strings should pass through strftime,
-+        # independently from locale.
-+        self.assertEqual(t.strftime('\U0001f40d'), '\U0001f40d')
-+        self.assertEqual(t.strftime('\U0001f4bb%c\U0001f40d%B'), f'\U0001f4bb{s1}\U0001f40d{s2}')
-+        self.assertEqual(t.strftime('%c\U0001f4bb%B\U0001f40d'), f'{s1}\U0001f4bb{s2}\U0001f40d')
-+        # Lone surrogates should pass through.
-+        self.assertEqual(t.strftime('\ud83d'), '\ud83d')
-+        self.assertEqual(t.strftime('\udc0d'), '\udc0d')
-+        self.assertEqual(t.strftime('\ud83d%c\udc0d%B'), f'\ud83d{s1}\udc0d{s2}')
-+        self.assertEqual(t.strftime('%c\ud83d%B\udc0d'), f'{s1}\ud83d{s2}\udc0d')
-+        self.assertEqual(t.strftime('%c\udc0d%B\ud83d'), f'{s1}\udc0d{s2}\ud83d')
-+        # Surrogate pairs should not recombine.
-+        self.assertEqual(t.strftime('\ud83d\udc0d'), '\ud83d\udc0d')
-+        self.assertEqual(t.strftime('%c\ud83d\udc0d%B'), f'{s1}\ud83d\udc0d{s2}')
-+        # Surrogate-escaped bytes should not recombine.
-+        self.assertEqual(t.strftime('\udcf0\udc9f\udc90\udc8d'), '\udcf0\udc9f\udc90\udc8d')
-+        self.assertEqual(t.strftime('%c\udcf0\udc9f\udc90\udc8d%B'), f'{s1}\udcf0\udc9f\udc90\udc8d{s2}')
-+        # gh-124531: The null character should not terminate the format string.
-+        self.assertEqual(t.strftime('\0'), '\0')
-+        self.assertEqual(t.strftime('\0'*1000), '\0'*1000)
-+        self.assertEqual(t.strftime('\0%c\0%B'), f'\0{s1}\0{s2}')
-+        self.assertEqual(t.strftime('%c\0%B\0'), f'{s1}\0{s2}\0')
- 
-     def test_extract(self):
-         dt = self.theclass(2002, 3, 4, 18, 45, 3, 1234)
-@@ -3573,6 +3594,33 @@
-         # gh-85432: The parameter was named "fmt" in the pure-Python impl.
-         t.strftime(format="%f")
- 
-+    def test_strftime_special(self):
-+        t = self.theclass(1, 2, 3, 4)
-+        s1 = t.strftime('%I%p%Z')
-+        s2 = t.strftime('%X')
-+        # gh-52551, gh-78662: Unicode strings should pass through strftime,
-+        # independently from locale.
-+        self.assertEqual(t.strftime('\U0001f40d'), '\U0001f40d')
-+        self.assertEqual(t.strftime('\U0001f4bb%I%p%Z\U0001f40d%X'), f'\U0001f4bb{s1}\U0001f40d{s2}')
-+        self.assertEqual(t.strftime('%I%p%Z\U0001f4bb%X\U0001f40d'), f'{s1}\U0001f4bb{s2}\U0001f40d')
-+        # Lone surrogates should pass through.
-+        self.assertEqual(t.strftime('\ud83d'), '\ud83d')
-+        self.assertEqual(t.strftime('\udc0d'), '\udc0d')
-+        self.assertEqual(t.strftime('\ud83d%I%p%Z\udc0d%X'), f'\ud83d{s1}\udc0d{s2}')
-+        self.assertEqual(t.strftime('%I%p%Z\ud83d%X\udc0d'), f'{s1}\ud83d{s2}\udc0d')
-+        self.assertEqual(t.strftime('%I%p%Z\udc0d%X\ud83d'), f'{s1}\udc0d{s2}\ud83d')
-+        # Surrogate pairs should not recombine.
-+        self.assertEqual(t.strftime('\ud83d\udc0d'), '\ud83d\udc0d')
-+        self.assertEqual(t.strftime('%I%p%Z\ud83d\udc0d%X'), f'{s1}\ud83d\udc0d{s2}')
-+        # Surrogate-escaped bytes should not recombine.
-+        self.assertEqual(t.strftime('\udcf0\udc9f\udc90\udc8d'), '\udcf0\udc9f\udc90\udc8d')
-+        self.assertEqual(t.strftime('%I%p%Z\udcf0\udc9f\udc90\udc8d%X'), f'{s1}\udcf0\udc9f\udc90\udc8d{s2}')
-+        # gh-124531: The null character should not terminate the format string.
-+        self.assertEqual(t.strftime('\0'), '\0')
-+        self.assertEqual(t.strftime('\0'*1000), '\0'*1000)
-+        self.assertEqual(t.strftime('\0%I%p%Z\0%X'), f'\0{s1}\0{s2}')
-+        self.assertEqual(t.strftime('%I%p%Z\0%X\0'), f'{s1}\0{s2}\0')
-+
-     def test_format(self):
-         t = self.theclass(1, 2, 3, 4)
-         self.assertEqual(t.__format__(''), str(t))
-@@ -4002,9 +4050,8 @@
-         self.assertRaises(TypeError, t.strftime, "%Z")
- 
-         # Issue #6697:
--        if '_Fast' in self.__class__.__name__:
--            Badtzname.tz = '\ud800'
--            self.assertRaises(ValueError, t.strftime, "%Z")
-+        Badtzname.tz = '\ud800'
-+        self.assertEqual(t.strftime("%Z"), '\ud800')
- 
-     def test_hash_edge_cases(self):
-         # Offsets that overflow a basic time.
---- a/Lib/test/pickletester.py
-+++ b/Lib/test/pickletester.py
-@@ -26,7 +26,7 @@
- from test import support
- from test.support import os_helper
- from test.support import (
--    TestFailed, run_with_locale, no_tracing,
-+    TestFailed, run_with_locales, no_tracing,
-     _2G, _4G, bigmemtest
-     )
- from test.support.import_helper import forget
-@@ -2591,7 +2591,7 @@
-                 got = self.loads(pickle)
-                 self.assert_is_copy(value, got)
- 
--    @run_with_locale('LC_ALL', 'de_DE', 'fr_FR')
-+    @run_with_locales('LC_ALL', 'de_DE', 'fr_FR', '')
-     def test_float_format(self):
-         # make sure that floats are formatted locale independent with proto 0
-         self.assertEqual(self.dumps(1.2, 0)[0:3], b'F1.')
---- a/Lib/test/support/__init__.py
-+++ b/Lib/test/support/__init__.py
-@@ -43,7 +43,7 @@
-     "requires_limited_api", "requires_specialization",
-     # sys
-     "MS_WINDOWS", "is_jython", "is_android", "is_emscripten", "is_wasi",
--    "check_impl_detail", "unix_shell", "setswitchinterval",
-+    "is_apple_mobile", "check_impl_detail", "unix_shell", "setswitchinterval",
-     # os
-     "get_pagesize",
-     # network
-@@ -250,22 +250,16 @@
-         # process not running under the same user id as the current console
-         # user.  To avoid that, raise an exception if the window manager
-         # connection is not available.
--        from ctypes import cdll, c_int, pointer, Structure
--        from ctypes.util import find_library
--
--        app_services = cdll.LoadLibrary(find_library("ApplicationServices"))
--
--        if app_services.CGMainDisplayID() == 0:
--            reason = "gui tests cannot run without OS X window manager"
-+        import subprocess
-+        try:
-+            rc = subprocess.run(["launchctl", "managername"],
-+                                capture_output=True, check=True)
-+            managername = rc.stdout.decode("utf-8").strip()
-+        except subprocess.CalledProcessError:
-+            reason = "unable to detect macOS launchd job manager"
-         else:
--            class ProcessSerialNumber(Structure):
--                _fields_ = [("highLongOfPSN", c_int),
--                            ("lowLongOfPSN", c_int)]
--            psn = ProcessSerialNumber()
--            psn_p = pointer(psn)
--            if (  (app_services.GetCurrentProcess(psn_p) < 0) or
--                  (app_services.SetFrontProcess(psn_p) < 0) ):
--                reason = "cannot run without OS X gui process"
-+            if managername != "Aqua":
-+                reason = f"{managername=} -- can only run in a macOS GUI session"
- 
-     # check on every platform whether tkinter can actually do anything
-     if not reason:
-@@ -531,7 +525,7 @@
- 
- is_android = hasattr(sys, 'getandroidapilevel')
- 
--if sys.platform not in ('win32', 'vxworks'):
-+if sys.platform not in {"win32", "vxworks", "ios", "tvos", "watchos"}:
-     unix_shell = '/system/bin/sh' if is_android else '/bin/sh'
- else:
-     unix_shell = None
-@@ -541,19 +535,35 @@
- is_emscripten = sys.platform == "emscripten"
- is_wasi = sys.platform == "wasi"
- 
--has_fork_support = hasattr(os, "fork") and not is_emscripten and not is_wasi
-+# Apple mobile platforms (iOS/tvOS/watchOS) are POSIX-like but do not
-+# have subprocess or fork support.
-+is_apple_mobile = sys.platform in {"ios", "tvos", "watchos"}
-+is_apple = is_apple_mobile or sys.platform == "darwin"
-+
-+has_fork_support = hasattr(os, "fork") and not (
-+    is_emscripten
-+    or is_wasi
-+    or is_apple_mobile
-+)
- 
- def requires_fork():
-     return unittest.skipUnless(has_fork_support, "requires working os.fork()")
- 
--has_subprocess_support = not is_emscripten and not is_wasi
-+has_subprocess_support = not (
-+    is_emscripten
-+    or is_wasi
-+    or is_apple_mobile
-+)
- 
- def requires_subprocess():
-     """Used for subprocess, os.spawn calls, fd inheritance"""
-     return unittest.skipUnless(has_subprocess_support, "requires subprocess support")
- 
- # Emscripten's socket emulation and WASI sockets have limitations.
--has_socket_support = not is_emscripten and not is_wasi
-+has_socket_support = not (
-+    is_emscripten
-+    or is_wasi
-+)
- 
- def requires_working_socket(*, module=False):
-     """Skip tests or modules that require working sockets
-@@ -854,8 +864,8 @@
-     test.assertEqual(result, size, msg)
- 
- #=======================================================================
--# Decorator for running a function in a different locale, correctly resetting
--# it afterwards.
-+# Decorator/context manager for running a code in a different locale,
-+# correctly resetting it afterwards.
- 
- @contextlib.contextmanager
- def run_with_locale(catstr, *locales):
-@@ -866,16 +876,21 @@
-     except AttributeError:
-         # if the test author gives us an invalid category string
-         raise
--    except:
-+    except Exception:
-         # cannot retrieve original locale, so do nothing
-         locale = orig_locale = None
-+        if '' not in locales:
-+            raise unittest.SkipTest('no locales')
-     else:
-         for loc in locales:
-             try:
-                 locale.setlocale(category, loc)
-                 break
--            except:
-+            except locale.Error:
-                 pass
-+        else:
-+            if '' not in locales:
-+                raise unittest.SkipTest(f'no locales {locales}')
- 
-     try:
-         yield
-@@ -884,6 +899,46 @@
-             locale.setlocale(category, orig_locale)
- 
- #=======================================================================
-+# Decorator for running a function in multiple locales (if they are
-+# availasble) and resetting the original locale afterwards.
-+
-+def run_with_locales(catstr, *locales):
-+    def deco(func):
-+        @functools.wraps(func)
-+        def wrapper(self, /, *args, **kwargs):
-+            dry_run = '' in locales
-+            try:
-+                import locale
-+                category = getattr(locale, catstr)
-+                orig_locale = locale.setlocale(category)
-+            except AttributeError:
-+                # if the test author gives us an invalid category string
-+                raise
-+            except Exception:
-+                # cannot retrieve original locale, so do nothing
-+                pass
-+            else:
-+                try:
-+                    for loc in locales:
-+                        with self.subTest(locale=loc):
-+                            try:
-+                                locale.setlocale(category, loc)
-+                            except locale.Error:
-+                                self.skipTest(f'no locale {loc!r}')
-+                            else:
-+                                dry_run = False
-+                                func(self, *args, **kwargs)
-+                finally:
-+                    locale.setlocale(category, orig_locale)
-+            if dry_run:
-+                # no locales available, so just run the test
-+                # with the current locale
-+                with self.subTest(locale=None):
-+                    func(self, *args, **kwargs)
-+        return wrapper
-+    return deco
-+
-+#=======================================================================
- # Decorator for running a function in a specific timezone, correctly
- # resetting it afterwards.
- 
-@@ -2395,9 +2450,9 @@
-     else:
-         C_RECURSION_LIMIT = 10000
- 
--#Windows doesn't have os.uname() but it doesn't support s390x.
--skip_on_s390x = unittest.skipIf(hasattr(os, 'uname') and os.uname().machine == 's390x',
--                                'skipped on s390x')
-+# Windows doesn't have os.uname() but it doesn't support s390x.
-+is_s390x = hasattr(os, 'uname') and os.uname().machine == 's390x'
-+skip_on_s390x = unittest.skipIf(is_s390x, 'skipped on s390x')
- 
- _BASE_COPY_SRC_DIR_IGNORED_NAMES = frozenset({
-     # SRC_DIR/.git
---- a/Lib/test/support/import_helper.py
-+++ b/Lib/test/support/import_helper.py
-@@ -58,8 +58,8 @@
-     :return: The file system path to the legacy pyc file.
-     """
-     pyc_file = importlib.util.cache_from_source(source)
--    up_one = os.path.dirname(os.path.abspath(source))
--    legacy_pyc = os.path.join(up_one, source + 'c')
-+    assert source.endswith('.py')
-+    legacy_pyc = source + 'c'
-     shutil.move(pyc_file, legacy_pyc)
-     return legacy_pyc
- 
---- a/Lib/test/test__locale.py
-+++ b/Lib/test/test__locale.py
-@@ -1,4 +1,4 @@
--from _locale import (setlocale, LC_ALL, LC_CTYPE, LC_NUMERIC, localeconv, Error)
-+from _locale import (setlocale, LC_ALL, LC_CTYPE, LC_NUMERIC, LC_TIME, localeconv, Error)
- try:
-     from _locale import (RADIXCHAR, THOUSEP, nl_langinfo)
- except ImportError:
-@@ -26,7 +26,10 @@
-     'bs_BA', 'fr_LU', 'kl_GL', 'fa_IR', 'de_BE', 'sv_SE', 'it_CH', 'uk_UA',
-     'eu_ES', 'vi_VN', 'af_ZA', 'nb_NO', 'en_DK', 'tg_TJ', 'ps_AF', 'en_US',
-     'fr_FR.ISO8859-1', 'fr_FR.UTF-8', 'fr_FR.ISO8859-15@euro',
--    'ru_RU.KOI8-R', 'ko_KR.eucKR']
-+    'ru_RU.KOI8-R', 'ko_KR.eucKR',
-+    'ja_JP.UTF-8', 'lzh_TW.UTF-8', 'my_MM.UTF-8', 'or_IN.UTF-8', 'shn_MM.UTF-8',
-+    'ar_AE.UTF-8', 'bn_IN.UTF-8', 'mr_IN.UTF-8', 'th_TH.TIS620',
-+]
- 
- def setUpModule():
-     global candidate_locales
-@@ -74,6 +77,19 @@
-     'ps_AF': ('\u066b', '\u066c'),
- }
- 
-+known_alt_digits = {
-+    'C': (0, {}),
-+    'en_US': (0, {}),
-+    'fa_IR': (100, {0: '\u06f0\u06f0', 10: '\u06f1\u06f0', 99: '\u06f9\u06f9'}),
-+    'ja_JP': (100, {1: '\u4e00', 10: '\u5341', 99: '\u4e5d\u5341\u4e5d'}),
-+    'lzh_TW': (32, {0: '\u3007', 10: '\u5341', 31: '\u5345\u4e00'}),
-+    'my_MM': (100, {0: '\u1040\u1040', 10: '\u1041\u1040', 99: '\u1049\u1049'}),
-+    'or_IN': (100, {0: '\u0b66', 10: '\u0b67\u0b66', 99: '\u0b6f\u0b6f'}),
-+    'shn_MM': (100, {0: '\u1090\u1090', 10: '\u1091\u1090', 99: '\u1099\u1099'}),
-+    'ar_AE': (100, {0: '\u0660', 10: '\u0661\u0660', 99: '\u0669\u0669'}),
-+    'bn_IN': (100, {0: '\u09e6', 10: '\u09e7\u09e6', 99: '\u09ef\u09ef'}),
-+}
-+
- if sys.platform == 'win32':
-     # ps_AF doesn't work on Windows: see bpo-38324 (msg361830)
-     del known_numerics['ps_AF']
-@@ -176,6 +192,42 @@
-         if not tested:
-             self.skipTest('no suitable locales')
- 
-+    @unittest.skipUnless(nl_langinfo, "nl_langinfo is not available")
-+    @unittest.skipUnless(hasattr(locale, 'ALT_DIGITS'), "requires locale.ALT_DIGITS")
-+    @unittest.skipIf(
-+        support.is_emscripten or support.is_wasi,
-+        "musl libc issue on Emscripten, bpo-46390"
-+    )
-+    def test_alt_digits_nl_langinfo(self):
-+        # Test nl_langinfo(ALT_DIGITS)
-+        tested = False
-+        for loc in candidate_locales:
-+            with self.subTest(locale=loc):
-+                try:
-+                    setlocale(LC_TIME, loc)
-+                    setlocale(LC_CTYPE, loc)
-+                except Error:
-+                    self.skipTest(f'no locale {loc!r}')
-+                    continue
-+
-+                with self.subTest(locale=loc):
-+                    alt_digits = nl_langinfo(locale.ALT_DIGITS)
-+                    self.assertIsInstance(alt_digits, str)
-+                    alt_digits = alt_digits.split(';') if alt_digits else []
-+                    if alt_digits:
-+                        self.assertGreaterEqual(len(alt_digits), 10, alt_digits)
-+                    loc1 = loc.split('.', 1)[0]
-+                    if loc1 in known_alt_digits:
-+                        count, samples = known_alt_digits[loc1]
-+                        if count and not alt_digits:
-+                            self.skipTest(f'ALT_DIGITS is not set for locale {loc!r} on this platform')
-+                        self.assertEqual(len(alt_digits), count, alt_digits)
-+                        for i in samples:
-+                            self.assertEqual(alt_digits[i], samples[i])
-+                    tested = True
-+        if not tested:
-+            self.skipTest('no suitable locales')
-+
-     def test_float_parsing(self):
-         # Bug #1391872: Test whether float parsing is okay on European
-         # locales.
---- a/Lib/test/test_argparse.py
-+++ b/Lib/test/test_argparse.py
-@@ -6,8 +6,10 @@
- import io
- import operator
- import os
-+import re
- import shutil
- import stat
-+import subprocess
- import sys
- import textwrap
- import tempfile
-@@ -15,7 +17,16 @@
- import argparse
- import warnings
- 
-+from enum import StrEnum
-+from pathlib import Path
-+from test.support import REPO_ROOT
-+from test.support import TEST_HOME_DIR
-+from test.support import captured_stderr
-+from test.support import import_helper
- from test.support import os_helper
-+from test.support import requires_subprocess
-+from test.support import script_helper
-+from test.test_tools import skip_if_missing
- from unittest import mock
- 
- 
-@@ -1021,6 +1032,34 @@
-     ]
- 
- 
-+class TestStrEnumChoices(TestCase):
-+    class Color(StrEnum):
-+        RED = "red"
-+        GREEN = "green"
-+        BLUE = "blue"
-+
-+    def test_parse_enum_value(self):
-+        parser = argparse.ArgumentParser()
-+        parser.add_argument('--color', choices=self.Color)
-+        args = parser.parse_args(['--color', 'red'])
-+        self.assertEqual(args.color, self.Color.RED)
-+
-+    def test_help_message_contains_enum_choices(self):
-+        parser = argparse.ArgumentParser()
-+        parser.add_argument('--color', choices=self.Color, help='Choose a color')
-+        self.assertIn('[--color {red,green,blue}]', parser.format_usage())
-+        self.assertIn('  --color {red,green,blue}', parser.format_help())
-+
-+    def test_invalid_enum_value_raises_error(self):
-+        parser = argparse.ArgumentParser(exit_on_error=False)
-+        parser.add_argument('--color', choices=self.Color)
-+        self.assertRaisesRegex(
-+            argparse.ArgumentError,
-+            r"invalid choice: 'yellow' \(choose from red, green, blue\)",
-+            parser.parse_args,
-+            ['--color', 'yellow'],
-+        )
-+
- # ================
- # Positional tests
- # ================
-@@ -2422,7 +2461,7 @@
-             parser.parse_args(('baz',))
-         self.assertRegex(
-             excinfo.exception.stderr,
--            r"error: argument {foo,bar}: invalid choice: 'baz' \(choose from 'foo', 'bar'\)\n$"
-+            r"error: argument {foo,bar}: invalid choice: 'baz' \(choose from foo, bar\)\n$"
-         )
- 
-     def test_optional_subparsers(self):
-@@ -2880,6 +2919,35 @@
-               -x X
-         '''.format(progname, ' ' if progname else '' )))
- 
-+    def test_mutex_groups_parents(self):
-+        parent = ErrorRaisingArgumentParser(add_help=False)
-+        g = parent.add_argument_group(title='g', description='gd')
-+        g.add_argument('-w')
-+        g.add_argument('-x')
-+        m = g.add_mutually_exclusive_group()
-+        m.add_argument('-y')
-+        m.add_argument('-z')
-+        parser = ErrorRaisingArgumentParser(prog='PROG', parents=[parent])
-+
-+        self.assertRaises(ArgumentParserError, parser.parse_args,
-+            ['-y', 'Y', '-z', 'Z'])
-+
-+        parser_help = parser.format_help()
-+        self.assertEqual(parser_help, textwrap.dedent('''\
-+            usage: PROG [-h] [-w W] [-x X] [-y Y | -z Z]
-+
-+            options:
-+              -h, --help  show this help message and exit
-+
-+            g:
-+              gd
-+
-+              -w W
-+              -x X
-+              -y Y
-+              -z Z
-+        '''))
-+
- # ==============================
- # Mutually exclusive group tests
- # ==============================
-@@ -4674,7 +4742,7 @@
-     version = ''
- 
- 
--class TestHelpTupleMetavar(HelpTestCase):
-+class TestHelpTupleMetavarOptional(HelpTestCase):
-     """Test specifying metavar as a tuple"""
- 
-     parser_signature = Sig(prog='PROG')
-@@ -4701,6 +4769,34 @@
-     version = ''
- 
- 
-+class TestHelpTupleMetavarPositional(HelpTestCase):
-+    """Test specifying metavar on a Positional as a tuple"""
-+
-+    parser_signature = Sig(prog='PROG')
-+    argument_signatures = [
-+        Sig('w', help='w help', nargs='+', metavar=('W1', 'W2')),
-+        Sig('x', help='x help', nargs='*', metavar=('X1', 'X2')),
-+        Sig('y', help='y help', nargs=3, metavar=('Y1', 'Y2', 'Y3')),
-+        Sig('z', help='z help', nargs='?', metavar=('Z1',)),
-+    ]
-+    argument_group_signatures = []
-+    usage = '''\
-+        usage: PROG [-h] W1 [W2 ...] [X1 [X2 ...]] Y1 Y2 Y3 [Z1]
-+        '''
-+    help = usage + '''\
-+
-+        positional arguments:
-+          W1 W2       w help
-+          X1 X2       x help
-+          Y1 Y2 Y3    y help
-+          Z1          z help
-+
-+        options:
-+          -h, --help  show this help message and exit
-+        '''
-+    version = ''
-+
-+
- class TestHelpRawText(HelpTestCase):
-     """Test the RawTextHelpFormatter"""
- 
-@@ -5041,15 +5137,15 @@
- class TestInvalidArgumentConstructors(TestCase):
-     """Test a bunch of invalid Argument constructors"""
- 
--    def assertTypeError(self, *args, **kwargs):
-+    def assertTypeError(self, *args, errmsg=None, **kwargs):
-         parser = argparse.ArgumentParser()
--        self.assertRaises(TypeError, parser.add_argument,
--                          *args, **kwargs)
-+        self.assertRaisesRegex(TypeError, errmsg, parser.add_argument,
-+                               *args, **kwargs)
- 
--    def assertValueError(self, *args, **kwargs):
-+    def assertValueError(self, *args, errmsg=None, **kwargs):
-         parser = argparse.ArgumentParser()
--        self.assertRaises(ValueError, parser.add_argument,
--                          *args, **kwargs)
-+        self.assertRaisesRegex(ValueError, errmsg, parser.add_argument,
-+                               *args, **kwargs)
- 
-     def test_invalid_keyword_arguments(self):
-         self.assertTypeError('-x', bar=None)
-@@ -5059,8 +5155,9 @@
- 
-     def test_missing_destination(self):
-         self.assertTypeError()
--        for action in ['append', 'store']:
--            self.assertTypeError(action=action)
-+        for action in ['store', 'append', 'extend']:
-+            with self.subTest(action=action):
-+                self.assertTypeError(action=action)
- 
-     def test_invalid_option_strings(self):
-         self.assertValueError('--')
-@@ -5074,10 +5171,8 @@
-         self.assertValueError('-x', action='foo')
-         self.assertValueError('foo', action='baz')
-         self.assertValueError('--foo', action=('store', 'append'))
--        parser = argparse.ArgumentParser()
--        with self.assertRaises(ValueError) as cm:
--            parser.add_argument("--foo", action="store-true")
--        self.assertIn('unknown action', str(cm.exception))
-+        self.assertValueError('--foo', action="store-true",
-+                              errmsg='unknown action')
- 
-     def test_multiple_dest(self):
-         parser = argparse.ArgumentParser()
-@@ -5090,39 +5185,47 @@
-     def test_no_argument_actions(self):
-         for action in ['store_const', 'store_true', 'store_false',
-                        'append_const', 'count']:
--            for attrs in [dict(type=int), dict(nargs='+'),
--                          dict(choices=['a', 'b'])]:
--                self.assertTypeError('-x', action=action, **attrs)
-+            with self.subTest(action=action):
-+                for attrs in [dict(type=int), dict(nargs='+'),
-+                              dict(choices=['a', 'b'])]:
-+                    with self.subTest(attrs=attrs):
-+                        self.assertTypeError('-x', action=action, **attrs)
-+                        self.assertTypeError('x', action=action, **attrs)
-+                self.assertTypeError('-x', action=action, nargs=0)
-+                self.assertTypeError('x', action=action, nargs=0)
- 
-     def test_no_argument_no_const_actions(self):
-         # options with zero arguments
-         for action in ['store_true', 'store_false', 'count']:
-+            with self.subTest(action=action):
-+                # const is always disallowed
-+                self.assertTypeError('-x', const='foo', action=action)
- 
--            # const is always disallowed
--            self.assertTypeError('-x', const='foo', action=action)
--
--            # nargs is always disallowed
--            self.assertTypeError('-x', nargs='*', action=action)
-+                # nargs is always disallowed
-+                self.assertTypeError('-x', nargs='*', action=action)
- 
-     def test_more_than_one_argument_actions(self):
--        for action in ['store', 'append']:
--
--            # nargs=0 is disallowed
--            self.assertValueError('-x', nargs=0, action=action)
--            self.assertValueError('spam', nargs=0, action=action)
--
--            # const is disallowed with non-optional arguments
--            for nargs in [1, '*', '+']:
--                self.assertValueError('-x', const='foo',
--                                      nargs=nargs, action=action)
--                self.assertValueError('spam', const='foo',
--                                      nargs=nargs, action=action)
-+        for action in ['store', 'append', 'extend']:
-+            with self.subTest(action=action):
-+                # nargs=0 is disallowed
-+                action_name = 'append' if action == 'extend' else action
-+                self.assertValueError('-x', nargs=0, action=action,
-+                    errmsg=f'nargs for {action_name} actions must be != 0')
-+                self.assertValueError('spam', nargs=0, action=action,
-+                    errmsg=f'nargs for {action_name} actions must be != 0')
-+
-+                # const is disallowed with non-optional arguments
-+                for nargs in [1, '*', '+']:
-+                    self.assertValueError('-x', const='foo',
-+                                          nargs=nargs, action=action)
-+                    self.assertValueError('spam', const='foo',
-+                                          nargs=nargs, action=action)
- 
-     def test_required_const_actions(self):
-         for action in ['store_const', 'append_const']:
--
--            # nargs is always disallowed
--            self.assertTypeError('-x', nargs='+', action=action)
-+            with self.subTest(action=action):
-+                # nargs is always disallowed
-+                self.assertTypeError('-x', nargs='+', action=action)
- 
-     def test_parsers_action_missing_params(self):
-         self.assertTypeError('command', action='parsers')
-@@ -5804,12 +5907,23 @@
-         # cannot parse the '1,2,3'
-         self.assertEqual(NS(bar='y', cmd='cmd', foo='x', rest=[1]), args)
-         self.assertEqual(["2", "3"], extras)
-+        args, extras = parser.parse_known_intermixed_args(argv)
-+        self.assertEqual(NS(bar='y', cmd='cmd', foo='x', rest=[1, 2, 3]), args)
-+        self.assertEqual([], extras)
- 
-+        # unknown optionals go into extras
-+        argv = 'cmd --foo x --error 1 2 --bar y 3'.split()
-+        args, extras = parser.parse_known_intermixed_args(argv)
-+        self.assertEqual(NS(bar='y', cmd='cmd', foo='x', rest=[1, 2, 3]), args)
-+        self.assertEqual(['--error'], extras)
-         argv = 'cmd --foo x 1 --error 2 --bar y 3'.split()
-         args, extras = parser.parse_known_intermixed_args(argv)
--        # unknown optionals go into extras
--        self.assertEqual(NS(bar='y', cmd='cmd', foo='x', rest=[1]), args)
--        self.assertEqual(['--error', '2', '3'], extras)
-+        self.assertEqual(NS(bar='y', cmd='cmd', foo='x', rest=[1, 2, 3]), args)
-+        self.assertEqual(['--error'], extras)
-+        argv = 'cmd --foo x 1 2 --error --bar y 3'.split()
-+        args, extras = parser.parse_known_intermixed_args(argv)
-+        self.assertEqual(NS(bar='y', cmd='cmd', foo='x', rest=[1, 2, 3]), args)
-+        self.assertEqual(['--error'], extras)
- 
-         # restores attributes that were temporarily changed
-         self.assertIsNone(parser.usage)
-@@ -5828,28 +5942,45 @@
-             parser.parse_intermixed_args(argv)
-         self.assertRegex(str(cm.exception), r'\.\.\.')
- 
--    def test_exclusive(self):
--        # mutually exclusive group; intermixed works fine
--        parser = ErrorRaisingArgumentParser(prog='PROG')
-+    def test_required_exclusive(self):
-+        # required mutually exclusive group; intermixed works fine
-+        parser = argparse.ArgumentParser(prog='PROG', exit_on_error=False)
-         group = parser.add_mutually_exclusive_group(required=True)
-         group.add_argument('--foo', action='store_true', help='FOO')
-         group.add_argument('--spam', help='SPAM')
-         parser.add_argument('badger', nargs='*', default='X', help='BADGER')
-+        args = parser.parse_intermixed_args('--foo 1 2'.split())
-+        self.assertEqual(NS(badger=['1', '2'], foo=True, spam=None), args)
-         args = parser.parse_intermixed_args('1 --foo 2'.split())
-         self.assertEqual(NS(badger=['1', '2'], foo=True, spam=None), args)
--        self.assertRaises(ArgumentParserError, parser.parse_intermixed_args, '1 2'.split())
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                'one of the arguments --foo --spam is required',
-+                parser.parse_intermixed_args, '1 2'.split())
-         self.assertEqual(group.required, True)
- 
--    def test_exclusive_incompatible(self):
--        # mutually exclusive group including positional - fail
--        parser = ErrorRaisingArgumentParser(prog='PROG')
-+    def test_required_exclusive_with_positional(self):
-+        # required mutually exclusive group with positional argument
-+        parser = argparse.ArgumentParser(prog='PROG', exit_on_error=False)
-         group = parser.add_mutually_exclusive_group(required=True)
-         group.add_argument('--foo', action='store_true', help='FOO')
-         group.add_argument('--spam', help='SPAM')
-         group.add_argument('badger', nargs='*', default='X', help='BADGER')
--        self.assertRaises(TypeError, parser.parse_intermixed_args, [])
-+        args = parser.parse_intermixed_args(['--foo'])
-+        self.assertEqual(NS(foo=True, spam=None, badger='X'), args)
-+        args = parser.parse_intermixed_args(['a', 'b'])
-+        self.assertEqual(NS(foo=False, spam=None, badger=['a', 'b']), args)
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                'one of the arguments --foo --spam badger is required',
-+                parser.parse_intermixed_args, [])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                'argument badger: not allowed with argument --foo',
-+                parser.parse_intermixed_args, ['--foo', 'a', 'b'])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                'argument badger: not allowed with argument --foo',
-+                parser.parse_intermixed_args, ['a', '--foo', 'b'])
-         self.assertEqual(group.required, True)
- 
-+
- class TestIntermixedMessageContentError(TestCase):
-     # case where Intermixed gives different error message
-     # error is raised by 1st parsing step
-@@ -5867,7 +5998,7 @@
-         with self.assertRaises(ArgumentParserError) as cm:
-             parser.parse_intermixed_args([])
-         msg = str(cm.exception)
--        self.assertNotRegex(msg, 'req_pos')
-+        self.assertRegex(msg, 'req_pos')
-         self.assertRegex(msg, 'req_opt')
- 
- # ==========================
-@@ -6146,6 +6277,27 @@
-                                'the following arguments are required: bar, baz$',
-                                self.parser.parse_args, [])
- 
-+    def test_required_args_with_metavar(self):
-+        self.parser.add_argument('bar')
-+        self.parser.add_argument('baz', metavar='BaZ')
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'the following arguments are required: bar, BaZ$',
-+                               self.parser.parse_args, [])
-+
-+    def test_required_args_n(self):
-+        self.parser.add_argument('bar')
-+        self.parser.add_argument('baz', nargs=3)
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'the following arguments are required: bar, baz$',
-+                               self.parser.parse_args, [])
-+
-+    def test_required_args_n_with_metavar(self):
-+        self.parser.add_argument('bar')
-+        self.parser.add_argument('baz', nargs=3, metavar=('B', 'A', 'Z'))
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'the following arguments are required: bar, B, A, Z$',
-+                               self.parser.parse_args, [])
-+
-     def test_required_args_optional(self):
-         self.parser.add_argument('bar')
-         self.parser.add_argument('baz', nargs='?')
-@@ -6160,6 +6312,20 @@
-                                'the following arguments are required: bar$',
-                                self.parser.parse_args, [])
- 
-+    def test_required_args_one_or_more(self):
-+        self.parser.add_argument('bar')
-+        self.parser.add_argument('baz', nargs='+')
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'the following arguments are required: bar, baz$',
-+                               self.parser.parse_args, [])
-+
-+    def test_required_args_one_or_more_with_metavar(self):
-+        self.parser.add_argument('bar')
-+        self.parser.add_argument('baz', nargs='+', metavar=('BaZ1', 'BaZ2'))
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               r'the following arguments are required: bar, BaZ1\[, BaZ2]$',
-+                               self.parser.parse_args, [])
-+
-     def test_required_args_remainder(self):
-         self.parser.add_argument('bar')
-         self.parser.add_argument('baz', nargs='...')
-@@ -6175,12 +6341,55 @@
-                                'one of the arguments --bar --baz is required',
-                                self.parser.parse_args, [])
- 
-+    def test_conflicting_mutually_exclusive_args_optional_with_metavar(self):
-+        group = self.parser.add_mutually_exclusive_group()
-+        group.add_argument('--bar')
-+        group.add_argument('baz', nargs='?', metavar='BaZ')
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'argument BaZ: not allowed with argument --bar$',
-+                               self.parser.parse_args, ['--bar', 'a', 'b'])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'argument --bar: not allowed with argument BaZ$',
-+                               self.parser.parse_args, ['a', '--bar', 'b'])
-+
-+    def test_conflicting_mutually_exclusive_args_zero_or_more_with_metavar1(self):
-+        group = self.parser.add_mutually_exclusive_group()
-+        group.add_argument('--bar')
-+        group.add_argument('baz', nargs='*', metavar=('BAZ1',))
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'argument BAZ1: not allowed with argument --bar$',
-+                               self.parser.parse_args, ['--bar', 'a', 'b'])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               'argument --bar: not allowed with argument BAZ1$',
-+                               self.parser.parse_args, ['a', '--bar', 'b'])
-+
-+    def test_conflicting_mutually_exclusive_args_zero_or_more_with_metavar2(self):
-+        group = self.parser.add_mutually_exclusive_group()
-+        group.add_argument('--bar')
-+        group.add_argument('baz', nargs='*', metavar=('BAZ1', 'BAZ2'))
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               r'argument BAZ1\[, BAZ2]: not allowed with argument --bar$',
-+                               self.parser.parse_args, ['--bar', 'a', 'b'])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                               r'argument --bar: not allowed with argument BAZ1\[, BAZ2]$',
-+                               self.parser.parse_args, ['a', '--bar', 'b'])
-+
-     def test_ambiguous_option(self):
-         self.parser.add_argument('--foobaz')
-         self.parser.add_argument('--fooble', action='store_true')
-+        self.parser.add_argument('--foogle')
-         self.assertRaisesRegex(argparse.ArgumentError,
--                               "ambiguous option: --foob could match --foobaz, --fooble",
--                               self.parser.parse_args, ['--foob'])
-+                "ambiguous option: --foob could match --foobaz, --fooble",
-+            self.parser.parse_args, ['--foob'])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                "ambiguous option: --foob=1 could match --foobaz, --fooble$",
-+            self.parser.parse_args, ['--foob=1'])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                "ambiguous option: --foob could match --foobaz, --fooble$",
-+            self.parser.parse_args, ['--foob', '1', '--foogle', '2'])
-+        self.assertRaisesRegex(argparse.ArgumentError,
-+                "ambiguous option: --foob=1 could match --foobaz, --fooble$",
-+            self.parser.parse_args, ['--foob=1', '--foogle', '2'])
- 
-     def test_os_error(self):
-         self.parser.add_argument('file')
-@@ -6189,6 +6398,56 @@
-                                self.parser.parse_args, ['@no-such-file'])
- 
- 
-+# =================
-+# Translation tests
-+# =================
-+
-+pygettext = Path(REPO_ROOT) / 'Tools' / 'i18n' / 'pygettext.py'
-+snapshot_path = Path(TEST_HOME_DIR) / 'translationdata' / 'argparse' / 'msgids.txt'
-+
-+msgid_pattern = re.compile(r'msgid(.*?)(?:msgid_plural|msgctxt|msgstr)', re.DOTALL)
-+msgid_string_pattern = re.compile(r'"((?:\\"|[^"])*)"')
-+
-+
-+@requires_subprocess()
-+class TestTranslations(unittest.TestCase):
-+
-+    def test_translations(self):
-+        # Test messages extracted from the argparse module against a snapshot
-+        skip_if_missing('i18n')
-+        res = generate_po_file(stdout_only=False)
-+        self.assertEqual(res.returncode, 0)
-+        self.assertEqual(res.stderr, '')
-+        msgids = extract_msgids(res.stdout)
-+        snapshot = snapshot_path.read_text().splitlines()
-+        self.assertListEqual(msgids, snapshot)
-+
-+
-+def generate_po_file(*, stdout_only=True):
-+    res = subprocess.run([sys.executable, pygettext,
-+                          '--no-location', '-o', '-', argparse.__file__],
-+                         stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
-+    if stdout_only:
-+        return res.stdout
-+    return res
-+
-+
-+def extract_msgids(po):
-+    msgids = []
-+    for msgid in msgid_pattern.findall(po):
-+        msgid_string = ''.join(msgid_string_pattern.findall(msgid))
-+        msgid_string = msgid_string.replace(r'\"', '"')
-+        if msgid_string:
-+            msgids.append(msgid_string)
-+    return sorted(msgids)
-+
-+
-+def update_translation_snapshots():
-+    contents = generate_po_file()
-+    msgids = extract_msgids(contents)
-+    snapshot_path.write_text('\n'.join(msgids))
-+
-+
- def tearDownModule():
-     # Remove global references to avoid looking like we have refleaks.
-     RFile.seen = {}
-@@ -6196,4 +6455,8 @@
- 
- 
- if __name__ == '__main__':
-+    # To regenerate translation snapshots
-+    if len(sys.argv) > 1 and sys.argv[1] == '--snapshot-update':
-+        update_translation_snapshots()
-+        sys.exit(0)
-     unittest.main()
---- a/Lib/test/test_ast/test_ast.py
-+++ b/Lib/test/test_ast/test_ast.py
-@@ -66,6 +66,23 @@
-             # "ast.AST constructor takes 0 positional arguments"
-             ast.AST(2)
- 
-+    def test_AST_fields_NULL_check(self):
-+        # See: https://github.com/python/cpython/issues/126105
-+        old_value = ast.AST._fields
-+
-+        def cleanup():
-+            ast.AST._fields = old_value
-+        self.addCleanup(cleanup)
-+
-+        del ast.AST._fields
-+
-+        msg = "type object 'ast.AST' has no attribute '_fields'"
-+        # Both examples used to crash:
-+        with self.assertRaisesRegex(AttributeError, msg):
-+            ast.AST(arg1=123)
-+        with self.assertRaisesRegex(AttributeError, msg):
-+            ast.AST()
-+
-     def test_AST_garbage_collection(self):
-         class X:
-             pass
---- a/Lib/test/test_asyncio/test_eager_task_factory.py
-+++ b/Lib/test/test_asyncio/test_eager_task_factory.py
-@@ -218,6 +218,52 @@
- 
-         self.run_coro(run())
- 
-+    def test_staggered_race_with_eager_tasks(self):
-+        # See https://github.com/python/cpython/issues/124309
-+
-+        async def fail():
-+            await asyncio.sleep(0)
-+            raise ValueError("no good")
-+
-+        async def run():
-+            winner, index, excs = await asyncio.staggered.staggered_race(
-+                [
-+                    lambda: asyncio.sleep(2, result="sleep2"),
-+                    lambda: asyncio.sleep(1, result="sleep1"),
-+                    lambda: fail()
-+                ],
-+                delay=0.25
-+            )
-+            self.assertEqual(winner, 'sleep1')
-+            self.assertEqual(index, 1)
-+            self.assertIsNone(excs[index])
-+            self.assertIsInstance(excs[0], asyncio.CancelledError)
-+            self.assertIsInstance(excs[2], ValueError)
-+
-+        self.run_coro(run())
-+
-+    def test_staggered_race_with_eager_tasks_no_delay(self):
-+        # See https://github.com/python/cpython/issues/124309
-+        async def fail():
-+            raise ValueError("no good")
-+
-+        async def run():
-+            winner, index, excs = await asyncio.staggered.staggered_race(
-+                [
-+                    lambda: fail(),
-+                    lambda: asyncio.sleep(1, result="sleep1"),
-+                    lambda: asyncio.sleep(0, result="sleep0"),
-+                ],
-+                delay=None
-+            )
-+            self.assertEqual(winner, 'sleep1')
-+            self.assertEqual(index, 1)
-+            self.assertIsNone(excs[index])
-+            self.assertIsInstance(excs[0], ValueError)
-+            self.assertEqual(len(excs), 2)
-+
-+        self.run_coro(run())
-+
- 
- class PyEagerTaskFactoryLoopTests(EagerTaskFactoryLoopTests, test_utils.TestCase):
-     Task = tasks._PyTask
---- a/Lib/test/test_asyncio/test_futures.py
-+++ b/Lib/test/test_asyncio/test_futures.py
-@@ -31,6 +31,25 @@
-     pass
- 
- 
-+class ReachableCode(Exception):
-+    """Exception to raise to indicate that some code was reached.
-+
-+    Use this exception if using mocks is not a good alternative.
-+    """
-+
-+
-+class SimpleEvilEventLoop(asyncio.base_events.BaseEventLoop):
-+    """Base class for UAF and other evil stuff requiring an evil event loop."""
-+
-+    def get_debug(self):  # to suppress tracebacks
-+        return False
-+
-+    def __del__(self):
-+        # Automatically close the evil event loop to avoid warnings.
-+        if not self.is_closed() and not self.is_running():
-+            self.close()
-+
-+
- class DuckFuture:
-     # Class that does not inherit from Future but aims to be duck-type
-     # compatible with it.
-@@ -640,6 +659,28 @@
-             fut = self._new_future(loop=self.loop)
-             fut.set_result(Evil())
- 
-+    def test_future_cancelled_result_refcycles(self):
-+        f = self._new_future(loop=self.loop)
-+        f.cancel()
-+        exc = None
-+        try:
-+            f.result()
-+        except asyncio.CancelledError as e:
-+            exc = e
-+        self.assertIsNotNone(exc)
-+        self.assertListEqual(gc.get_referrers(exc), [])
-+
-+    def test_future_cancelled_exception_refcycles(self):
-+        f = self._new_future(loop=self.loop)
-+        f.cancel()
-+        exc = None
-+        try:
-+            f.exception()
-+        except asyncio.CancelledError as e:
-+            exc = e
-+        self.assertIsNotNone(exc)
-+        self.assertListEqual(gc.get_referrers(exc), [])
-+
- 
- @unittest.skipUnless(hasattr(futures, '_CFuture'),
-                      'requires the C _asyncio module')
-@@ -664,6 +705,24 @@
-         evil = gc.get_referents(_asyncio)
-         gc.collect()
- 
-+    def test_callbacks_copy(self):
-+        # See https://github.com/python/cpython/issues/125789
-+        # In C implementation, the `_callbacks` attribute
-+        # always returns a new list to avoid mutations of internal state
-+
-+        fut = self._new_future(loop=self.loop)
-+        f1 = lambda _: 1
-+        f2 = lambda _: 2
-+        fut.add_done_callback(f1)
-+        fut.add_done_callback(f2)
-+        callbacks = fut._callbacks
-+        self.assertIsNot(callbacks, fut._callbacks)
-+        fut.remove_done_callback(f1)
-+        callbacks = fut._callbacks
-+        self.assertIsNot(callbacks, fut._callbacks)
-+        fut.remove_done_callback(f2)
-+        self.assertIsNone(fut._callbacks)
-+
- 
- @unittest.skipUnless(hasattr(futures, '_CFuture'),
-                      'requires the C _asyncio module')
-@@ -896,6 +955,107 @@
- 
-         fut.remove_done_callback(evil())
- 
-+    def test_evil_call_soon_list_mutation(self):
-+        # see: https://github.com/python/cpython/issues/125969
-+        called_on_fut_callback0 = False
-+
-+        pad = lambda: ...
-+
-+        def evil_call_soon(*args, **kwargs):
-+            nonlocal called_on_fut_callback0
-+            if called_on_fut_callback0:
-+                # Called when handling fut->fut_callbacks[0]
-+                # and mutates the length fut->fut_callbacks.
-+                fut.remove_done_callback(int)
-+                fut.remove_done_callback(pad)
-+            else:
-+                called_on_fut_callback0 = True
-+
-+        fake_event_loop = SimpleEvilEventLoop()
-+        fake_event_loop.call_soon = evil_call_soon
-+
-+        with mock.patch.object(self, 'loop', fake_event_loop):
-+            fut = self._new_future()
-+            self.assertIs(fut.get_loop(), fake_event_loop)
-+
-+            fut.add_done_callback(str)  # sets fut->fut_callback0
-+            fut.add_done_callback(int)  # sets fut->fut_callbacks[0]
-+            fut.add_done_callback(pad)  # sets fut->fut_callbacks[1]
-+            fut.add_done_callback(pad)  # sets fut->fut_callbacks[2]
-+            fut.set_result("boom")
-+
-+            # When there are no more callbacks, the Python implementation
-+            # returns an empty list but the C implementation returns None.
-+            self.assertIn(fut._callbacks, (None, []))
-+
-+    def test_use_after_free_on_fut_callback_0_with_evil__eq__(self):
-+        # Special thanks to Nico-Posada for the original PoC.
-+        # See https://github.com/python/cpython/issues/125966.
-+
-+        fut = self._new_future()
-+
-+        class cb_pad:
-+            def __eq__(self, other):
-+                return True
-+
-+        class evil(cb_pad):
-+            def __eq__(self, other):
-+                fut.remove_done_callback(None)
-+                return NotImplemented
-+
-+        fut.add_done_callback(cb_pad())
-+        fut.remove_done_callback(evil())
-+
-+    def test_use_after_free_on_fut_callback_0_with_evil__getattribute__(self):
-+        # see: https://github.com/python/cpython/issues/125984
-+
-+        class EvilEventLoop(SimpleEvilEventLoop):
-+            def call_soon(self, *args, **kwargs):
-+                super().call_soon(*args, **kwargs)
-+                raise ReachableCode
-+
-+            def __getattribute__(self, name):
-+                nonlocal fut_callback_0
-+                if name == 'call_soon':
-+                    fut.remove_done_callback(fut_callback_0)
-+                    del fut_callback_0
-+                return object.__getattribute__(self, name)
-+
-+        evil_loop = EvilEventLoop()
-+        with mock.patch.object(self, 'loop', evil_loop):
-+            fut = self._new_future()
-+            self.assertIs(fut.get_loop(), evil_loop)
-+
-+            fut_callback_0 = lambda: ...
-+            fut.add_done_callback(fut_callback_0)
-+            self.assertRaises(ReachableCode, fut.set_result, "boom")
-+
-+    def test_use_after_free_on_fut_context_0_with_evil__getattribute__(self):
-+        # see: https://github.com/python/cpython/issues/125984
-+
-+        class EvilEventLoop(SimpleEvilEventLoop):
-+            def call_soon(self, *args, **kwargs):
-+                super().call_soon(*args, **kwargs)
-+                raise ReachableCode
-+
-+            def __getattribute__(self, name):
-+                if name == 'call_soon':
-+                    # resets the future's event loop
-+                    fut.__init__(loop=SimpleEvilEventLoop())
-+                return object.__getattribute__(self, name)
-+
-+        evil_loop = EvilEventLoop()
-+        with mock.patch.object(self, 'loop', evil_loop):
-+            fut = self._new_future()
-+            self.assertIs(fut.get_loop(), evil_loop)
-+
-+            fut_callback_0 = mock.Mock()
-+            fut_context_0 = mock.Mock()
-+            fut.add_done_callback(fut_callback_0, context=fut_context_0)
-+            del fut_context_0
-+            del fut_callback_0
-+            self.assertRaises(ReachableCode, fut.set_result, "boom")
-+
- 
- @unittest.skipUnless(hasattr(futures, '_CFuture'),
-                      'requires the C _asyncio module')
---- a/Lib/test/test_asyncio/test_sslproto.py
-+++ b/Lib/test/test_asyncio/test_sslproto.py
-@@ -109,6 +109,54 @@
-         test_utils.run_briefly(self.loop)
-         self.assertIsInstance(waiter.exception(), ConnectionAbortedError)
- 
-+    def test_connection_lost_when_busy(self):
-+        # gh-118950: SSLProtocol.connection_lost not being called when OSError
-+        # is thrown on asyncio.write.
-+        sock = mock.Mock()
-+        sock.fileno = mock.Mock(return_value=12345)
-+        sock.send = mock.Mock(side_effect=BrokenPipeError)
-+
-+        # construct StreamWriter chain that contains loop dependant logic this emulates
-+        # what _make_ssl_transport() does in BaseSelectorEventLoop
-+        reader = asyncio.StreamReader(limit=2 ** 16, loop=self.loop)
-+        protocol = asyncio.StreamReaderProtocol(reader, loop=self.loop)
-+        ssl_proto = self.ssl_protocol(proto=protocol)
-+
-+        # emulate reading decompressed data
-+        sslobj = mock.Mock()
-+        sslobj.read.side_effect = ssl.SSLWantReadError
-+        sslobj.write.side_effect = ssl.SSLWantReadError
-+        ssl_proto._sslobj = sslobj
-+
-+        # emulate outgoing data
-+        data = b'An interesting message'
-+
-+        outgoing = mock.Mock()
-+        outgoing.read = mock.Mock(return_value=data)
-+        outgoing.pending = len(data)
-+        ssl_proto._outgoing = outgoing
-+
-+        # use correct socket transport to initialize the SSLProtocol
-+        self.loop._make_socket_transport(sock, ssl_proto)
-+
-+        transport = ssl_proto._app_transport
-+        writer = asyncio.StreamWriter(transport, protocol, reader, self.loop)
-+
-+        async def main():
-+            # writes data to transport
-+            async def write():
-+                writer.write(data)
-+                await writer.drain()
-+
-+            # try to write for the first time
-+            await write()
-+            # try to write for the second time, this raises as the connection_lost
-+            # callback should be done with error
-+            with self.assertRaises(ConnectionResetError):
-+                await write()
-+
-+        self.loop.run_until_complete(main())
-+
-     def test_close_during_handshake(self):
-         # bpo-29743 Closing transport during handshake process leaks socket
-         waiter = self.loop.create_future()
---- a/Lib/test/test_asyncio/test_staggered.py
-+++ b/Lib/test/test_asyncio/test_staggered.py
-@@ -95,3 +95,30 @@
-         self.assertEqual(len(excs), 2)
-         self.assertIsInstance(excs[0], ValueError)
-         self.assertIsInstance(excs[1], ValueError)
-+
-+
-+    async def test_multiple_winners(self):
-+        event = asyncio.Event()
-+
-+        async def coro(index):
-+            await event.wait()
-+            return index
-+
-+        async def do_set():
-+            event.set()
-+            await asyncio.Event().wait()
-+
-+        winner, index, excs = await staggered_race(
-+            [
-+                lambda: coro(0),
-+                lambda: coro(1),
-+                do_set,
-+            ],
-+            delay=0.1,
-+        )
-+        self.assertIs(winner, 0)
-+        self.assertIs(index, 0)
-+        self.assertEqual(len(excs), 3)
-+        self.assertIsNone(excs[0], None)
-+        self.assertIsInstance(excs[1], asyncio.CancelledError)
-+        self.assertIsInstance(excs[2], asyncio.CancelledError)
---- a/Lib/test/test_asyncio/test_streams.py
-+++ b/Lib/test/test_asyncio/test_streams.py
-@@ -1166,6 +1166,24 @@
-         messages = self._basetest_unhandled_exceptions(handle_echo)
-         self.assertEqual(messages, [])
- 
-+    def test_open_connection_happy_eyeball_refcycles(self):
-+        port = socket_helper.find_unused_port()
-+        async def main():
-+            exc = None
-+            try:
-+                await asyncio.open_connection(
-+                    host="localhost",
-+                    port=port,
-+                    happy_eyeballs_delay=0.25,
-+                )
-+            except* OSError as excs:
-+                # can't use assertRaises because that clears frames
-+                exc = excs.exceptions[0]
-+            self.assertIsNotNone(exc)
-+            self.assertListEqual(gc.get_referrers(exc), [])
-+
-+        asyncio.run(main())
-+
- 
- if __name__ == '__main__':
-     unittest.main()
---- a/Lib/test/test_asyncio/test_taskgroups.py
-+++ b/Lib/test/test_asyncio/test_taskgroups.py
-@@ -1,7 +1,7 @@
- # Adapted with permission from the EdgeDB project;
- # license: PSFL.
- 
--
-+import gc
- import asyncio
- import contextvars
- import contextlib
-@@ -10,7 +10,6 @@
- 
- from test.test_asyncio.utils import await_without_task
- 
--
- # To prevent a warning "test altered the execution environment"
- def tearDownModule():
-     asyncio.set_event_loop_policy(None)
-@@ -824,6 +823,95 @@
-         # We still have to await coro to avoid a warning
-         await coro
- 
-+    async def test_exception_refcycles_direct(self):
-+        """Test that TaskGroup doesn't keep a reference to the raised ExceptionGroup"""
-+        tg = asyncio.TaskGroup()
-+        exc = None
-+
-+        class _Done(Exception):
-+            pass
-+
-+        try:
-+            async with tg:
-+                raise _Done
-+        except ExceptionGroup as e:
-+            exc = e
-+
-+        self.assertIsNotNone(exc)
-+        self.assertListEqual(gc.get_referrers(exc), [])
-+
-+
-+    async def test_exception_refcycles_errors(self):
-+        """Test that TaskGroup deletes self._errors, and __aexit__ args"""
-+        tg = asyncio.TaskGroup()
-+        exc = None
-+
-+        class _Done(Exception):
-+            pass
-+
-+        try:
-+            async with tg:
-+                raise _Done
-+        except* _Done as excs:
-+            exc = excs.exceptions[0]
-+
-+        self.assertIsInstance(exc, _Done)
-+        self.assertListEqual(gc.get_referrers(exc), [])
-+
-+
-+    async def test_exception_refcycles_parent_task(self):
-+        """Test that TaskGroup deletes self._parent_task"""
-+        tg = asyncio.TaskGroup()
-+        exc = None
-+
-+        class _Done(Exception):
-+            pass
-+
-+        async def coro_fn():
-+            async with tg:
-+                raise _Done
-+
-+        try:
-+            async with asyncio.TaskGroup() as tg2:
-+                tg2.create_task(coro_fn())
-+        except* _Done as excs:
-+            exc = excs.exceptions[0].exceptions[0]
-+
-+        self.assertIsInstance(exc, _Done)
-+        self.assertListEqual(gc.get_referrers(exc), [])
-+
-+    async def test_exception_refcycles_propagate_cancellation_error(self):
-+        """Test that TaskGroup deletes propagate_cancellation_error"""
-+        tg = asyncio.TaskGroup()
-+        exc = None
-+
-+        try:
-+            async with asyncio.timeout(-1):
-+                async with tg:
-+                    await asyncio.sleep(0)
-+        except TimeoutError as e:
-+            exc = e.__cause__
-+
-+        self.assertIsInstance(exc, asyncio.CancelledError)
-+        self.assertListEqual(gc.get_referrers(exc), [])
-+
-+    async def test_exception_refcycles_base_error(self):
-+        """Test that TaskGroup deletes self._base_error"""
-+        class MyKeyboardInterrupt(KeyboardInterrupt):
-+            pass
-+
-+        tg = asyncio.TaskGroup()
-+        exc = None
-+
-+        try:
-+            async with tg:
-+                raise MyKeyboardInterrupt
-+        except MyKeyboardInterrupt as e:
-+            exc = e
-+
-+        self.assertIsNotNone(exc)
-+        self.assertListEqual(gc.get_referrers(exc), [])
-+
- 
- if __name__ == "__main__":
-     unittest.main()
---- a/Lib/test/test_asyncio/test_tasks.py
-+++ b/Lib/test/test_asyncio/test_tasks.py
-@@ -2489,6 +2489,28 @@
-         finally:
-             loop.close()
- 
-+    def test_proper_refcounts(self):
-+        # see: https://github.com/python/cpython/issues/126083
-+        class Break:
-+            def __str__(self):
-+                raise RuntimeError("break")
-+
-+        obj = object()
-+        initial_refcount = sys.getrefcount(obj)
-+
-+        coro = coroutine_function()
-+        loop = asyncio.new_event_loop()
-+        task = asyncio.Task.__new__(asyncio.Task)
-+
-+        for _ in range(5):
-+            with self.assertRaisesRegex(RuntimeError, 'break'):
-+                task.__init__(coro, loop=loop, context=obj, name=Break())
-+
-+        coro.close()
-+        del task
-+
-+        self.assertEqual(sys.getrefcount(obj), initial_refcount)
-+
- 
- def add_subclass_tests(cls):
-     BaseTask = cls.Task
---- a/Lib/test/test_bdb.py
-+++ b/Lib/test/test_bdb.py
-@@ -1203,6 +1203,19 @@
-             with TracerRun(self) as tracer:
-                 tracer.runcall(tfunc_import)
- 
-+    def test_next_to_botframe(self):
-+        # gh-125422
-+        # Check that next command won't go to the bottom frame.
-+        code = """
-+            lno = 2
-+        """
-+        self.expect_set = [
-+            ('line', 2, '<module>'),   ('step', ),
-+            ('return', 2, '<module>'), ('next', ),
-+        ]
-+        with TracerRun(self) as tracer:
-+            tracer.run(compile(textwrap.dedent(code), '<string>', 'exec'))
-+
- 
- class TestRegressions(unittest.TestCase):
-     def test_format_stack_entry_no_lineno(self):
---- a/Lib/test/test_class.py
-+++ b/Lib/test/test_class.py
-@@ -503,6 +503,56 @@
- 
-         self.assertRaises(TypeError, hash, C2())
- 
-+    def testPredefinedAttrs(self):
-+        o = object()
-+
-+        class Custom:
-+            pass
-+
-+        c = Custom()
-+
-+        methods = (
-+            '__class__', '__delattr__', '__dir__', '__eq__', '__format__',
-+            '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__',
-+            '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__',
-+            '__new__', '__reduce__', '__reduce_ex__', '__repr__',
-+            '__setattr__', '__sizeof__', '__str__', '__subclasshook__'
-+        )
-+        for name in methods:
-+            with self.subTest(name):
-+                self.assertTrue(callable(getattr(object, name, None)))
-+                self.assertTrue(callable(getattr(o, name, None)))
-+                self.assertTrue(callable(getattr(Custom, name, None)))
-+                self.assertTrue(callable(getattr(c, name, None)))
-+
-+        not_defined = [
-+            '__abs__', '__aenter__', '__aexit__', '__aiter__', '__anext__',
-+            '__await__', '__bool__', '__bytes__', '__ceil__',
-+            '__complex__', '__contains__', '__del__', '__delete__',
-+            '__delitem__', '__divmod__', '__enter__', '__exit__',
-+            '__float__', '__floor__', '__get__', '__getattr__', '__getitem__',
-+            '__index__', '__int__', '__invert__', '__iter__', '__len__',
-+            '__length_hint__', '__missing__', '__neg__', '__next__',
-+            '__objclass__', '__pos__', '__rdivmod__', '__reversed__',
-+            '__round__', '__set__', '__setitem__', '__trunc__'
-+        ]
-+        augment = (
-+            'add', 'and', 'floordiv', 'lshift', 'matmul', 'mod', 'mul', 'pow',
-+            'rshift', 'sub', 'truediv', 'xor'
-+        )
-+        not_defined.extend(map("__{}__".format, augment))
-+        not_defined.extend(map("__r{}__".format, augment))
-+        not_defined.extend(map("__i{}__".format, augment))
-+        for name in not_defined:
-+            with self.subTest(name):
-+                self.assertFalse(hasattr(object, name))
-+                self.assertFalse(hasattr(o, name))
-+                self.assertFalse(hasattr(Custom, name))
-+                self.assertFalse(hasattr(c, name))
-+
-+        # __call__() is defined on the metaclass but not the class
-+        self.assertFalse(hasattr(o, "__call__"))
-+        self.assertFalse(hasattr(c, "__call__"))
- 
-     def testSFBug532646(self):
-         # Test for SF bug 532646
---- a/Lib/test/test_codecs.py
-+++ b/Lib/test/test_codecs.py
-@@ -2,7 +2,6 @@
- import contextlib
- import copy
- import io
--import locale
- import pickle
- import sys
- import unittest
-@@ -1700,16 +1699,10 @@
-         self.assertRaises(TypeError, codecs.getwriter)
-         self.assertRaises(LookupError, codecs.getwriter, "__spam__")
- 
-+    @support.run_with_locale('LC_CTYPE', 'tr_TR')
-     def test_lookup_issue1813(self):
-         # Issue #1813: under Turkish locales, lookup of some codecs failed
-         # because 'I' is lowercased as "ı" (dotless i)
--        oldlocale = locale.setlocale(locale.LC_CTYPE)
--        self.addCleanup(locale.setlocale, locale.LC_CTYPE, oldlocale)
--        try:
--            locale.setlocale(locale.LC_CTYPE, 'tr_TR')
--        except locale.Error:
--            # Unsupported locale on this system
--            self.skipTest('test needs Turkish locale')
-         c = codecs.lookup('ASCII')
-         self.assertEqual(c.name, 'ascii')
- 
---- a/Lib/test/test_cprofile.py
-+++ b/Lib/test/test_cprofile.py
-@@ -30,6 +30,22 @@
- 
-             self.assertEqual(cm.unraisable.exc_type, TypeError)
- 
-+    def test_crash_with_not_enough_args(self):
-+        # gh-126220
-+        import _lsprof
-+
-+        for profile in [_lsprof.Profiler(), cProfile.Profile()]:
-+            for method in [
-+                "_pystart_callback",
-+                "_pyreturn_callback",
-+                "_ccall_callback",
-+                "_creturn_callback",
-+            ]:
-+                with self.subTest(profile=profile, method=method):
-+                    method_obj = getattr(profile, method)
-+                    with self.assertRaises(TypeError):
-+                        method_obj()  # should not crash
-+
-     def test_evil_external_timer(self):
-         # gh-120289
-         # Disabling profiler in external timer should not crash
---- a/Lib/test/test_csv.py
-+++ b/Lib/test/test_csv.py
-@@ -1071,6 +1071,12 @@
-         mydialect.quoting = None
-         self.assertRaises(csv.Error, mydialect)
- 
-+        mydialect.quoting = 42
-+        with self.assertRaises(csv.Error) as cm:
-+            mydialect()
-+        self.assertEqual(str(cm.exception),
-+                         'bad "quoting" value')
-+
-         mydialect.doublequote = True
-         mydialect.quoting = csv.QUOTE_ALL
-         mydialect.quotechar = '"'
---- /dev/null
-+++ b/Lib/test/test_ctypes/_support.py
-@@ -0,0 +1,24 @@
-+# Some classes and types are not export to _ctypes module directly.
-+
-+import ctypes
-+from _ctypes import Structure, Union, _Pointer, Array, _SimpleCData, CFuncPtr
-+
-+
-+_CData = Structure.__base__
-+assert _CData.__name__ == "_CData"
-+
-+class _X(Structure):
-+    _fields_ = [("x", ctypes.c_int)]
-+CField = type(_X.x)
-+
-+# metaclasses
-+PyCStructType = type(Structure)
-+UnionType = type(Union)
-+PyCPointerType = type(_Pointer)
-+PyCArrayType = type(Array)
-+PyCSimpleType = type(_SimpleCData)
-+PyCFuncPtrType = type(CFuncPtr)
-+
-+# type flags
-+Py_TPFLAGS_DISALLOW_INSTANTIATION = 1 << 7
-+Py_TPFLAGS_IMMUTABLETYPE = 1 << 8
---- /dev/null
-+++ b/Lib/test/test_ctypes/test_c_simple_type_meta.py
-@@ -0,0 +1,87 @@
-+import unittest
-+import ctypes
-+from ctypes import POINTER, c_void_p
-+
-+from ._support import PyCSimpleType
-+
-+
-+class PyCSimpleTypeAsMetaclassTest(unittest.TestCase):
-+    def tearDown(self):
-+        # to not leak references, we must clean _pointer_type_cache
-+        ctypes._reset_cache()
-+
-+    def test_creating_pointer_in_dunder_new_1(self):
-+        # Test metaclass whose instances are C types; when the type is
-+        # created it automatically creates a pointer type for itself.
-+        # The pointer type is also an instance of the metaclass.
-+        # Such an implementation is used in `IUnknown` of the `comtypes`
-+        # project. See gh-124520.
-+
-+        class ct_meta(type):
-+            def __new__(cls, name, bases, namespace):
-+                self = super().__new__(cls, name, bases, namespace)
-+
-+                # Avoid recursion: don't set up a pointer to
-+                # a pointer (to a pointer...)
-+                if bases == (c_void_p,):
-+                    # When creating PtrBase itself, the name
-+                    # is not yet available
-+                    return self
-+                if issubclass(self, PtrBase):
-+                    return self
-+
-+                if bases == (object,):
-+                    ptr_bases = (self, PtrBase)
-+                else:
-+                    ptr_bases = (self, POINTER(bases[0]))
-+                p = p_meta(f"POINTER({self.__name__})", ptr_bases, {})
-+                ctypes._pointer_type_cache[self] = p
-+                return self
-+
-+        class p_meta(PyCSimpleType, ct_meta):
-+            pass
-+
-+        class PtrBase(c_void_p, metaclass=p_meta):
-+            pass
-+
-+        class CtBase(object, metaclass=ct_meta):
-+            pass
-+
-+        class Sub(CtBase):
-+            pass
-+
-+        class Sub2(Sub):
-+            pass
-+
-+        self.assertIsInstance(POINTER(Sub2), p_meta)
-+        self.assertTrue(issubclass(POINTER(Sub2), Sub2))
-+        self.assertTrue(issubclass(POINTER(Sub2), POINTER(Sub)))
-+        self.assertTrue(issubclass(POINTER(Sub), POINTER(CtBase)))
-+
-+    def test_creating_pointer_in_dunder_new_2(self):
-+        # A simpler variant of the above, used in `CoClass` of the `comtypes`
-+        # project.
-+
-+        class ct_meta(type):
-+            def __new__(cls, name, bases, namespace):
-+                self = super().__new__(cls, name, bases, namespace)
-+                if isinstance(self, p_meta):
-+                    return self
-+                p = p_meta(f"POINTER({self.__name__})", (self, c_void_p), {})
-+                ctypes._pointer_type_cache[self] = p
-+                return self
-+
-+        class p_meta(PyCSimpleType, ct_meta):
-+            pass
-+
-+        class Core(object):
-+            pass
-+
-+        class CtBase(Core, metaclass=ct_meta):
-+            pass
-+
-+        class Sub(CtBase):
-+            pass
-+
-+        self.assertIsInstance(POINTER(Sub), p_meta)
-+        self.assertTrue(issubclass(POINTER(Sub), Sub))
---- a/Lib/test/test_curses.py
-+++ b/Lib/test/test_curses.py
-@@ -1081,6 +1081,14 @@
-         self.assertEqual(curses.LINES, lines)
-         self.assertEqual(curses.COLS, cols)
- 
-+        with self.assertRaises(OverflowError):
-+            curses.resize_term(35000, 1)
-+        with self.assertRaises(OverflowError):
-+            curses.resize_term(1, 35000)
-+        # GH-120378: Overflow failure in resize_term() causes refresh to fail
-+        tmp = curses.initscr()
-+        tmp.erase()
-+
-     @requires_curses_func('resizeterm')
-     def test_resizeterm(self):
-         curses.update_lines_cols()
-@@ -1095,6 +1103,14 @@
-         self.assertEqual(curses.LINES, lines)
-         self.assertEqual(curses.COLS, cols)
- 
-+        with self.assertRaises(OverflowError):
-+            curses.resizeterm(35000, 1)
-+        with self.assertRaises(OverflowError):
-+            curses.resizeterm(1, 35000)
-+        # GH-120378: Overflow failure in resizeterm() causes refresh to fail
-+        tmp = curses.initscr()
-+        tmp.erase()
-+
-     def test_ungetch(self):
-         curses.ungetch(b'A')
-         self.assertEqual(self.stdscr.getkey(), 'A')
---- a/Lib/test/test_decimal.py
-+++ b/Lib/test/test_decimal.py
-@@ -1242,7 +1242,7 @@
-         self.assertEqual(get_fmt(Decimal('-1.5'), dotsep_wide, '020n'),
-                          '-0\u00b4000\u00b4000\u00b4000\u00b4001\u00bf5')
- 
--    @run_with_locale('LC_ALL', 'ps_AF')
-+    @run_with_locale('LC_ALL', 'ps_AF', '')
-     def test_wide_char_separator_decimal_point(self):
-         # locale with wide char separator and decimal point
-         Decimal = self.decimal.Decimal
---- a/Lib/test/test_enum.py
-+++ b/Lib/test/test_enum.py
-@@ -1852,6 +1852,25 @@
-             class Wrong(Enum, str):
-                 NotHere = 'error before this point'
- 
-+    def test_raise_custom_error_on_creation(self):
-+        class InvalidRgbColorError(ValueError):
-+            def __init__(self, r, g, b):
-+                self.r = r
-+                self.g = g
-+                self.b = b
-+                super().__init__(f'({r}, {g}, {b}) is not a valid RGB color')
-+
-+        with self.assertRaises(InvalidRgbColorError):
-+            class RgbColor(Enum):
-+                RED = (255, 0, 0)
-+                GREEN = (0, 255, 0)
-+                BLUE = (0, 0, 255)
-+                INVALID = (256, 0, 0)
-+
-+                def __init__(self, r, g, b):
-+                    if not all(0 <= val <= 255 for val in (r, g, b)):
-+                        raise InvalidRgbColorError(r, g, b)
-+
-     def test_intenum_transitivity(self):
-         class number(IntEnum):
-             one = 1
---- a/Lib/test/test_exceptions.py
-+++ b/Lib/test/test_exceptions.py
-@@ -8,6 +8,7 @@
- import weakref
- import errno
- from codecs import BOM_UTF8
-+from itertools import product
- from textwrap import dedent
- 
- from test.support import (captured_stderr, check_impl_detail,
-@@ -315,8 +316,8 @@
-         check('def f():\n  global x\n  nonlocal x', 2, 3)
- 
-         # Errors thrown by future.c
--        check('from __future__ import doesnt_exist', 1, 1)
--        check('from __future__ import braces', 1, 1)
-+        check('from __future__ import doesnt_exist', 1, 24)
-+        check('from __future__ import braces', 1, 24)
-         check('x=1\nfrom __future__ import division', 2, 1)
-         check('foo(1=2)', 1, 5)
-         check('def f():\n  x, y: int', 2, 3)
-@@ -1333,6 +1334,29 @@
-         for klass in klasses:
-             self.assertEqual(str(klass.__new__(klass)), "")
- 
-+    def test_unicode_error_str_does_not_crash(self):
-+        # Test that str(UnicodeError(...)) does not crash.
-+        # See https://github.com/python/cpython/issues/123378.
-+
-+        for start, end, objlen in product(
-+            range(-5, 5),
-+            range(-5, 5),
-+            range(7),
-+        ):
-+            obj = 'a' * objlen
-+            with self.subTest('encode', objlen=objlen, start=start, end=end):
-+                exc = UnicodeEncodeError('utf-8', obj, start, end, '')
-+                self.assertIsInstance(str(exc), str)
-+
-+            with self.subTest('translate', objlen=objlen, start=start, end=end):
-+                exc = UnicodeTranslateError(obj, start, end, '')
-+                self.assertIsInstance(str(exc), str)
-+
-+            encoded = obj.encode()
-+            with self.subTest('decode', objlen=objlen, start=start, end=end):
-+                exc = UnicodeDecodeError('utf-8', encoded, start, end, '')
-+                self.assertIsInstance(str(exc), str)
-+
-     @no_tracing
-     def test_badisinstance(self):
-         # Bug #2542: if issubclass(e, MyException) raises an exception,
---- a/Lib/test/test_float.py
-+++ b/Lib/test/test_float.py
-@@ -153,7 +153,7 @@
-         # non-UTF-8 byte string
-         check(b'123\xa0')
- 
--    @support.run_with_locale('LC_NUMERIC', 'fr_FR', 'de_DE')
-+    @support.run_with_locale('LC_NUMERIC', 'fr_FR', 'de_DE', '')
-     def test_float_with_comma(self):
-         # set locale to something that doesn't use '.' for the decimal point
-         # float must not accept the locale specific decimal point but
---- a/Lib/test/test_funcattrs.py
-+++ b/Lib/test/test_funcattrs.py
-@@ -76,7 +76,12 @@
-                              (AttributeError, TypeError))
- 
-     def test___builtins__(self):
--        self.assertIs(self.b.__builtins__, __builtins__)
-+        if __name__ == "__main__":
-+            builtins_dict = __builtins__.__dict__
-+        else:
-+            builtins_dict = __builtins__
-+
-+        self.assertIs(self.b.__builtins__, builtins_dict)
-         self.cannot_set_attr(self.b, '__builtins__', 2,
-                              (AttributeError, TypeError))
- 
-@@ -86,7 +91,7 @@
-         ns = {}
-         func2 = type(func)(func.__code__, ns)
-         self.assertIs(func2.__globals__, ns)
--        self.assertIs(func2.__builtins__, __builtins__)
-+        self.assertIs(func2.__builtins__, builtins_dict)
- 
-         # Make sure that the function actually works.
-         self.assertEqual(func2("abc"), 3)
---- a/Lib/test/test_future_stmt/test_future.py
-+++ b/Lib/test/test_future_stmt/test_future.py
-@@ -55,7 +55,7 @@
-     def test_badfuture3(self):
-         with self.assertRaises(SyntaxError) as cm:
-             from test.test_future_stmt import badsyntax_future3
--        self.check_syntax_error(cm.exception, "badsyntax_future3", 3)
-+        self.check_syntax_error(cm.exception, "badsyntax_future3", 3, 24)
- 
-     def test_badfuture4(self):
-         with self.assertRaises(SyntaxError) as cm:
-@@ -80,12 +80,12 @@
-     def test_badfuture8(self):
-         with self.assertRaises(SyntaxError) as cm:
-             from test.test_future_stmt import badsyntax_future8
--        self.check_syntax_error(cm.exception, "badsyntax_future8", 3)
-+        self.check_syntax_error(cm.exception, "badsyntax_future8", 3, 24)
- 
-     def test_badfuture9(self):
-         with self.assertRaises(SyntaxError) as cm:
-             from test.test_future_stmt import badsyntax_future9
--        self.check_syntax_error(cm.exception, "badsyntax_future9", 3)
-+        self.check_syntax_error(cm.exception, "badsyntax_future9", 3, 39)
- 
-     def test_badfuture10(self):
-         with self.assertRaises(SyntaxError) as cm:
---- a/Lib/test/test_genericpath.py
-+++ b/Lib/test/test_genericpath.py
-@@ -158,6 +158,11 @@
-             self.assertIs(self.pathmodule.lexists(filename + '\x00'), False)
-             self.assertIs(self.pathmodule.lexists(bfilename + b'\x00'), False)
- 
-+        # Keyword arguments are accepted
-+        self.assertIs(self.pathmodule.exists(path=filename), True)
-+        if self.pathmodule is not genericpath:
-+            self.assertIs(self.pathmodule.lexists(path=filename), True)
-+
-     @unittest.skipUnless(hasattr(os, "pipe"), "requires os.pipe()")
-     @unittest.skipIf(is_emscripten, "Emscripten pipe fds have no stat")
-     def test_exists_fd(self):
---- a/Lib/test/test_imaplib.py
-+++ b/Lib/test/test_imaplib.py
-@@ -57,7 +57,7 @@
-                                        timezone(timedelta(0, 2 * 60 * 60))),
-                 '"18-May-2033 05:33:20 +0200"']
- 
--    @run_with_locale('LC_ALL', 'de_DE', 'fr_FR')
-+    @run_with_locale('LC_ALL', 'de_DE', 'fr_FR', '')
-     # DST rules included to work around quirk where the Gnu C library may not
-     # otherwise restore the previous time zone
-     @run_with_tz('STD-1DST,M3.2.0,M11.1.0')
---- a/Lib/test/test_importlib/test_api.py
-+++ b/Lib/test/test_importlib/test_api.py
-@@ -8,6 +8,8 @@
- import sys
- from test.support import import_helper
- from test.support import os_helper
-+from test import support
-+import traceback
- import types
- import unittest
- import warnings
-@@ -354,6 +356,20 @@
-             with self.assertRaises(ModuleNotFoundError):
-                 self.init.reload(module)
- 
-+    def test_reload_traceback_with_non_str(self):
-+        # gh-125519
-+        with support.captured_stdout() as stdout:
-+            try:
-+                self.init.reload("typing")
-+            except TypeError as exc:
-+                traceback.print_exception(exc, file=stdout)
-+            else:
-+                self.fail("Expected TypeError to be raised")
-+        printed_traceback = stdout.getvalue()
-+        self.assertIn("TypeError", printed_traceback)
-+        self.assertNotIn("AttributeError", printed_traceback)
-+        self.assertNotIn("module.__spec__.name", printed_traceback)
-+
- 
- (Frozen_ReloadTests,
-  Source_ReloadTests
---- a/Lib/test/test_itertools.py
-+++ b/Lib/test/test_itertools.py
-@@ -1612,10 +1612,11 @@
-             self.assertEqual(len(result), n)
-             self.assertEqual([list(x) for x in result], [list('abc')]*n)
- 
--        # tee pass-through to copyable iterator
-+        # tee objects are independent (see bug gh-123884)
-         a, b = tee('abc')
-         c, d = tee(a)
--        self.assertTrue(a is c)
-+        e, f = tee(c)
-+        self.assertTrue(len({a, b, c, d, e, f}) == 6)
- 
-         # test tee_new
-         t1, t2 = tee('abc')
-@@ -2029,6 +2030,172 @@
-         self.assertEqual(next(c), 3)
- 
- 
-+    def test_tee_recipe(self):
-+
-+        # Begin tee() recipe ###########################################
-+
-+        def tee(iterable, n=2):
-+            if n < 0:
-+                raise ValueError
-+            if n == 0:
-+                return ()
-+            iterator = _tee(iterable)
-+            result = [iterator]
-+            for _ in range(n - 1):
-+                result.append(_tee(iterator))
-+            return tuple(result)
-+
-+        class _tee:
-+
-+            def __init__(self, iterable):
-+                it = iter(iterable)
-+                if isinstance(it, _tee):
-+                    self.iterator = it.iterator
-+                    self.link = it.link
-+                else:
-+                    self.iterator = it
-+                    self.link = [None, None]
-+
-+            def __iter__(self):
-+                return self
-+
-+            def __next__(self):
-+                link = self.link
-+                if link[1] is None:
-+                    link[0] = next(self.iterator)
-+                    link[1] = [None, None]
-+                value, self.link = link
-+                return value
-+
-+        # End tee() recipe #############################################
-+
-+        n = 200
-+
-+        a, b = tee([])        # test empty iterator
-+        self.assertEqual(list(a), [])
-+        self.assertEqual(list(b), [])
-+
-+        a, b = tee(irange(n)) # test 100% interleaved
-+        self.assertEqual(lzip(a,b), lzip(range(n), range(n)))
-+
-+        a, b = tee(irange(n)) # test 0% interleaved
-+        self.assertEqual(list(a), list(range(n)))
-+        self.assertEqual(list(b), list(range(n)))
-+
-+        a, b = tee(irange(n)) # test dealloc of leading iterator
-+        for i in range(100):
-+            self.assertEqual(next(a), i)
-+        del a
-+        self.assertEqual(list(b), list(range(n)))
-+
-+        a, b = tee(irange(n)) # test dealloc of trailing iterator
-+        for i in range(100):
-+            self.assertEqual(next(a), i)
-+        del b
-+        self.assertEqual(list(a), list(range(100, n)))
-+
-+        for j in range(5):   # test randomly interleaved
-+            order = [0]*n + [1]*n
-+            random.shuffle(order)
-+            lists = ([], [])
-+            its = tee(irange(n))
-+            for i in order:
-+                value = next(its[i])
-+                lists[i].append(value)
-+            self.assertEqual(lists[0], list(range(n)))
-+            self.assertEqual(lists[1], list(range(n)))
-+
-+        # test argument format checking
-+        self.assertRaises(TypeError, tee)
-+        self.assertRaises(TypeError, tee, 3)
-+        self.assertRaises(TypeError, tee, [1,2], 'x')
-+        self.assertRaises(TypeError, tee, [1,2], 3, 'x')
-+
-+        # tee object should be instantiable
-+        a, b = tee('abc')
-+        c = type(a)('def')
-+        self.assertEqual(list(c), list('def'))
-+
-+        # test long-lagged and multi-way split
-+        a, b, c = tee(range(2000), 3)
-+        for i in range(100):
-+            self.assertEqual(next(a), i)
-+        self.assertEqual(list(b), list(range(2000)))
-+        self.assertEqual([next(c), next(c)], list(range(2)))
-+        self.assertEqual(list(a), list(range(100,2000)))
-+        self.assertEqual(list(c), list(range(2,2000)))
-+
-+        # test invalid values of n
-+        self.assertRaises(TypeError, tee, 'abc', 'invalid')
-+        self.assertRaises(ValueError, tee, [], -1)
-+
-+        for n in range(5):
-+            result = tee('abc', n)
-+            self.assertEqual(type(result), tuple)
-+            self.assertEqual(len(result), n)
-+            self.assertEqual([list(x) for x in result], [list('abc')]*n)
-+
-+        # tee objects are independent (see bug gh-123884)
-+        a, b = tee('abc')
-+        c, d = tee(a)
-+        e, f = tee(c)
-+        self.assertTrue(len({a, b, c, d, e, f}) == 6)
-+
-+        # test tee_new
-+        t1, t2 = tee('abc')
-+        tnew = type(t1)
-+        self.assertRaises(TypeError, tnew)
-+        self.assertRaises(TypeError, tnew, 10)
-+        t3 = tnew(t1)
-+        self.assertTrue(list(t1) == list(t2) == list(t3) == list('abc'))
-+
-+        # test that tee objects are weak referencable
-+        a, b = tee(range(10))
-+        p = weakref.proxy(a)
-+        self.assertEqual(getattr(p, '__class__'), type(b))
-+        del a
-+        gc.collect()  # For PyPy or other GCs.
-+        self.assertRaises(ReferenceError, getattr, p, '__class__')
-+
-+        ans = list('abc')
-+        long_ans = list(range(10000))
-+
-+        # Tests not applicable to the tee() recipe
-+        if False:
-+            # check copy
-+            a, b = tee('abc')
-+            self.assertEqual(list(copy.copy(a)), ans)
-+            self.assertEqual(list(copy.copy(b)), ans)
-+            a, b = tee(list(range(10000)))
-+            self.assertEqual(list(copy.copy(a)), long_ans)
-+            self.assertEqual(list(copy.copy(b)), long_ans)
-+
-+            # check partially consumed copy
-+            a, b = tee('abc')
-+            take(2, a)
-+            take(1, b)
-+            self.assertEqual(list(copy.copy(a)), ans[2:])
-+            self.assertEqual(list(copy.copy(b)), ans[1:])
-+            self.assertEqual(list(a), ans[2:])
-+            self.assertEqual(list(b), ans[1:])
-+            a, b = tee(range(10000))
-+            take(100, a)
-+            take(60, b)
-+            self.assertEqual(list(copy.copy(a)), long_ans[100:])
-+            self.assertEqual(list(copy.copy(b)), long_ans[60:])
-+            self.assertEqual(list(a), long_ans[100:])
-+            self.assertEqual(list(b), long_ans[60:])
-+
-+        # Issue 13454: Crash when deleting backward iterator from tee()
-+        forward, backward = tee(repeat(None, 2000)) # 20000000
-+        try:
-+            any(forward)  # exhaust the iterator
-+            del backward
-+        except:
-+            del forward, backward
-+            raise
-+
-+
- class TestGC(unittest.TestCase):
- 
-     def makecycle(self, iterator, container):
---- a/Lib/test/test_json/test_decode.py
-+++ b/Lib/test/test_json/test_decode.py
-@@ -16,6 +16,12 @@
-         self.assertIsInstance(rval, float)
-         self.assertEqual(rval, 1.0)
- 
-+    def test_nonascii_digits_rejected(self):
-+        # JSON specifies only ascii digits, see gh-125687
-+        for num in ["1\uff10", "0.\uff10", "0e\uff10"]:
-+            with self.assertRaises(self.JSONDecodeError):
-+                self.loads(num)
-+
-     def test_bytes(self):
-         self.assertEqual(self.loads(b"1"), 1)
- 
---- a/Lib/test/test_json/test_scanstring.py
-+++ b/Lib/test/test_json/test_scanstring.py
-@@ -116,6 +116,11 @@
-             '"\\u012z"',
-             '"\\u0x12"',
-             '"\\u0X12"',
-+            '"\\u{0}"'.format("\uff10" * 4),
-+            '"\\u 123"',
-+            '"\\u-123"',
-+            '"\\u+123"',
-+            '"\\u1_23"',
-             '"\\ud834\\"',
-             '"\\ud834\\u"',
-             '"\\ud834\\ud"',
-@@ -127,6 +132,11 @@
-             '"\\ud834\\udd2z"',
-             '"\\ud834\\u0x20"',
-             '"\\ud834\\u0X20"',
-+            '"\\ud834\\u{0}"'.format("\uff10" * 4),
-+            '"\\ud834\\u 123"',
-+            '"\\ud834\\u-123"',
-+            '"\\ud834\\u+123"',
-+            '"\\ud834\\u1_23"',
-         ]
-         for s in bad_escapes:
-             with self.assertRaises(self.JSONDecodeError, msg=s):
---- a/Lib/test/test_logging.py
-+++ b/Lib/test/test_logging.py
-@@ -2391,16 +2391,22 @@
-         return getattr(queue, attribute)
- 
- class CustomQueueFakeProtocol(CustomQueueProtocol):
--    # An object implementing the Queue API (incorrect signatures).
-+    # An object implementing the minimial Queue API for
-+    # the logging module but with incorrect signatures.
-+    #
-     # The object will be considered a valid queue class since we
-     # do not check the signatures (only callability of methods)
-     # but will NOT be usable in production since a TypeError will
--    # be raised due to a missing argument.
--    def empty(self, x):
-+    # be raised due to the extra argument in 'put_nowait'.
-+    def put_nowait(self):
-         pass
- 
- class CustomQueueWrongProtocol(CustomQueueProtocol):
--    empty = None
-+    put_nowait = None
-+
-+class MinimalQueueProtocol:
-+    def put_nowait(self, x): pass
-+    def get(self): pass
- 
- def queueMaker():
-     return queue.Queue()
-@@ -3914,56 +3920,70 @@
-             msg = str(ctx.exception)
-             self.assertEqual(msg, "Unable to configure handler 'ah'")
- 
-+    def _apply_simple_queue_listener_configuration(self, qspec):
-+        self.apply_config({
-+            "version": 1,
-+            "handlers": {
-+                "queue_listener": {
-+                    "class": "logging.handlers.QueueHandler",
-+                    "queue": qspec,
-+                },
-+            },
-+        })
-+
-     @threading_helper.requires_working_threading()
-     @support.requires_subprocess()
-     @patch("multiprocessing.Manager")
-     def test_config_queue_handler_does_not_create_multiprocessing_manager(self, manager):
--        # gh-120868, gh-121723
-+        # gh-120868, gh-121723, gh-124653
- 
--        from multiprocessing import Queue as MQ
--
--        q1 = {"()": "queue.Queue", "maxsize": -1}
--        q2 = MQ()
--        q3 = queue.Queue()
--        # CustomQueueFakeProtocol passes the checks but will not be usable
--        # since the signatures are incompatible. Checking the Queue API
--        # without testing the type of the actual queue is a trade-off
--        # between usability and the work we need to do in order to safely
--        # check that the queue object correctly implements the API.
--        q4 = CustomQueueFakeProtocol()
--
--        for qspec in (q1, q2, q3, q4):
--            self.apply_config(
--                {
--                    "version": 1,
--                    "handlers": {
--                        "queue_listener": {
--                            "class": "logging.handlers.QueueHandler",
--                            "queue": qspec,
--                        },
--                    },
--                }
--            )
--            manager.assert_not_called()
-+        for qspec in [
-+            {"()": "queue.Queue", "maxsize": -1},
-+            queue.Queue(),
-+            # queue.SimpleQueue does not inherit from queue.Queue
-+            queue.SimpleQueue(),
-+            # CustomQueueFakeProtocol passes the checks but will not be usable
-+            # since the signatures are incompatible. Checking the Queue API
-+            # without testing the type of the actual queue is a trade-off
-+            # between usability and the work we need to do in order to safely
-+            # check that the queue object correctly implements the API.
-+            CustomQueueFakeProtocol(),
-+            MinimalQueueProtocol(),
-+        ]:
-+            with self.subTest(qspec=qspec):
-+                self._apply_simple_queue_listener_configuration(qspec)
-+                manager.assert_not_called()
- 
-     @patch("multiprocessing.Manager")
-     def test_config_queue_handler_invalid_config_does_not_create_multiprocessing_manager(self, manager):
-         # gh-120868, gh-121723
- 
-         for qspec in [object(), CustomQueueWrongProtocol()]:
--            with self.assertRaises(ValueError):
--                self.apply_config(
--                    {
--                        "version": 1,
--                        "handlers": {
--                            "queue_listener": {
--                                "class": "logging.handlers.QueueHandler",
--                                "queue": qspec,
--                            },
--                        },
--                    }
--                )
--            manager.assert_not_called()
-+            with self.subTest(qspec=qspec), self.assertRaises(ValueError):
-+                self._apply_simple_queue_listener_configuration(qspec)
-+                manager.assert_not_called()
-+
-+    @skip_if_tsan_fork
-+    @support.requires_subprocess()
-+    @unittest.skipUnless(support.Py_DEBUG, "requires a debug build for testing"
-+                                           " assertions in multiprocessing")
-+    def test_config_reject_simple_queue_handler_multiprocessing_context(self):
-+        # multiprocessing.SimpleQueue does not implement 'put_nowait'
-+        # and thus cannot be used as a queue-like object (gh-124653)
-+
-+        import multiprocessing
-+
-+        if support.MS_WINDOWS:
-+            start_methods = ['spawn']
-+        else:
-+            start_methods = ['spawn', 'fork', 'forkserver']
-+
-+        for start_method in start_methods:
-+            with self.subTest(start_method=start_method):
-+                ctx = multiprocessing.get_context(start_method)
-+                qspec = ctx.SimpleQueue()
-+                with self.assertRaises(ValueError):
-+                    self._apply_simple_queue_listener_configuration(qspec)
- 
-     @skip_if_tsan_fork
-     @support.requires_subprocess()
---- a/Lib/test/test_math.py
-+++ b/Lib/test/test_math.py
-@@ -1886,7 +1886,7 @@
-         try:
-             self.assertTrue(math.isnan(math.tan(INF)))
-             self.assertTrue(math.isnan(math.tan(NINF)))
--        except:
-+        except ValueError:
-             self.assertRaises(ValueError, math.tan, INF)
-             self.assertRaises(ValueError, math.tan, NINF)
-         self.assertTrue(math.isnan(math.tan(NAN)))
---- a/Lib/test/test_pathlib.py
-+++ b/Lib/test/test_pathlib.py
-@@ -831,6 +831,14 @@
-             ],
-     })
- 
-+    def test_constructor_nested_foreign_flavour(self):
-+        # See GH-125069.
-+        p1 = pathlib.PurePosixPath('b/c:\\d')
-+        p2 = pathlib.PurePosixPath('b/', 'c:\\d')
-+        self.assertEqual(p1, p2)
-+        self.assertEqual(self.cls(p1), self.cls('b/c:/d'))
-+        self.assertEqual(self.cls(p2), self.cls('b/c:/d'))
-+
-     def test_drive_root_parts(self):
-         check = self._check_drive_root_parts
-         # First part is anchored.
---- a/Lib/test/test_pdb.py
-+++ b/Lib/test/test_pdb.py
-@@ -352,6 +352,42 @@
-     4
-     """
- 
-+def test_pdb_breakpoint_on_annotated_function_def():
-+    """Test breakpoints on function definitions with annotation.
-+
-+    >>> def foo[T]():
-+    ...     return 0
-+
-+    >>> def bar() -> int:
-+    ...     return 0
-+
-+    >>> def foobar[T]() -> int:
-+    ...     return 0
-+
-+    >>> reset_Breakpoint()
-+
-+    >>> def test_function():
-+    ...     import pdb; pdb.Pdb(nosigint=True, readrc=False).set_trace()
-+    ...     pass
-+
-+    >>> with PdbTestInput([  # doctest: +NORMALIZE_WHITESPACE
-+    ...     'break foo',
-+    ...     'break bar',
-+    ...     'break foobar',
-+    ...     'continue',
-+    ... ]):
-+    ...    test_function()
-+    > <doctest test.test_pdb.test_pdb_breakpoint_on_annotated_function_def[4]>(3)test_function()
-+    -> pass
-+    (Pdb) break foo
-+    Breakpoint 1 at <doctest test.test_pdb.test_pdb_breakpoint_on_annotated_function_def[0]>:1
-+    (Pdb) break bar
-+    Breakpoint 2 at <doctest test.test_pdb.test_pdb_breakpoint_on_annotated_function_def[1]>:1
-+    (Pdb) break foobar
-+    Breakpoint 3 at <doctest test.test_pdb.test_pdb_breakpoint_on_annotated_function_def[2]>:1
-+    (Pdb) continue
-+    """
-+
- def test_pdb_breakpoints_preserved_across_interactive_sessions():
-     """Breakpoints are remembered between interactive sessions
- 
-@@ -2283,6 +2319,20 @@
-         self.assertRegex(res, "Restarting .* with arguments:\na b c")
-         self.assertRegex(res, "Restarting .* with arguments:\nd e f")
- 
-+    def test_step_into_botframe(self):
-+        # gh-125422
-+        # pdb should not be able to step into the botframe (bdb.py)
-+        script = "x = 1"
-+        commands = """
-+            step
-+            step
-+            step
-+            quit
-+        """
-+        stdout, _ = self.run_pdb_script(script, commands)
-+        self.assertIn("The program finished", stdout)
-+        self.assertNotIn("bdb.py", stdout)
-+
-     def test_pdbrc_basic(self):
-         script = textwrap.dedent("""
-             a = 1
-@@ -2740,6 +2790,16 @@
-         # verify that pdb found the source of the "frozen" function
-         self.assertIn('x = "Sentinel string for gh-93696"', stdout, "Sentinel statement not found")
- 
-+    def test_empty_file(self):
-+        script = ''
-+        commands = 'q\n'
-+        # We check that pdb stopped at line 0, but anything reasonable
-+        # is acceptable here, as long as it does not halt
-+        stdout, _ = self.run_pdb_script(script, commands)
-+        self.assertIn('main.py(0)', stdout)
-+        stdout, _ = self.run_pdb_module(script, commands)
-+        self.assertIn('__main__.py(0)', stdout)
-+
-     def test_non_utf8_encoding(self):
-         script_dir = os.path.join(os.path.dirname(__file__), 'encoded_modules')
-         for filename in os.listdir(script_dir):
---- a/Lib/test/test_repl.py
-+++ b/Lib/test/test_repl.py
-@@ -146,5 +146,42 @@
-         self.assertEqual(traceback_lines, expected_lines)
- 
- 
-+class TestAsyncioREPLContextVars(unittest.TestCase):
-+    def test_toplevel_contextvars_sync(self):
-+        user_input = dedent("""\
-+        from contextvars import ContextVar
-+        var = ContextVar("var", default="failed")
-+        var.set("ok")
-+        """)
-+        p = spawn_repl("-m", "asyncio")
-+        p.stdin.write(user_input)
-+        user_input2 = dedent("""
-+        print(f"toplevel contextvar test: {var.get()}")
-+        """)
-+        p.stdin.write(user_input2)
-+        output = kill_python(p)
-+        self.assertEqual(p.returncode, 0)
-+        expected = "toplevel contextvar test: ok"
-+        self.assertIn(expected, output, expected)
-+
-+    def test_toplevel_contextvars_async(self):
-+        user_input = dedent("""\
-+        from contextvars import ContextVar
-+        var = ContextVar('var', default='failed')
-+        """)
-+        p = spawn_repl("-m", "asyncio")
-+        p.stdin.write(user_input+"\n")
-+        user_input2 = "async def set_var(): var.set('ok')\n"
-+        p.stdin.write(user_input2+"\n")
-+        user_input3 = "await set_var()\n"
-+        p.stdin.write(user_input3+"\n")
-+        user_input4 = "print(f'toplevel contextvar test: {var.get()}')\n"
-+        p.stdin.write(user_input4+"\n")
-+        output = kill_python(p)
-+        self.assertEqual(p.returncode, 0)
-+        expected = "toplevel contextvar test: ok"
-+        self.assertIn(expected, output, expected)
-+
-+
- if __name__ == "__main__":
-     unittest.main()
---- a/Lib/test/test_reprlib.py
-+++ b/Lib/test/test_reprlib.py
-@@ -580,6 +580,50 @@
-                 with self.assertRaisesRegex(expected_error, expected_msg):
-                     r.repr(test_object)
- 
-+    def test_shadowed_stdlib_array(self):
-+        # Issue #113570: repr() should not be fooled by an array
-+        class array:
-+            def __repr__(self):
-+                return "not array.array"
-+
-+        self.assertEqual(r(array()), "not array.array")
-+
-+    def test_shadowed_builtin(self):
-+        # Issue #113570: repr() should not be fooled
-+        # by a shadowed builtin function
-+        class list:
-+            def __repr__(self):
-+                return "not builtins.list"
-+
-+        self.assertEqual(r(list()), "not builtins.list")
-+
-+    def test_custom_repr(self):
-+        class MyRepr(Repr):
-+
-+            def repr_TextIOWrapper(self, obj, level):
-+                if obj.name in {'<stdin>', '<stdout>', '<stderr>'}:
-+                    return obj.name
-+                return repr(obj)
-+
-+        aRepr = MyRepr()
-+        self.assertEqual(aRepr.repr(sys.stdin), "<stdin>")
-+
-+    def test_custom_repr_class_with_spaces(self):
-+        class TypeWithSpaces:
-+            pass
-+
-+        t = TypeWithSpaces()
-+        type(t).__name__ = "type with spaces"
-+        self.assertEqual(type(t).__name__, "type with spaces")
-+
-+        class MyRepr(Repr):
-+            def repr_type_with_spaces(self, obj, level):
-+                return "Type With Spaces"
-+
-+
-+        aRepr = MyRepr()
-+        self.assertEqual(aRepr.repr(t), "Type With Spaces")
-+
- def write_file(path, text):
-     with open(path, 'w', encoding='ASCII') as fp:
-         fp.write(text)
---- a/Lib/test/test_strptime.py
-+++ b/Lib/test/test_strptime.py
-@@ -5,13 +5,21 @@
- import locale
- import re
- import os
-+import platform
- import sys
- from test import support
--from test.support import skip_if_buggy_ucrt_strfptime
-+from test.support import skip_if_buggy_ucrt_strfptime, run_with_locales
- from datetime import date as datetime_date
- 
- import _strptime
- 
-+libc_ver = platform.libc_ver()
-+if libc_ver[0] == 'glibc':
-+    glibc_ver = tuple(map(int, libc_ver[1].split('.')))
-+else:
-+    glibc_ver = None
-+
-+
- class getlang_Tests(unittest.TestCase):
-     """Test _getlang"""
-     def test_basic(self):
-@@ -206,8 +214,8 @@
-     """Tests for _strptime.strptime."""
- 
-     def setUp(self):
--        """Create testing time tuple."""
--        self.time_tuple = time.gmtime()
-+        """Create testing time tuples."""
-+        self.time_tuple = time.localtime()
- 
-     def test_ValueError(self):
-         # Make sure ValueError is raised when match fails or format is bad
-@@ -282,59 +290,73 @@
-         # additional check for IndexError branch (issue #19545)
-         with self.assertRaises(ValueError) as e:
-             _strptime._strptime_time('19', '%Y %')
--        self.assertIs(e.exception.__suppress_context__, True)
-+        self.assertIsNone(e.exception.__context__)
- 
-     def test_unconverteddata(self):
-         # Check ValueError is raised when there is unconverted data
-         self.assertRaises(ValueError, _strptime._strptime_time, "10 12", "%m")
- 
--    def helper(self, directive, position):
-+    def roundtrip(self, fmt, position, time_tuple=None):
-         """Helper fxn in testing."""
--        strf_output = time.strftime("%" + directive, self.time_tuple)
--        strp_output = _strptime._strptime_time(strf_output, "%" + directive)
--        self.assertTrue(strp_output[position] == self.time_tuple[position],
--                        "testing of '%s' directive failed; '%s' -> %s != %s" %
--                         (directive, strf_output, strp_output[position],
--                          self.time_tuple[position]))
-+        if time_tuple is None:
-+            time_tuple = self.time_tuple
-+        strf_output = time.strftime(fmt, time_tuple)
-+        strp_output = _strptime._strptime_time(strf_output, fmt)
-+        self.assertEqual(strp_output[position], time_tuple[position],
-+                        "testing of %r format failed; %r -> %r != %r" %
-+                         (fmt, strf_output, strp_output[position],
-+                          time_tuple[position]))
-+        if support.verbose >= 3:
-+            print("testing of %r format: %r -> %r" %
-+                  (fmt, strf_output, strp_output[position]))
- 
-     def test_year(self):
-         # Test that the year is handled properly
--        for directive in ('y', 'Y'):
--            self.helper(directive, 0)
-+        self.roundtrip('%Y', 0)
-+        self.roundtrip('%y', 0)
-+        self.roundtrip('%Y', 0, (1900, 1, 1, 0, 0, 0, 0, 1, 0))
-+
-         # Must also make sure %y values are correct for bounds set by Open Group
--        for century, bounds in ((1900, ('69', '99')), (2000, ('00', '68'))):
--            for bound in bounds:
--                strp_output = _strptime._strptime_time(bound, '%y')
--                expected_result = century + int(bound)
--                self.assertTrue(strp_output[0] == expected_result,
--                                "'y' test failed; passed in '%s' "
--                                "and returned '%s'" % (bound, strp_output[0]))
-+        strptime = _strptime._strptime_time
-+        self.assertEqual(strptime('00', '%y')[0], 2000)
-+        self.assertEqual(strptime('68', '%y')[0], 2068)
-+        self.assertEqual(strptime('69', '%y')[0], 1969)
-+        self.assertEqual(strptime('99', '%y')[0], 1999)
- 
-     def test_month(self):
-         # Test for month directives
--        for directive in ('B', 'b', 'm'):
--            self.helper(directive, 1)
-+        self.roundtrip('%m', 1)
-+
-+    @run_with_locales('LC_TIME', 'C', 'en_US', 'fr_FR', 'de_DE', 'ja_JP', 'he_IL', '')
-+    def test_month_locale(self):
-+        # Test for month directives
-+        self.roundtrip('%B', 1)
-+        self.roundtrip('%b', 1)
-+        for m in range(1, 13):
-+            self.roundtrip('%B', 1, (1900, m, 1, 0, 0, 0, 0, 1, 0))
-+            self.roundtrip('%b', 1, (1900, m, 1, 0, 0, 0, 0, 1, 0))
- 
-     def test_day(self):
-         # Test for day directives
--        self.helper('d', 2)
-+        self.roundtrip('%d %Y', 2)
- 
-     def test_hour(self):
-         # Test hour directives
--        self.helper('H', 3)
--        strf_output = time.strftime("%I %p", self.time_tuple)
--        strp_output = _strptime._strptime_time(strf_output, "%I %p")
--        self.assertTrue(strp_output[3] == self.time_tuple[3],
--                        "testing of '%%I %%p' directive failed; '%s' -> %s != %s" %
--                         (strf_output, strp_output[3], self.time_tuple[3]))
-+        self.roundtrip('%H', 3)
-+
-+    # NB: Only works on locales with AM/PM
-+    @run_with_locales('LC_TIME', 'C', 'en_US', 'ja_JP')
-+    def test_hour_locale(self):
-+        # Test hour directives
-+        self.roundtrip('%I %p', 3)
- 
-     def test_minute(self):
-         # Test minute directives
--        self.helper('M', 4)
-+        self.roundtrip('%M', 4)
- 
-     def test_second(self):
-         # Test second directives
--        self.helper('S', 5)
-+        self.roundtrip('%S', 5)
- 
-     def test_fraction(self):
-         # Test microseconds
-@@ -345,12 +367,18 @@
- 
-     def test_weekday(self):
-         # Test weekday directives
--        for directive in ('A', 'a', 'w', 'u'):
--            self.helper(directive,6)
-+        self.roundtrip('%w', 6)
-+        self.roundtrip('%u', 6)
-+
-+    @run_with_locales('LC_TIME', 'C', 'en_US', 'fr_FR', 'de_DE', 'ja_JP', '')
-+    def test_weekday_locale(self):
-+        # Test weekday directives
-+        self.roundtrip('%A', 6)
-+        self.roundtrip('%a', 6)
- 
-     def test_julian(self):
-         # Test julian directives
--        self.helper('j', 7)
-+        self.roundtrip('%j', 7)
- 
-     def test_offset(self):
-         one_hour = 60 * 60
-@@ -447,20 +475,121 @@
-                     "time.daylight set to %s and passing in %s" %
-                     (time.tzname, tz_value, time.daylight, tz_name))
- 
--    def test_date_time(self):
-+    # NB: Does not roundtrip in some locales due to the ambiguity of
-+    # the date and time representation (bugs in locales?):
-+    # * Seconds are not included: bem_ZM, bokmal, ff_SN, nb_NO, nn_NO,
-+    #   no_NO, norwegian, nynorsk.
-+    # * Hours are in 12-hour notation without AM/PM indication: hy_AM,
-+    #   id_ID, ms_MY.
-+    # * Year is not included: ha_NG.
-+    # * Use non-Gregorian calendar: lo_LA, thai, th_TH.
-+    #   On Windows: ar_IN, ar_SA, fa_IR, ps_AF.
-+    #
-+    # BUG: Generates regexp that does not match the current date and time
-+    # for lzh_TW.
-+    @run_with_locales('LC_TIME', 'C', 'en_US', 'fr_FR', 'de_DE', 'ja_JP',
-+                      'he_IL', 'eu_ES', 'ar_AE', 'mfe_MU', 'yo_NG',
-+                      'csb_PL', 'br_FR', 'gez_ET', 'brx_IN',
-+                      'my_MM', 'or_IN', 'shn_MM', 'az_IR')
-+    def test_date_time_locale(self):
-         # Test %c directive
--        for position in range(6):
--            self.helper('c', position)
-+        loc = locale.getlocale(locale.LC_TIME)[0]
-+        if glibc_ver and glibc_ver < (2, 31) and loc == 'br_FR':
-+            self.skipTest('%c in locale br_FR does not include time')
-+        now = time.time()
-+        self.roundtrip('%c', slice(0, 6), time.localtime(now))
-+        # 1 hour 20 minutes 30 seconds ago
-+        self.roundtrip('%c', slice(0, 6), time.localtime(now - 4830))
-+        # 12 hours ago
-+        self.roundtrip('%c', slice(0, 6), time.localtime(now - 12*3600))
-+        # different days of the week
-+        for i in range(1, 7):
-+            self.roundtrip('%c', slice(0, 6), time.localtime(now - i*24*3600))
-+        # different months
-+        for i in range(1, 12):
-+            self.roundtrip('%c', slice(0, 6), time.localtime(now - i*30*24*3600))
-+        # different year
-+        self.roundtrip('%c', slice(0, 6), time.localtime(now - 366*24*3600))
- 
--    def test_date(self):
-+    # NB: Dates before 1969 do not roundtrip on some locales:
-+    # az_IR, bo_CN, bo_IN, dz_BT, eu_ES, eu_FR, fa_IR, or_IN.
-+    @support.run_with_tz('STD-1DST,M4.1.0,M10.1.0')
-+    @run_with_locales('LC_TIME', 'C', 'en_US', 'fr_FR', 'de_DE', 'ja_JP',
-+                      'he_IL', 'ar_AE', 'mfe_MU', 'yo_NG',
-+                      'csb_PL', 'br_FR', 'gez_ET', 'brx_IN',
-+                      'my_MM', 'shn_MM')
-+    def test_date_time_locale2(self):
-+        # Test %c directive
-+        loc = locale.getlocale(locale.LC_TIME)[0]
-+        if sys.platform.startswith('sunos'):
-+            if loc in ('ar_AE',):
-+                self.skipTest(f'locale {loc!r} may not work on this platform')
-+        self.roundtrip('%c', slice(0, 6), (1900, 1, 1, 0, 0, 0, 0, 1, 0))
-+        self.roundtrip('%c', slice(0, 6), (1800, 1, 1, 0, 0, 0, 0, 1, 0))
-+
-+    # NB: Does not roundtrip because use non-Gregorian calendar:
-+    # lo_LA, thai, th_TH. On Windows: ar_IN, ar_SA, fa_IR, ps_AF.
-+    # BUG: Generates regexp that does not match the current date
-+    # for lzh_TW.
-+    @run_with_locales('LC_TIME', 'C', 'en_US', 'fr_FR', 'de_DE', 'ja_JP',
-+                      'he_IL', 'eu_ES', 'ar_AE',
-+                      'az_IR', 'my_MM', 'or_IN', 'shn_MM')
-+    def test_date_locale(self):
-         # Test %x directive
--        for position in range(0,3):
--            self.helper('x', position)
-+        now = time.time()
-+        self.roundtrip('%x', slice(0, 3), time.localtime(now))
-+        # different days of the week
-+        for i in range(1, 7):
-+            self.roundtrip('%x', slice(0, 3), time.localtime(now - i*24*3600))
-+        # different months
-+        for i in range(1, 12):
-+            self.roundtrip('%x', slice(0, 3), time.localtime(now - i*30*24*3600))
-+        # different year
-+        self.roundtrip('%x', slice(0, 3), time.localtime(now - 366*24*3600))
- 
--    def test_time(self):
-+    # NB: Dates before 1969 do not roundtrip on many locales, including C.
-+    @unittest.skipIf(
-+        support.is_emscripten or support.is_wasi,
-+        "musl libc issue on Emscripten, bpo-46390"
-+    )
-+    @run_with_locales('LC_TIME', 'en_US', 'fr_FR', 'de_DE', 'ja_JP',
-+                      'eu_ES', 'ar_AE', 'my_MM', 'shn_MM')
-+    def test_date_locale2(self):
-+        # Test %x directive
-+        loc = locale.getlocale(locale.LC_TIME)[0]
-+        if sys.platform.startswith('sunos'):
-+            if loc in ('en_US', 'de_DE', 'ar_AE'):
-+                self.skipTest(f'locale {loc!r} may not work on this platform')
-+        self.roundtrip('%x', slice(0, 3), (1900, 1, 1, 0, 0, 0, 0, 1, 0))
-+        self.roundtrip('%x', slice(0, 3), (1800, 1, 1, 0, 0, 0, 0, 1, 0))
-+
-+    # NB: Does not roundtrip in some locales due to the ambiguity of
-+    # the time representation (bugs in locales?):
-+    # * Seconds are not included: bokmal, ff_SN, nb_NO, nn_NO, no_NO,
-+    #   norwegian, nynorsk.
-+    # * Hours are in 12-hour notation without AM/PM indication: hy_AM,
-+    #   ms_MY, sm_WS.
-+    # BUG: Generates regexp that does not match the current time for lzh_TW.
-+    @run_with_locales('LC_TIME', 'C', 'en_US', 'fr_FR', 'de_DE', 'ja_JP',
-+                      'aa_ET', 'am_ET', 'az_IR', 'byn_ER', 'fa_IR', 'gez_ET',
-+                      'my_MM', 'om_ET', 'or_IN', 'shn_MM', 'sid_ET', 'so_SO',
-+                      'ti_ET', 'tig_ER', 'wal_ET')
-+    def test_time_locale(self):
-         # Test %X directive
--        for position in range(3,6):
--            self.helper('X', position)
-+        loc = locale.getlocale(locale.LC_TIME)[0]
-+        pos = slice(3, 6)
-+        if glibc_ver and glibc_ver < (2, 29) and loc in {
-+                'aa_ET', 'am_ET', 'byn_ER', 'gez_ET', 'om_ET',
-+                'sid_ET', 'so_SO', 'ti_ET', 'tig_ER', 'wal_ET'}:
-+            # Hours are in 12-hour notation without AM/PM indication.
-+            # Ignore hours.
-+            pos = slice(4, 6)
-+        now = time.time()
-+        self.roundtrip('%X', pos, time.localtime(now))
-+        # 1 hour 20 minutes 30 seconds ago
-+        self.roundtrip('%X', pos, time.localtime(now - 4830))
-+        # 12 hours ago
-+        self.roundtrip('%X', pos, time.localtime(now - 12*3600))
- 
-     def test_percent(self):
-         # Make sure % signs are handled properly
-@@ -710,13 +839,8 @@
- 
-     def test_TimeRE_recreation_locale(self):
-         # The TimeRE instance should be recreated upon changing the locale.
--        locale_info = locale.getlocale(locale.LC_TIME)
--        try:
--            locale.setlocale(locale.LC_TIME, ('en_US', 'UTF8'))
--        except locale.Error:
--            self.skipTest('test needs en_US.UTF8 locale')
--        try:
--            _strptime._strptime_time('10', '%d')
-+        with support.run_with_locale('LC_TIME', 'en_US.UTF8'):
-+            _strptime._strptime_time('10 2004', '%d %Y')
-             # Get id of current cache object.
-             first_time_re = _strptime._TimeRE_cache
-             try:
-@@ -732,10 +856,6 @@
-             # to the resetting to the original locale.
-             except locale.Error:
-                 self.skipTest('test needs de_DE.UTF8 locale')
--        # Make sure we don't trample on the locale setting once we leave the
--        # test.
--        finally:
--            locale.setlocale(locale.LC_TIME, locale_info)
- 
-     @support.run_with_tz('STD-1DST,M4.1.0,M10.1.0')
-     def test_TimeRE_recreation_timezone(self):
---- a/Lib/test/test_struct.py
-+++ b/Lib/test/test_struct.py
-@@ -529,6 +529,9 @@
- 
-         for c in [b'\x01', b'\x7f', b'\xff', b'\x0f', b'\xf0']:
-             self.assertTrue(struct.unpack('>?', c)[0])
-+            self.assertTrue(struct.unpack('<?', c)[0])
-+            self.assertTrue(struct.unpack('=?', c)[0])
-+            self.assertTrue(struct.unpack('@?', c)[0])
- 
-     def test_count_overflow(self):
-         hugecount = '{}b'.format(sys.maxsize+1)
---- a/Lib/test/test_time.py
-+++ b/Lib/test/test_time.py
-@@ -2,7 +2,6 @@
- from test.support import warnings_helper
- import decimal
- import enum
--import locale
- import math
- import platform
- import sys
-@@ -15,7 +14,7 @@
- except ImportError:
-     _testcapi = None
- 
--from test.support import skip_if_buggy_ucrt_strfptime
-+from test.support import skip_if_buggy_ucrt_strfptime, SuppressCrashReport
- 
- # Max year is only limited by the size of C int.
- SIZEOF_INT = sysconfig.get_config_var('SIZEOF_INT') or 4
-@@ -178,8 +177,44 @@
-                 self.fail('conversion specifier: %r failed.' % format)
- 
-         self.assertRaises(TypeError, time.strftime, b'%S', tt)
--        # embedded null character
--        self.assertRaises(ValueError, time.strftime, '%S\0', tt)
-+
-+    def test_strftime_invalid_format(self):
-+        tt = time.gmtime(self.t)
-+        with SuppressCrashReport():
-+            for i in range(1, 128):
-+                format = ' %' + chr(i)
-+                with self.subTest(format=format):
-+                    try:
-+                        time.strftime(format, tt)
-+                    except ValueError as exc:
-+                        self.assertEqual(str(exc), 'Invalid format string')
-+
-+    def test_strftime_special(self):
-+        tt = time.gmtime(self.t)
-+        s1 = time.strftime('%c', tt)
-+        s2 = time.strftime('%B', tt)
-+        # gh-52551, gh-78662: Unicode strings should pass through strftime,
-+        # independently from locale.
-+        self.assertEqual(time.strftime('\U0001f40d', tt), '\U0001f40d')
-+        self.assertEqual(time.strftime('\U0001f4bb%c\U0001f40d%B', tt), f'\U0001f4bb{s1}\U0001f40d{s2}')
-+        self.assertEqual(time.strftime('%c\U0001f4bb%B\U0001f40d', tt), f'{s1}\U0001f4bb{s2}\U0001f40d')
-+        # Lone surrogates should pass through.
-+        self.assertEqual(time.strftime('\ud83d', tt), '\ud83d')
-+        self.assertEqual(time.strftime('\udc0d', tt), '\udc0d')
-+        self.assertEqual(time.strftime('\ud83d%c\udc0d%B', tt), f'\ud83d{s1}\udc0d{s2}')
-+        self.assertEqual(time.strftime('%c\ud83d%B\udc0d', tt), f'{s1}\ud83d{s2}\udc0d')
-+        self.assertEqual(time.strftime('%c\udc0d%B\ud83d', tt), f'{s1}\udc0d{s2}\ud83d')
-+        # Surrogate pairs should not recombine.
-+        self.assertEqual(time.strftime('\ud83d\udc0d', tt), '\ud83d\udc0d')
-+        self.assertEqual(time.strftime('%c\ud83d\udc0d%B', tt), f'{s1}\ud83d\udc0d{s2}')
-+        # Surrogate-escaped bytes should not recombine.
-+        self.assertEqual(time.strftime('\udcf0\udc9f\udc90\udc8d', tt), '\udcf0\udc9f\udc90\udc8d')
-+        self.assertEqual(time.strftime('%c\udcf0\udc9f\udc90\udc8d%B', tt), f'{s1}\udcf0\udc9f\udc90\udc8d{s2}')
-+        # gh-124531: The null character should not terminate the format string.
-+        self.assertEqual(time.strftime('\0', tt), '\0')
-+        self.assertEqual(time.strftime('\0'*1000, tt), '\0'*1000)
-+        self.assertEqual(time.strftime('\0%c\0%B', tt), f'\0{s1}\0{s2}')
-+        self.assertEqual(time.strftime('%c\0%B\0', tt), f'{s1}\0{s2}\0')
- 
-     def _bounds_checking(self, func):
-         # Make sure that strftime() checks the bounds of the various parts
-@@ -293,7 +328,7 @@
-         # additional check for IndexError branch (issue #19545)
-         with self.assertRaises(ValueError) as e:
-             time.strptime('19', '%Y %')
--        self.assertIs(e.exception.__suppress_context__, True)
-+        self.assertIsNone(e.exception.__context__)
- 
-     def test_asctime(self):
-         time.asctime(time.gmtime(self.t))
-@@ -588,17 +623,8 @@
- 
- 
- class TestLocale(unittest.TestCase):
--    def setUp(self):
--        self.oldloc = locale.setlocale(locale.LC_ALL)
--
--    def tearDown(self):
--        locale.setlocale(locale.LC_ALL, self.oldloc)
--
-+    @support.run_with_locale('LC_ALL', 'fr_FR', '')
-     def test_bug_3061(self):
--        try:
--            tmp = locale.setlocale(locale.LC_ALL, "fr_FR")
--        except locale.Error:
--            self.skipTest('could not set locale.LC_ALL to fr_FR')
-         # This should not cause an exception
-         time.strftime("%B", (2009,2,1,0,0,0,0,0,0))
- 
---- a/Lib/test/test_tokenize.py
-+++ b/Lib/test/test_tokenize.py
-@@ -1916,6 +1916,26 @@
-         self.check_roundtrip(r"f'\\\\N{{'")
-         self.check_roundtrip(r"f'\\\\\\N{{'")
-         self.check_roundtrip(r"f'\\\\\\\\N{{'")
-+
-+        self.check_roundtrip(r"f'\n{{foo}}'")
-+        self.check_roundtrip(r"f'\\n{{foo}}'")
-+        self.check_roundtrip(r"f'\\\n{{foo}}'")
-+        self.check_roundtrip(r"f'\\\\n{{foo}}'")
-+
-+        self.check_roundtrip(r"f'\t{{foo}}'")
-+        self.check_roundtrip(r"f'\\t{{foo}}'")
-+        self.check_roundtrip(r"f'\\\t{{foo}}'")
-+        self.check_roundtrip(r"f'\\\\t{{foo}}'")
-+
-+        self.check_roundtrip(r"rf'\t{{foo}}'")
-+        self.check_roundtrip(r"rf'\\t{{foo}}'")
-+        self.check_roundtrip(r"rf'\\\t{{foo}}'")
-+        self.check_roundtrip(r"rf'\\\\t{{foo}}'")
-+
-+        self.check_roundtrip(r"rf'\{{foo}}'")
-+        self.check_roundtrip(r"f'\\{{foo}}'")
-+        self.check_roundtrip(r"rf'\\\{{foo}}'")
-+        self.check_roundtrip(r"f'\\\\{{foo}}'")
-         cases = [
-     """
- if 1:
---- /dev/null
-+++ b/Lib/test/test_tools/i18n_data/docstrings.pot
-@@ -0,0 +1,40 @@
-+# SOME DESCRIPTIVE TITLE.
-+# Copyright (C) YEAR ORGANIZATION
-+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
-+#
-+msgid ""
-+msgstr ""
-+"Project-Id-Version: PACKAGE VERSION\n"
-+"POT-Creation-Date: 2000-01-01 00:00+0000\n"
-+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
-+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
-+"Language-Team: LANGUAGE <LL@li.org>\n"
-+"MIME-Version: 1.0\n"
-+"Content-Type: text/plain; charset=UTF-8\n"
-+"Content-Transfer-Encoding: 8bit\n"
-+"Generated-By: pygettext.py 1.5\n"
-+
-+
-+#: docstrings.py:7
-+#, docstring
-+msgid ""
-+msgstr ""
-+
-+#: docstrings.py:18
-+#, docstring
-+msgid ""
-+"multiline\n"
-+"    docstring\n"
-+"    "
-+msgstr ""
-+
-+#: docstrings.py:25
-+#, docstring
-+msgid "docstring1"
-+msgstr ""
-+
-+#: docstrings.py:30
-+#, docstring
-+msgid "Hello, {}!"
-+msgstr ""
-+
---- /dev/null
-+++ b/Lib/test/test_tools/i18n_data/docstrings.py
-@@ -0,0 +1,41 @@
-+# Test docstring extraction
-+from gettext import gettext as _
-+
-+
-+# Empty docstring
-+def test(x):
-+    """"""
-+
-+
-+# Leading empty line
-+def test2(x):
-+
-+    """docstring"""  # XXX This should be extracted but isn't.
-+
-+
-+# XXX Multiline docstrings should be cleaned with `inspect.cleandoc`.
-+def test3(x):
-+    """multiline
-+    docstring
-+    """
-+
-+
-+# Multiple docstrings - only the first should be extracted
-+def test4(x):
-+    """docstring1"""
-+    """docstring2"""
-+
-+
-+def test5(x):
-+    """Hello, {}!""".format("world!")  # XXX This should not be extracted.
-+
-+
-+# Nested docstrings
-+def test6(x):
-+    def inner(y):
-+        """nested docstring"""  # XXX This should be extracted but isn't.
-+
-+
-+class Outer:
-+    class Inner:
-+        "nested class docstring"  # XXX This should be extracted but isn't.
---- /dev/null
-+++ b/Lib/test/test_tools/i18n_data/fileloc.pot
-@@ -0,0 +1,35 @@
-+# SOME DESCRIPTIVE TITLE.
-+# Copyright (C) YEAR ORGANIZATION
-+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
-+#
-+msgid ""
-+msgstr ""
-+"Project-Id-Version: PACKAGE VERSION\n"
-+"POT-Creation-Date: 2000-01-01 00:00+0000\n"
-+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
-+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
-+"Language-Team: LANGUAGE <LL@li.org>\n"
-+"MIME-Version: 1.0\n"
-+"Content-Type: text/plain; charset=UTF-8\n"
-+"Content-Transfer-Encoding: 8bit\n"
-+"Generated-By: pygettext.py 1.5\n"
-+
-+
-+#: fileloc.py:5 fileloc.py:6
-+msgid "foo"
-+msgstr ""
-+
-+#: fileloc.py:9
-+msgid "bar"
-+msgstr ""
-+
-+#: fileloc.py:14 fileloc.py:18
-+#, docstring
-+msgid "docstring"
-+msgstr ""
-+
-+#: fileloc.py:22 fileloc.py:26
-+#, docstring
-+msgid "baz"
-+msgstr ""
-+
---- /dev/null
-+++ b/Lib/test/test_tools/i18n_data/fileloc.py
-@@ -0,0 +1,26 @@
-+# Test file locations
-+from gettext import gettext as _
-+
-+# Duplicate strings
-+_('foo')
-+_('foo')
-+
-+# Duplicate strings on the same line should only add one location to the output
-+_('bar'), _('bar')
-+
-+
-+# Duplicate docstrings
-+class A:
-+    """docstring"""
-+
-+
-+def f():
-+    """docstring"""
-+
-+
-+# Duplicate message and docstring
-+_('baz')
-+
-+
-+def g():
-+    """baz"""
---- /dev/null
-+++ b/Lib/test/test_tools/i18n_data/messages.pot
-@@ -0,0 +1,67 @@
-+# SOME DESCRIPTIVE TITLE.
-+# Copyright (C) YEAR ORGANIZATION
-+# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
-+#
-+msgid ""
-+msgstr ""
-+"Project-Id-Version: PACKAGE VERSION\n"
-+"POT-Creation-Date: 2000-01-01 00:00+0000\n"
-+"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
-+"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
-+"Language-Team: LANGUAGE <LL@li.org>\n"
-+"MIME-Version: 1.0\n"
-+"Content-Type: text/plain; charset=UTF-8\n"
-+"Content-Transfer-Encoding: 8bit\n"
-+"Generated-By: pygettext.py 1.5\n"
-+
-+
-+#: messages.py:5
-+msgid ""
-+msgstr ""
-+
-+#: messages.py:8 messages.py:9
-+msgid "parentheses"
-+msgstr ""
-+
-+#: messages.py:12
-+msgid "Hello, world!"
-+msgstr ""
-+
-+#: messages.py:15
-+msgid ""
-+"Hello,\n"
-+"    multiline!\n"
-+msgstr ""
-+
-+#: messages.py:29
-+msgid "Hello, {}!"
-+msgstr ""
-+
-+#: messages.py:33
-+msgid "1"
-+msgstr ""
-+
-+#: messages.py:33
-+msgid "2"
-+msgstr ""
-+
-+#: messages.py:34 messages.py:35
-+msgid "A"
-+msgstr ""
-+
-+#: messages.py:34 messages.py:35
-+msgid "B"
-+msgstr ""
-+
-+#: messages.py:36
-+msgid "set"
-+msgstr ""
-+
-+#: messages.py:42
-+msgid "nested string"
-+msgstr ""
-+
-+#: messages.py:47
-+msgid "baz"
-+msgstr ""
-+
---- /dev/null
-+++ b/Lib/test/test_tools/i18n_data/messages.py
-@@ -0,0 +1,64 @@
-+# Test message extraction
-+from gettext import gettext as _
-+
-+# Empty string
-+_("")
-+
-+# Extra parentheses
-+(_("parentheses"))
-+((_("parentheses")))
-+
-+# Multiline strings
-+_("Hello, "
-+  "world!")
-+
-+_("""Hello,
-+    multiline!
-+""")
-+
-+# Invalid arguments
-+_()
-+_(None)
-+_(1)
-+_(False)
-+_(x="kwargs are not allowed")
-+_("foo", "bar")
-+_("something", x="something else")
-+
-+# .format()
-+_("Hello, {}!").format("world")  # valid
-+_("Hello, {}!".format("world"))  # invalid
-+
-+# Nested structures
-+_("1"), _("2")
-+arr = [_("A"), _("B")]
-+obj = {'a': _("A"), 'b': _("B")}
-+{{{_('set')}}}
-+
-+
-+# Nested functions and classes
-+def test():
-+    _("nested string")  # XXX This should be extracted but isn't.
-+    [_("nested string")]
-+
-+
-+class Foo:
-+    def bar(self):
-+        return _("baz")
-+
-+
-+def bar(x=_('default value')):  # XXX This should be extracted but isn't.
-+    pass
-+
-+
-+def baz(x=[_('default value')]):  # XXX This should be extracted but isn't.
-+    pass
-+
-+
-+# Shadowing _()
-+def _(x):
-+    pass
-+
-+
-+def _(x="don't extract me"):
-+    pass
---- a/Lib/test/test_tools/test_i18n.py
-+++ b/Lib/test/test_tools/test_i18n.py
-@@ -1,9 +1,11 @@
- """Tests to cover the Tools/i18n package"""
- 
- import os
-+import re
- import sys
- import unittest
- from textwrap import dedent
-+from pathlib import Path
- 
- from test.support.script_helper import assert_python_ok
- from test.test_tools import skip_if_missing, toolsdir
-@@ -12,20 +14,47 @@
- 
- skip_if_missing()
- 
-+DATA_DIR = Path(__file__).resolve().parent / 'i18n_data'
-+
-+
-+def normalize_POT_file(pot):
-+    """Normalize the POT creation timestamp, charset and
-+    file locations to make the POT file easier to compare.
-+
-+    """
-+    # Normalize the creation date.
-+    date_pattern = re.compile(r'"POT-Creation-Date: .+?\\n"')
-+    header = r'"POT-Creation-Date: 2000-01-01 00:00+0000\\n"'
-+    pot = re.sub(date_pattern, header, pot)
-+
-+    # Normalize charset to UTF-8 (currently there's no way to specify the output charset).
-+    charset_pattern = re.compile(r'"Content-Type: text/plain; charset=.+?\\n"')
-+    charset = r'"Content-Type: text/plain; charset=UTF-8\\n"'
-+    pot = re.sub(charset_pattern, charset, pot)
-+
-+    # Normalize file location path separators in case this test is
-+    # running on Windows (which uses '\').
-+    fileloc_pattern = re.compile(r'#:.+')
-+
-+    def replace(match):
-+        return match[0].replace(os.sep, "/")
-+    pot = re.sub(fileloc_pattern, replace, pot)
-+    return pot
-+
- 
- class Test_pygettext(unittest.TestCase):
-     """Tests for the pygettext.py tool"""
- 
--    script = os.path.join(toolsdir,'i18n', 'pygettext.py')
-+    script = Path(toolsdir, 'i18n', 'pygettext.py')
- 
-     def get_header(self, data):
-         """ utility: return the header of a .po file as a dictionary """
-         headers = {}
-         for line in data.split('\n'):
--            if not line or line.startswith(('#', 'msgid','msgstr')):
-+            if not line or line.startswith(('#', 'msgid', 'msgstr')):
-                 continue
-             line = line.strip('"')
--            key, val = line.split(':',1)
-+            key, val = line.split(':', 1)
-             headers[key] = val.strip()
-         return headers
- 
-@@ -53,13 +82,18 @@
- 
-         return msgids
- 
-+    def assert_POT_equal(self, expected, actual):
-+        """Check if two POT files are equal"""
-+        self.maxDiff = None
-+        self.assertEqual(normalize_POT_file(expected), normalize_POT_file(actual))
-+
-     def extract_docstrings_from_str(self, module_content):
-         """ utility: return all msgids extracted from module_content """
-         filename = 'test_docstrings.py'
-         with temp_cwd(None) as cwd:
-             with open(filename, 'w', encoding='utf-8') as fp:
-                 fp.write(module_content)
--            assert_python_ok(self.script, '-D', filename)
-+            assert_python_ok('-Xutf8', self.script, '-D', filename)
-             with open('messages.pot', encoding='utf-8') as fp:
-                 data = fp.read()
-         return self.get_msgids(data)
-@@ -69,7 +103,7 @@
-            http://www.gnu.org/software/gettext/manual/gettext.html#Header-Entry
-         """
-         with temp_cwd(None) as cwd:
--            assert_python_ok(self.script)
-+            assert_python_ok('-Xutf8', self.script)
-             with open('messages.pot', encoding='utf-8') as fp:
-                 data = fp.read()
-             header = self.get_header(data)
-@@ -96,7 +130,7 @@
-         """ Match the date format from xgettext for POT-Creation-Date """
-         from datetime import datetime
-         with temp_cwd(None) as cwd:
--            assert_python_ok(self.script)
-+            assert_python_ok('-Xutf8', self.script)
-             with open('messages.pot', encoding='utf-8') as fp:
-                 data = fp.read()
-             header = self.get_header(data)
-@@ -310,6 +344,20 @@
-         self.assertNotIn('foo', msgids)
-         self.assertIn('bar', msgids)
- 
-+    def test_pygettext_output(self):
-+        """Test that the pygettext output exactly matches snapshots."""
-+        for input_file in DATA_DIR.glob('*.py'):
-+            output_file = input_file.with_suffix('.pot')
-+            with self.subTest(input_file=f'i18n_data/{input_file}'):
-+                contents = input_file.read_text(encoding='utf-8')
-+                with temp_cwd(None):
-+                    Path(input_file.name).write_text(contents)
-+                    assert_python_ok('-Xutf8', self.script, '--docstrings', input_file.name)
-+                    output = Path('messages.pot').read_text(encoding='utf-8')
-+
-+                expected = output_file.read_text(encoding='utf-8')
-+                self.assert_POT_equal(expected, output)
-+
-     def test_files_list(self):
-         """Make sure the directories are inspected for source files
-            bpo-31920
-@@ -318,21 +366,41 @@
-         text2 = 'Text to translate2'
-         text3 = 'Text to ignore'
-         with temp_cwd(None), temp_dir(None) as sdir:
--            os.mkdir(os.path.join(sdir, 'pypkg'))
--            with open(os.path.join(sdir, 'pypkg', 'pymod.py'), 'w',
--                      encoding='utf-8') as sfile:
--                sfile.write(f'_({text1!r})')
--            os.mkdir(os.path.join(sdir, 'pkg.py'))
--            with open(os.path.join(sdir, 'pkg.py', 'pymod2.py'), 'w',
--                      encoding='utf-8') as sfile:
--                sfile.write(f'_({text2!r})')
--            os.mkdir(os.path.join(sdir, 'CVS'))
--            with open(os.path.join(sdir, 'CVS', 'pymod3.py'), 'w',
--                      encoding='utf-8') as sfile:
--                sfile.write(f'_({text3!r})')
--            assert_python_ok(self.script, sdir)
--            with open('messages.pot', encoding='utf-8') as fp:
--                data = fp.read()
-+            pymod = Path(sdir, 'pypkg', 'pymod.py')
-+            pymod.parent.mkdir()
-+            pymod.write_text(f'_({text1!r})', encoding='utf-8')
-+
-+            pymod2 = Path(sdir, 'pkg.py', 'pymod2.py')
-+            pymod2.parent.mkdir()
-+            pymod2.write_text(f'_({text2!r})', encoding='utf-8')
-+
-+            pymod3 = Path(sdir, 'CVS', 'pymod3.py')
-+            pymod3.parent.mkdir()
-+            pymod3.write_text(f'_({text3!r})', encoding='utf-8')
-+
-+            assert_python_ok('-Xutf8', self.script, sdir)
-+            data = Path('messages.pot').read_text(encoding='utf-8')
-             self.assertIn(f'msgid "{text1}"', data)
-             self.assertIn(f'msgid "{text2}"', data)
-             self.assertNotIn(text3, data)
-+
-+
-+def update_POT_snapshots():
-+    for input_file in DATA_DIR.glob('*.py'):
-+        output_file = input_file.with_suffix('.pot')
-+        contents = input_file.read_bytes()
-+        with temp_cwd(None):
-+            Path(input_file.name).write_bytes(contents)
-+            assert_python_ok('-Xutf8', Test_pygettext.script, '--docstrings', input_file.name)
-+            output = Path('messages.pot').read_text(encoding='utf-8')
-+
-+        output = normalize_POT_file(output)
-+        output_file.write_text(output, encoding='utf-8')
-+
-+
-+if __name__ == '__main__':
-+    # To regenerate POT files
-+    if len(sys.argv) > 1 and sys.argv[1] == '--snapshot-update':
-+        update_POT_snapshots()
-+        sys.exit(0)
-+    unittest.main()
---- a/Lib/test/test_tools/test_makefile.py
-+++ b/Lib/test/test_tools/test_makefile.py
-@@ -51,7 +51,10 @@
-             if not dirs and not files:
-                 continue
-             # Skip dirs with hidden-only files:
--            if files and all(filename.startswith('.') for filename in files):
-+            if files and all(
-+                filename.startswith('.') or filename == '__pycache__'
-+                for filename in files
-+            ):
-                 continue
- 
-             relpath = os.path.relpath(dirpath, support.STDLIB_DIR)
---- a/Lib/test/test_traceback.py
-+++ b/Lib/test/test_traceback.py
-@@ -138,7 +138,7 @@
-             import traceback
-             try:
-                 x = 1 / 0
--            except:
-+            except ZeroDivisionError:
-                 traceback.print_exc()
-             """)
-         try:
-@@ -386,9 +386,10 @@
-     def get_exception(self, callable, slice_start=0, slice_end=-1):
-         try:
-             callable()
--            self.fail("No exception thrown.")
--        except:
-+        except BaseException:
-             return traceback.format_exc().splitlines()[slice_start:slice_end]
-+        else:
-+            self.fail("No exception thrown.")
- 
-     callable_line = get_exception.__code__.co_firstlineno + 2
- 
-@@ -1490,7 +1491,7 @@
-         try:
-             try:
-                 raise Exception
--            except:
-+            except Exception:
-                 raise ZeroDivisionError from None
-         except ZeroDivisionError as _:
-             e = _
-@@ -1838,9 +1839,9 @@
-             try:
-                 try:
-                     raise EG("eg1", [ValueError(1), TypeError(2)])
--                except:
-+                except EG:
-                     raise EG("eg2", [ValueError(3), TypeError(4)])
--            except:
-+            except EG:
-                 raise ImportError(5)
- 
-         expected = (
-@@ -1889,7 +1890,7 @@
-                 except Exception as e:
-                     exc = e
-                 raise EG("eg", [VE(1), exc, VE(4)])
--            except:
-+            except EG:
-                 raise EG("top", [VE(5)])
- 
-         expected = (f'  + Exception Group Traceback (most recent call last):\n'
-@@ -2642,7 +2643,7 @@
-         def f():
-             try:
-                 1/0
--            except:
-+            except ZeroDivisionError:
-                 f()
- 
-         try:
-@@ -2731,7 +2732,7 @@
-         def raise_exc():
-             try:
-                 raise ValueError('bad value')
--            except:
-+            except ValueError:
-                 raise
- 
-         def raise_with_locals():
---- a/Lib/test/test_ttk/test_widgets.py
-+++ b/Lib/test/test_ttk/test_widgets.py
-@@ -336,7 +336,8 @@
-         'show', 'state', 'style', 'takefocus', 'textvariable',
-         'validate', 'validatecommand', 'width', 'xscrollcommand',
-     )
--    IDENTIFY_AS = 'Entry.field' if sys.platform == 'darwin' else 'textarea'
-+    # bpo-27313: macOS Tk/Tcl may or may not report 'Entry.field'.
-+    IDENTIFY_AS = {'Entry.field', 'textarea'}
- 
-     def setUp(self):
-         super().setUp()
-@@ -373,8 +374,7 @@
-         self.entry.pack()
-         self.entry.update()
- 
--        # bpo-27313: macOS Cocoa widget differs from X, allow either
--        self.assertEqual(self.entry.identify(5, 5), self.IDENTIFY_AS)
-+        self.assertIn(self.entry.identify(5, 5), self.IDENTIFY_AS)
-         self.assertEqual(self.entry.identify(-1, -1), "")
- 
-         self.assertRaises(tkinter.TclError, self.entry.identify, None, 5)
-@@ -461,7 +461,7 @@
-         'validate', 'validatecommand', 'values',
-         'width', 'xscrollcommand',
-     )
--    IDENTIFY_AS = 'Combobox.button' if sys.platform == 'darwin' else 'textarea'
-+    IDENTIFY_AS = {'Combobox.button', 'textarea'}
- 
-     def setUp(self):
-         super().setUp()
-@@ -1204,7 +1204,7 @@
-         'takefocus', 'textvariable', 'to', 'validate', 'validatecommand',
-         'values', 'width', 'wrap', 'xscrollcommand',
-     )
--    IDENTIFY_AS = 'Spinbox.field' if sys.platform == 'darwin' else 'textarea'
-+    IDENTIFY_AS = {'Spinbox.field', 'textarea'}
- 
-     def setUp(self):
-         super().setUp()
---- a/Lib/test/test_types.py
-+++ b/Lib/test/test_types.py
-@@ -397,7 +397,7 @@
-         test(123456, "1=20", '11111111111111123456')
-         test(123456, "*=20", '**************123456')
- 
--    @run_with_locale('LC_NUMERIC', 'en_US.UTF8')
-+    @run_with_locale('LC_NUMERIC', 'en_US.UTF8', '')
-     def test_float__format__locale(self):
-         # test locale support for __format__ code 'n'
- 
-@@ -406,7 +406,7 @@
-             self.assertEqual(locale.format_string('%g', x, grouping=True), format(x, 'n'))
-             self.assertEqual(locale.format_string('%.10g', x, grouping=True), format(x, '.10n'))
- 
--    @run_with_locale('LC_NUMERIC', 'en_US.UTF8')
-+    @run_with_locale('LC_NUMERIC', 'en_US.UTF8', '')
-     def test_int__format__locale(self):
-         # test locale support for __format__ code 'n' for integers
- 
---- a/Lib/test/test_unicode.py
-+++ b/Lib/test/test_unicode.py
-@@ -1676,7 +1676,7 @@
-             self.assertIn('str', exc)
-             self.assertIn('tuple', exc)
- 
--    @support.run_with_locale('LC_ALL', 'de_DE', 'fr_FR')
-+    @support.run_with_locale('LC_ALL', 'de_DE', 'fr_FR', '')
-     def test_format_float(self):
-         # should not format with a comma, but always with C locale
-         self.assertEqual('1.0', '%.1f' % 1.0)
---- a/Lib/test/test_urllib.py
-+++ b/Lib/test/test_urllib.py
-@@ -19,7 +19,6 @@
-     ssl = None
- import sys
- import tempfile
--from nturl2path import url2pathname, pathname2url
- 
- from base64 import b64encode
- import collections
-@@ -1529,39 +1528,86 @@
-                          (expect, result))
- 
-     @unittest.skipUnless(sys.platform == 'win32',
--                         'test specific to the nturl2path functions.')
--    def test_prefixes(self):
-+                         'test specific to Windows pathnames.')
-+    def test_pathname2url_win(self):
-         # Test special prefixes are correctly handled in pathname2url()
--        given = '\\\\?\\C:\\dir'
--        expect = '///C:/dir'
--        result = urllib.request.pathname2url(given)
--        self.assertEqual(expect, result,
--                         "pathname2url() failed; %s != %s" %
--                         (expect, result))
--        given = '\\\\?\\unc\\server\\share\\dir'
--        expect = '/server/share/dir'
--        result = urllib.request.pathname2url(given)
--        self.assertEqual(expect, result,
--                         "pathname2url() failed; %s != %s" %
--                         (expect, result))
--
-+        fn = urllib.request.pathname2url
-+        self.assertEqual(fn('\\\\?\\C:\\dir'), '///C:/dir')
-+        self.assertEqual(fn('\\\\?\\unc\\server\\share\\dir'), '//server/share/dir')
-+        self.assertEqual(fn("C:"), '///C:')
-+        self.assertEqual(fn("C:\\"), '///C:')
-+        self.assertEqual(fn('C:\\a\\b.c'), '///C:/a/b.c')
-+        self.assertEqual(fn('C:\\a\\b%#c'), '///C:/a/b%25%23c')
-+        self.assertEqual(fn('C:\\a\\b\xe9'), '///C:/a/b%C3%A9')
-+        self.assertEqual(fn('C:\\foo\\bar\\spam.foo'), "///C:/foo/bar/spam.foo")
-+        # Long drive letter
-+        self.assertRaises(IOError, fn, "XX:\\")
-+        # No drive letter
-+        self.assertEqual(fn("\\folder\\test\\"), '/folder/test/')
-+        self.assertEqual(fn("\\\\folder\\test\\"), '//folder/test/')
-+        self.assertEqual(fn("\\\\\\folder\\test\\"), '///folder/test/')
-+        self.assertEqual(fn('\\\\some\\share\\'), '//some/share/')
-+        self.assertEqual(fn('\\\\some\\share\\a\\b.c'), '//some/share/a/b.c')
-+        self.assertEqual(fn('\\\\some\\share\\a\\b%#c\xe9'), '//some/share/a/b%25%23c%C3%A9')
-+        # Round-tripping
-+        urls = ['///C:',
-+                '///folder/test/',
-+                '///C:/foo/bar/spam.foo']
-+        for url in urls:
-+            self.assertEqual(fn(urllib.request.url2pathname(url)), url)
-+
-+    @unittest.skipIf(sys.platform == 'win32',
-+                     'test specific to POSIX pathnames')
-+    def test_pathname2url_posix(self):
-+        fn = urllib.request.pathname2url
-+        self.assertEqual(fn('/'), '/')
-+        self.assertEqual(fn('/a/b.c'), '/a/b.c')
-+        self.assertEqual(fn('/a/b%#c'), '/a/b%25%23c')
- 
-     @unittest.skipUnless(sys.platform == 'win32',
--                         'test specific to the urllib.url2path function.')
--    def test_ntpath(self):
--        given = ('/C:/', '///C:/', '/C|//')
--        expect = 'C:\\'
--        for url in given:
--            result = urllib.request.url2pathname(url)
--            self.assertEqual(expect, result,
--                             'urllib.request..url2pathname() failed; %s != %s' %
--                             (expect, result))
--        given = '///C|/path'
--        expect = 'C:\\path'
--        result = urllib.request.url2pathname(given)
--        self.assertEqual(expect, result,
--                         'urllib.request.url2pathname() failed; %s != %s' %
--                         (expect, result))
-+                         'test specific to Windows pathnames.')
-+    def test_url2pathname_win(self):
-+        fn = urllib.request.url2pathname
-+        self.assertEqual(fn('/C:/'), 'C:\\')
-+        self.assertEqual(fn("///C|"), 'C:')
-+        self.assertEqual(fn("///C:"), 'C:')
-+        self.assertEqual(fn('///C:/'), 'C:\\')
-+        self.assertEqual(fn('/C|//'), 'C:\\')
-+        self.assertEqual(fn('///C|/path'), 'C:\\path')
-+        # No DOS drive
-+        self.assertEqual(fn("///C/test/"), '\\\\\\C\\test\\')
-+        self.assertEqual(fn("////C/test/"), '\\\\C\\test\\')
-+        # DOS drive paths
-+        self.assertEqual(fn('C:/path/to/file'), 'C:\\path\\to\\file')
-+        self.assertEqual(fn('C|/path/to/file'), 'C:\\path\\to\\file')
-+        self.assertEqual(fn('/C|/path/to/file'), 'C:\\path\\to\\file')
-+        self.assertEqual(fn('///C|/path/to/file'), 'C:\\path\\to\\file')
-+        self.assertEqual(fn("///C|/foo/bar/spam.foo"), 'C:\\foo\\bar\\spam.foo')
-+        # Non-ASCII drive letter
-+        self.assertRaises(IOError, fn, "///\u00e8|/")
-+        # UNC paths
-+        self.assertEqual(fn('//server/path/to/file'), '\\\\server\\path\\to\\file')
-+        self.assertEqual(fn('////server/path/to/file'), '\\\\server\\path\\to\\file')
-+        self.assertEqual(fn('/////server/path/to/file'), '\\\\\\server\\path\\to\\file')
-+        # Localhost paths
-+        self.assertEqual(fn('//localhost/C:/path/to/file'), 'C:\\path\\to\\file')
-+        self.assertEqual(fn('//localhost/C|/path/to/file'), 'C:\\path\\to\\file')
-+        # Round-tripping
-+        paths = ['C:',
-+                 r'\\\C\test\\',
-+                 r'C:\foo\bar\spam.foo']
-+        for path in paths:
-+            self.assertEqual(fn(urllib.request.pathname2url(path)), path)
-+
-+    @unittest.skipIf(sys.platform == 'win32',
-+                     'test specific to POSIX pathnames')
-+    def test_url2pathname_posix(self):
-+        fn = urllib.request.url2pathname
-+        self.assertEqual(fn('/foo/bar'), '/foo/bar')
-+        self.assertEqual(fn('//foo/bar'), '//foo/bar')
-+        self.assertEqual(fn('///foo/bar'), '///foo/bar')
-+        self.assertEqual(fn('////foo/bar'), '////foo/bar')
-+        self.assertEqual(fn('//localhost/foo/bar'), '//localhost/foo/bar')
- 
- class Utility_Tests(unittest.TestCase):
-     """Testcase to test the various utility functions in the urllib."""
-@@ -1645,60 +1691,5 @@
-         self.assertEqual(request.get_method(), 'HEAD')
- 
- 
--class URL2PathNameTests(unittest.TestCase):
--
--    def test_converting_drive_letter(self):
--        self.assertEqual(url2pathname("///C|"), 'C:')
--        self.assertEqual(url2pathname("///C:"), 'C:')
--        self.assertEqual(url2pathname("///C|/"), 'C:\\')
--
--    def test_converting_when_no_drive_letter(self):
--        # cannot end a raw string in \
--        self.assertEqual(url2pathname("///C/test/"), r'\\\C\test' '\\')
--        self.assertEqual(url2pathname("////C/test/"), r'\\C\test' '\\')
--
--    def test_simple_compare(self):
--        self.assertEqual(url2pathname("///C|/foo/bar/spam.foo"),
--                         r'C:\foo\bar\spam.foo')
--
--    def test_non_ascii_drive_letter(self):
--        self.assertRaises(IOError, url2pathname, "///\u00e8|/")
--
--    def test_roundtrip_url2pathname(self):
--        list_of_paths = ['C:',
--                         r'\\\C\test\\',
--                         r'C:\foo\bar\spam.foo'
--                         ]
--        for path in list_of_paths:
--            self.assertEqual(url2pathname(pathname2url(path)), path)
--
--class PathName2URLTests(unittest.TestCase):
--
--    def test_converting_drive_letter(self):
--        self.assertEqual(pathname2url("C:"), '///C:')
--        self.assertEqual(pathname2url("C:\\"), '///C:')
--
--    def test_converting_when_no_drive_letter(self):
--        self.assertEqual(pathname2url(r"\\\folder\test" "\\"),
--                         '/////folder/test/')
--        self.assertEqual(pathname2url(r"\\folder\test" "\\"),
--                         '////folder/test/')
--        self.assertEqual(pathname2url(r"\folder\test" "\\"),
--                         '/folder/test/')
--
--    def test_simple_compare(self):
--        self.assertEqual(pathname2url(r'C:\foo\bar\spam.foo'),
--                         "///C:/foo/bar/spam.foo" )
--
--    def test_long_drive_letter(self):
--        self.assertRaises(IOError, pathname2url, "XX:\\")
--
--    def test_roundtrip_pathname2url(self):
--        list_of_paths = ['///C:',
--                         '/////folder/test/',
--                         '///C:/foo/bar/spam.foo']
--        for path in list_of_paths:
--            self.assertEqual(pathname2url(url2pathname(path)), path)
--
- if __name__ == '__main__':
-     unittest.main()
---- a/Lib/test/test_venv.py
-+++ b/Lib/test/test_venv.py
-@@ -17,6 +17,7 @@
- import sys
- import sysconfig
- import tempfile
-+import shlex
- from test.support import (captured_stdout, captured_stderr,
-                           skip_if_broken_multiprocessing_synchronize, verbose,
-                           requires_subprocess, is_emscripten, is_wasi,
-@@ -97,6 +98,10 @@
-             result = f.read()
-         return result
- 
-+    def assertEndsWith(self, string, tail):
-+        if not string.endswith(tail):
-+            self.fail(f"String {string!r} does not end with {tail!r}")
-+
- class BasicTest(BaseTest):
-     """Test venv module functionality."""
- 
-@@ -446,6 +451,82 @@
-             'import sys; print(sys.executable)'])
-         self.assertEqual(out.strip(), envpy.encode())
- 
-+    # gh-124651: test quoted strings
-+    @unittest.skipIf(os.name == 'nt', 'contains invalid characters on Windows')
-+    def test_special_chars_bash(self):
-+        """
-+        Test that the template strings are quoted properly (bash)
-+        """
-+        rmtree(self.env_dir)
-+        bash = shutil.which('bash')
-+        if bash is None:
-+            self.skipTest('bash required for this test')
-+        env_name = '"\';&&$e|\'"'
-+        env_dir = os.path.join(os.path.realpath(self.env_dir), env_name)
-+        builder = venv.EnvBuilder(clear=True)
-+        builder.create(env_dir)
-+        activate = os.path.join(env_dir, self.bindir, 'activate')
-+        test_script = os.path.join(self.env_dir, 'test_special_chars.sh')
-+        with open(test_script, "w") as f:
-+            f.write(f'source {shlex.quote(activate)}\n'
-+                    'python -c \'import sys; print(sys.executable)\'\n'
-+                    'python -c \'import os; print(os.environ["VIRTUAL_ENV"])\'\n'
-+                    'deactivate\n')
-+        out, err = check_output([bash, test_script])
-+        lines = out.splitlines()
-+        self.assertTrue(env_name.encode() in lines[0])
-+        self.assertEndsWith(lines[1], env_name.encode())
-+
-+    # gh-124651: test quoted strings
-+    @unittest.skipIf(os.name == 'nt', 'contains invalid characters on Windows')
-+    def test_special_chars_csh(self):
-+        """
-+        Test that the template strings are quoted properly (csh)
-+        """
-+        rmtree(self.env_dir)
-+        csh = shutil.which('tcsh') or shutil.which('csh')
-+        if csh is None:
-+            self.skipTest('csh required for this test')
-+        env_name = '"\';&&$e|\'"'
-+        env_dir = os.path.join(os.path.realpath(self.env_dir), env_name)
-+        builder = venv.EnvBuilder(clear=True)
-+        builder.create(env_dir)
-+        activate = os.path.join(env_dir, self.bindir, 'activate.csh')
-+        test_script = os.path.join(self.env_dir, 'test_special_chars.csh')
-+        with open(test_script, "w") as f:
-+            f.write(f'source {shlex.quote(activate)}\n'
-+                    'python -c \'import sys; print(sys.executable)\'\n'
-+                    'python -c \'import os; print(os.environ["VIRTUAL_ENV"])\'\n'
-+                    'deactivate\n')
-+        out, err = check_output([csh, test_script])
-+        lines = out.splitlines()
-+        self.assertTrue(env_name.encode() in lines[0])
-+        self.assertEndsWith(lines[1], env_name.encode())
-+
-+    # gh-124651: test quoted strings on Windows
-+    @unittest.skipUnless(os.name == 'nt', 'only relevant on Windows')
-+    def test_special_chars_windows(self):
-+        """
-+        Test that the template strings are quoted properly on Windows
-+        """
-+        rmtree(self.env_dir)
-+        env_name = "'&&^$e"
-+        env_dir = os.path.join(os.path.realpath(self.env_dir), env_name)
-+        builder = venv.EnvBuilder(clear=True)
-+        builder.create(env_dir)
-+        activate = os.path.join(env_dir, self.bindir, 'activate.bat')
-+        test_batch = os.path.join(self.env_dir, 'test_special_chars.bat')
-+        with open(test_batch, "w") as f:
-+            f.write('@echo off\n'
-+                    f'"{activate}" & '
-+                    f'{self.exe} -c "import sys; print(sys.executable)" & '
-+                    f'{self.exe} -c "import os; print(os.environ[\'VIRTUAL_ENV\'])" & '
-+                    'deactivate')
-+        out, err = check_output([test_batch])
-+        lines = out.splitlines()
-+        self.assertTrue(env_name.encode() in lines[0])
-+        self.assertEndsWith(lines[1], env_name.encode())
-+
-     @unittest.skipUnless(os.name == 'nt', 'only relevant on Windows')
-     def test_unicode_in_batch_file(self):
-         """
---- a/Lib/test/test_zlib.py
-+++ b/Lib/test/test_zlib.py
-@@ -7,7 +7,7 @@
- import pickle
- import random
- import sys
--from test.support import bigmemtest, _1G, _4G, skip_on_s390x
-+from test.support import bigmemtest, _1G, _4G, is_s390x
- 
- 
- zlib = import_helper.import_module('zlib')
-@@ -34,8 +34,9 @@
- ZLIB_RUNTIME_VERSION_TUPLE = _zlib_runtime_version_tuple()
- 
- 
--# bpo-46623: On s390x, when a hardware accelerator is used, using different
--# ways to compress data with zlib can produce different compressed data.
-+# bpo-46623: When a hardware accelerator is used (currently only on s390x),
-+# using different ways to compress data with zlib can produce different
-+# compressed data.
- # Simplified test_pair() code:
- #
- #   def func1(data):
-@@ -58,8 +59,10 @@
- #
- #   zlib.decompress(func1(data)) == zlib.decompress(func2(data)) == data
- #
--# Make the assumption that s390x always has an accelerator to simplify the skip
--# condition.
-+# To simplify the skip condition, make the assumption that s390x always has an
-+# accelerator, and nothing else has it.
-+HW_ACCELERATED = is_s390x
-+
- 
- class VersionTestCase(unittest.TestCase):
- 
-@@ -224,12 +227,14 @@
-                                          bufsize=zlib.DEF_BUF_SIZE),
-                          HAMLET_SCENE)
- 
--    @skip_on_s390x
-     def test_speech128(self):
-         # compress more data
-         data = HAMLET_SCENE * 128
-         x = zlib.compress(data)
--        self.assertEqual(zlib.compress(bytearray(data)), x)
-+        # With hardware acceleration, the compressed bytes
-+        # might not be identical.
-+        if not HW_ACCELERATED:
-+            self.assertEqual(zlib.compress(bytearray(data)), x)
-         for ob in x, bytearray(x):
-             self.assertEqual(zlib.decompress(ob), data)
- 
-@@ -276,7 +281,6 @@
- 
- class CompressObjectTestCase(BaseCompressTestCase, unittest.TestCase):
-     # Test compression object
--    @skip_on_s390x
-     def test_pair(self):
-         # straightforward compress/decompress objects
-         datasrc = HAMLET_SCENE * 128
-@@ -287,7 +291,10 @@
-             x1 = co.compress(data)
-             x2 = co.flush()
-             self.assertRaises(zlib.error, co.flush) # second flush should not work
--            self.assertEqual(x1 + x2, datazip)
-+            # With hardware acceleration, the compressed bytes might not
-+            # be identical.
-+            if not HW_ACCELERATED:
-+                self.assertEqual(x1 + x2, datazip)
-         for v1, v2 in ((x1, x2), (bytearray(x1), bytearray(x2))):
-             dco = zlib.decompressobj()
-             y1 = dco.decompress(v1 + v2)
-@@ -499,20 +506,16 @@
- 
-         for sync in sync_opt:
-             for level in range(10):
--                try:
-+                with self.subTest(sync=sync, level=level):
-                     obj = zlib.compressobj( level )
-                     a = obj.compress( data[:3000] )
-                     b = obj.flush( sync )
-                     c = obj.compress( data[3000:] )
-                     d = obj.flush()
--                except:
--                    print("Error for flush mode={}, level={}"
--                          .format(sync, level))
--                    raise
--                self.assertEqual(zlib.decompress(b''.join([a,b,c,d])),
--                                 data, ("Decompress failed: flush "
--                                        "mode=%i, level=%i") % (sync, level))
--                del obj
-+                    self.assertEqual(zlib.decompress(b''.join([a,b,c,d])),
-+                                     data, ("Decompress failed: flush "
-+                                            "mode=%i, level=%i") % (sync, level))
-+                    del obj
- 
-     @unittest.skipUnless(hasattr(zlib, 'Z_SYNC_FLUSH'),
-                          'requires zlib.Z_SYNC_FLUSH')
---- /dev/null
-+++ b/Lib/test/translationdata/argparse/msgids.txt
-@@ -0,0 +1,36 @@
-+ (default: %(default)s)
-+%(heading)s:
-+%(prog)s: error: %(message)s\n
-+%r is not callable
-+'required' is an invalid argument for positionals
-+.__call__() not defined
-+ambiguous option: %(option)s could match %(matches)s
-+argument "-" with mode %r
-+argument %(argument_name)s: %(message)s
-+can't open '%(filename)s': %(error)s
-+cannot have multiple subparser arguments
-+cannot merge actions - two groups are named %r
-+conflicting subparser alias: %s
-+conflicting subparser: %s
-+dest= is required for options like %r
-+expected at least one argument
-+expected at most one argument
-+expected one argument
-+ignored explicit argument %r
-+invalid %(type)s value: %(value)r
-+invalid choice: %(value)r (choose from %(choices)s)
-+invalid conflict_resolution value: %r
-+invalid option string %(option)r: must start with a character %(prefix_chars)r
-+mutually exclusive arguments must be optional
-+not allowed with argument %s
-+one of the arguments %s is required
-+options
-+positional arguments
-+show program's version number and exit
-+show this help message and exit
-+subcommands
-+the following arguments are required: %s
-+unexpected option string: %s
-+unknown parser %(parser_name)r (choices: %(choices)s)
-+unrecognized arguments: %s
-+usage: 
-\ No newline at end of file
---- a/Lib/tokenize.py
-+++ b/Lib/tokenize.py
-@@ -202,7 +202,7 @@
-                         characters[-2::-1]
-                     )
-                 )
--                if n_backslashes % 2 == 0:
-+                if n_backslashes % 2 == 0 or characters[-1] != "N":
-                     characters.append(character)
-                 else:
-                     consume_until_next_bracket = True
---- a/Lib/turtledemo/clock.py
-+++ b/Lib/turtledemo/clock.py
-@@ -1,8 +1,7 @@
- #!/usr/bin/env python3
--# -*- coding: cp1252 -*-
- """       turtle-example-suite:
- 
--             tdemo_clock.py
-+           turtledemo/clock.py
- 
- Enhanced clock-program, showing date
- and time
-@@ -13,6 +12,9 @@
- from turtle import *
- from datetime import datetime
- 
-+dtfont = "TkFixedFont", 14, "bold"
-+current_day = None
-+
- def jump(distanz, winkel=0):
-     penup()
-     right(winkel)
-@@ -53,11 +55,23 @@
-             jump(-radius)
-         rt(6)
- 
-+def display_date_time():
-+    global current_day
-+    writer.clear()
-+    now = datetime.now()
-+    current_day = now.day
-+    writer.home()
-+    writer.forward(distance=65)
-+    writer.write(wochentag(now), align="center", font=dtfont)
-+    writer.back(distance=150)
-+    writer.write(datum(now), align="center", font=dtfont)
-+    writer.forward(distance=85)
-+
- def setup():
-     global second_hand, minute_hand, hour_hand, writer
-     mode("logo")
-     make_hand_shape("second_hand", 125, 25)
--    make_hand_shape("minute_hand",  130, 25)
-+    make_hand_shape("minute_hand",  115, 25)
-     make_hand_shape("hour_hand", 90, 25)
-     clockface(160)
-     second_hand = Turtle()
-@@ -75,10 +89,10 @@
-         hand.speed(0)
-     ht()
-     writer = Turtle()
--    #writer.mode("logo")
-     writer.ht()
-     writer.pu()
-     writer.bk(85)
-+    display_date_time()
- 
- def wochentag(t):
-     wochentag = ["Monday", "Tuesday", "Wednesday",
-@@ -100,18 +114,11 @@
-     stunde = t.hour + minute/60.0
-     try:
-         tracer(False)  # Terminator can occur here
--        writer.clear()
--        writer.home()
--        writer.forward(65)
--        writer.write(wochentag(t),
--                     align="center", font=("Courier", 14, "bold"))
--        writer.back(150)
--        writer.write(datum(t),
--                     align="center", font=("Courier", 14, "bold"))
--        writer.forward(85)
-         second_hand.setheading(6*sekunde)  # or here
-         minute_hand.setheading(6*minute)
-         hour_hand.setheading(30*stunde)
-+        if t.day != current_day:
-+            display_date_time()
-         tracer(True)
-         ontimer(tick, 100)
-     except Terminator:
---- a/Lib/venv/__init__.py
-+++ b/Lib/venv/__init__.py
-@@ -11,6 +11,7 @@
- import sys
- import sysconfig
- import types
-+import shlex
- 
- 
- CORE_VENV_DEPS = ('pip',)
-@@ -422,11 +423,41 @@
-         :param context: The information for the environment creation request
-                         being processed.
-         """
--        text = text.replace('__VENV_DIR__', context.env_dir)
--        text = text.replace('__VENV_NAME__', context.env_name)
--        text = text.replace('__VENV_PROMPT__', context.prompt)
--        text = text.replace('__VENV_BIN_NAME__', context.bin_name)
--        text = text.replace('__VENV_PYTHON__', context.env_exe)
-+        replacements = {
-+            '__VENV_DIR__': context.env_dir,
-+            '__VENV_NAME__': context.env_name,
-+            '__VENV_PROMPT__': context.prompt,
-+            '__VENV_BIN_NAME__': context.bin_name,
-+            '__VENV_PYTHON__': context.env_exe,
-+        }
-+
-+        def quote_ps1(s):
-+            """
-+            This should satisfy PowerShell quoting rules [1], unless the quoted
-+            string is passed directly to Windows native commands [2].
-+            [1]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_quoting_rules
-+            [2]: https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_parsing#passing-arguments-that-contain-quote-characters
-+            """
-+            s = s.replace("'", "''")
-+            return f"'{s}'"
-+
-+        def quote_bat(s):
-+            return s
-+
-+        # gh-124651: need to quote the template strings properly
-+        quote = shlex.quote
-+        script_path = context.script_path
-+        if script_path.endswith('.ps1'):
-+            quote = quote_ps1
-+        elif script_path.endswith('.bat'):
-+            quote = quote_bat
-+        else:
-+            # fallbacks to POSIX shell compliant quote
-+            quote = shlex.quote
-+
-+        replacements = {key: quote(s) for key, s in replacements.items()}
-+        for key, quoted in replacements.items():
-+            text = text.replace(key, quoted)
-         return text
- 
-     def install_scripts(self, context, path):
-@@ -466,6 +497,7 @@
-                 with open(srcfile, 'rb') as f:
-                     data = f.read()
-                 if not srcfile.endswith(('.exe', '.pdb')):
-+                    context.script_path = srcfile
-                     try:
-                         data = data.decode('utf-8')
-                         data = self.replace_variables(data, context)
---- a/Lib/venv/scripts/common/activate
-+++ b/Lib/venv/scripts/common/activate
-@@ -14,8 +14,9 @@
-         unset _OLD_VIRTUAL_PYTHONHOME
-     fi
- 
--    # Call hash to forget past commands. Without forgetting
--    # past commands the $PATH changes we made may not be respected
-+    # Call hash to forget past locations. Without forgetting
-+    # past locations the $PATH changes we made may not be respected.
-+    # See "man bash" for more details. hash is usually a builtin of your shell
-     hash -r 2> /dev/null
- 
-     if [ -n "${_OLD_VIRTUAL_PS1:-}" ] ; then
-@@ -39,14 +40,14 @@
- if [ "${OSTYPE:-}" = "cygwin" ] || [ "${OSTYPE:-}" = "msys" ] ; then
-     # transform D:\path\to\venv to /d/path/to/venv on MSYS
-     # and to /cygdrive/d/path/to/venv on Cygwin
--    export VIRTUAL_ENV=$(cygpath "__VENV_DIR__")
-+    export VIRTUAL_ENV=$(cygpath __VENV_DIR__)
- else
-     # use the path as-is
--    export VIRTUAL_ENV="__VENV_DIR__"
-+    export VIRTUAL_ENV=__VENV_DIR__
- fi
- 
- _OLD_VIRTUAL_PATH="$PATH"
--PATH="$VIRTUAL_ENV/__VENV_BIN_NAME__:$PATH"
-+PATH="$VIRTUAL_ENV/"__VENV_BIN_NAME__":$PATH"
- export PATH
- 
- # unset PYTHONHOME if set
-@@ -59,9 +60,9 @@
- 
- if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT:-}" ] ; then
-     _OLD_VIRTUAL_PS1="${PS1:-}"
--    PS1="__VENV_PROMPT__${PS1:-}"
-+    PS1=__VENV_PROMPT__"${PS1:-}"
-     export PS1
--    VIRTUAL_ENV_PROMPT="__VENV_PROMPT__"
-+    VIRTUAL_ENV_PROMPT=__VENV_PROMPT__
-     export VIRTUAL_ENV_PROMPT
- fi
- 
---- a/Lib/venv/scripts/posix/activate.csh
-+++ b/Lib/venv/scripts/posix/activate.csh
-@@ -9,17 +9,17 @@
- # Unset irrelevant variables.
- deactivate nondestructive
- 
--setenv VIRTUAL_ENV "__VENV_DIR__"
-+setenv VIRTUAL_ENV __VENV_DIR__
- 
- set _OLD_VIRTUAL_PATH="$PATH"
--setenv PATH "$VIRTUAL_ENV/__VENV_BIN_NAME__:$PATH"
-+setenv PATH "$VIRTUAL_ENV/"__VENV_BIN_NAME__":$PATH"
- 
- 
- set _OLD_VIRTUAL_PROMPT="$prompt"
- 
- if (! "$?VIRTUAL_ENV_DISABLE_PROMPT") then
--    set prompt = "__VENV_PROMPT__$prompt"
--    setenv VIRTUAL_ENV_PROMPT "__VENV_PROMPT__"
-+    set prompt = __VENV_PROMPT__"$prompt"
-+    setenv VIRTUAL_ENV_PROMPT __VENV_PROMPT__
- endif
- 
- alias pydoc python -m pydoc
---- a/Lib/venv/scripts/posix/activate.fish
-+++ b/Lib/venv/scripts/posix/activate.fish
-@@ -33,10 +33,10 @@
- # Unset irrelevant variables.
- deactivate nondestructive
- 
--set -gx VIRTUAL_ENV "__VENV_DIR__"
-+set -gx VIRTUAL_ENV __VENV_DIR__
- 
- set -gx _OLD_VIRTUAL_PATH $PATH
--set -gx PATH "$VIRTUAL_ENV/__VENV_BIN_NAME__" $PATH
-+set -gx PATH "$VIRTUAL_ENV/"__VENV_BIN_NAME__ $PATH
- 
- # Unset PYTHONHOME if set.
- if set -q PYTHONHOME
-@@ -56,7 +56,7 @@
-         set -l old_status $status
- 
-         # Output the venv prompt; color taken from the blue of the Python logo.
--        printf "%s%s%s" (set_color 4B8BBE) "__VENV_PROMPT__" (set_color normal)
-+        printf "%s%s%s" (set_color 4B8BBE) __VENV_PROMPT__ (set_color normal)
- 
-         # Restore the return status of the previous command.
-         echo "exit $old_status" | .
-@@ -65,5 +65,5 @@
-     end
- 
-     set -gx _OLD_FISH_PROMPT_OVERRIDE "$VIRTUAL_ENV"
--    set -gx VIRTUAL_ENV_PROMPT "__VENV_PROMPT__"
-+    set -gx VIRTUAL_ENV_PROMPT __VENV_PROMPT__
- end
---- a/Lib/zipfile/__init__.py
-+++ b/Lib/zipfile/__init__.py
-@@ -295,7 +295,7 @@
-         fpin.seek(-sizeEndCentDir, 2)
-     except OSError:
-         return None
--    data = fpin.read()
-+    data = fpin.read(sizeEndCentDir)
-     if (len(data) == sizeEndCentDir and
-         data[0:4] == stringEndArchive and
-         data[-2:] == b"\000\000"):
-@@ -315,9 +315,9 @@
-     # record signature. The comment is the last item in the ZIP file and may be
-     # up to 64K long.  It is assumed that the "end of central directory" magic
-     # number does not appear in the comment.
--    maxCommentStart = max(filesize - (1 << 16) - sizeEndCentDir, 0)
-+    maxCommentStart = max(filesize - ZIP_MAX_COMMENT - sizeEndCentDir, 0)
-     fpin.seek(maxCommentStart, 0)
--    data = fpin.read()
-+    data = fpin.read(ZIP_MAX_COMMENT + sizeEndCentDir)
-     start = data.rfind(stringEndArchive)
-     if start >= 0:
-         # found the magic number; attempt to unpack and interpret
---- a/Makefile.pre.in
-+++ b/Makefile.pre.in
-@@ -2235,6 +2235,7 @@
- 		test/test_tomllib/data/valid/dates-and-times \
- 		test/test_tomllib/data/valid/multiline-basic-str \
- 		test/test_tools \
-+		test/test_tools/i18n_data \
- 		test/test_ttk \
- 		test/test_unittest \
- 		test/test_unittest/testmock \
-@@ -2246,6 +2247,8 @@
- 		test/test_zoneinfo/data \
- 		test/tokenizedata \
- 		test/tracedmodules \
-+		test/translationdata \
-+		test/translationdata/argparse \
- 		test/typinganndata \
- 		test/wheeldata \
- 		test/xmltestdata \
---- a/Misc/ACKS
-+++ b/Misc/ACKS
-@@ -1792,6 +1792,7 @@
- Eryk Sun
- Sanjay Sundaresan
- Marek Šuppa
-+Danica J. Sutherland
- Hisao Suzuki
- Kalle Svensson
- Andrew Svetlov
---- /dev/null
-+++ b/Misc/NEWS.d/next/C_API/2024-07-04-13-23-27.gh-issue-113601.K3RLqp.rst
-@@ -0,0 +1,2 @@
-+Removed debug build assertions related to interning strings, which were
-+falsely triggered by stable ABI extensions.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Core_and_Builtins/2023-12-30-00-21-45.gh-issue-113570._XQgsW.rst
-@@ -0,0 +1 @@
-+Fixed a bug in ``reprlib.repr`` where it incorrectly called the repr method on shadowed Python built-in types.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Core_and_Builtins/2024-05-12-03-10-36.gh-issue-118950.5Wc4vp.rst
-@@ -0,0 +1 @@
-+Fix bug where SSLProtocol.connection_lost wasn't getting called when OSError was thrown on writing to socket.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Core_and_Builtins/2024-10-03-14-39-41.gh-issue-123378.dCxANf.rst
-@@ -0,0 +1,3 @@
-+Fix a crash in the :meth:`~object.__str__` method of :exc:`UnicodeError`
-+objects when the :attr:`UnicodeError.start` and :attr:`UnicodeError.end`
-+values are invalid or out-of-range. Patch by Bénédikt Tran.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Core_and_Builtins/2024-10-05-23-53-06.gh-issue-125008.ETANpd.rst
-@@ -0,0 +1,2 @@
-+Fix :func:`tokenize.untokenize` producing invalid syntax for
-+double braces preceded by certain escape characters.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Core_and_Builtins/2024-10-29-15-17-31.gh-issue-126139.B4OQ8a.rst
-@@ -0,0 +1,2 @@
-+Provide better error location when attempting to use a :term:`future
-+statement <__future__>` with an unknown future feature.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Documentation/2023-03-28-22-24-45.gh-issue-60712.So5uad.rst
-@@ -0,0 +1,2 @@
-+Include the :class:`object` type in the lists of documented types.
-+Change by Furkan Onder and Martin Panter.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Documentation/2024-07-19-12-22-48.gh-issue-121277.wF_zKd.rst
-@@ -0,0 +1,2 @@
-+Writers of CPython's documentation can now use ``next`` as the version for
-+the ``versionchanged``, ``versionadded``, ``deprecated`` directives.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Documentation/2024-10-07-00-31-17.gh-issue-125018.yKnymn.rst
-@@ -0,0 +1,4 @@
-+The :mod:`importlib.metadata` documentation now includes semantic
-+cross-reference targets for the significant documented APIs. This means
-+intersphinx references like :func:`importlib.metadata.version` will
-+now work as expected.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Documentation/2024-10-10-23-46-54.gh-issue-125277.QAby09.rst
-@@ -0,0 +1,2 @@
-+Require Sphinx 7.2.6 or later to build the Python documentation.
-+Patch by Adam Turner.
---- /dev/null
-+++ b/Misc/NEWS.d/next/IDLE/2024-10-04-15-34-34.gh-issue-122392.V8K3w2.rst
-@@ -0,0 +1,2 @@
-+Increase currently inadequate vertical spacing for the IDLE browsers (path,
-+module, and stack) on high-resolution monitors.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2018-12-04-07-36-27.bpo-14074.fMLKCu.rst
-@@ -0,0 +1,2 @@
-+Fix :mod:`argparse` metavar processing to allow positional arguments to have a
-+tuple metavar.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-04-19-05-58-50.gh-issue-117766.J3xepp.rst
-@@ -0,0 +1 @@
-+Always use :func:`str` to print ``choices`` in :mod:`argparse`.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-07-23-02-24-50.gh-issue-120754.nHb5mG.rst
-@@ -0,0 +1 @@
-+Update unbounded ``read`` calls in :mod:`zipfile` to specify an explicit ``size`` putting a limit on how much data they may read. This also updates handling around ZIP max comment size to match the standard instead of reading comments that are one byte too long.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-08-28-19-27-35.gh-issue-123370.SPZ9Ux.rst
-@@ -0,0 +1 @@
-+Fix the canvas not clearing after running turtledemo clock.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-09-16-12-31-48.gh-issue-123978.z3smEu.rst
-@@ -0,0 +1 @@
-+Remove broken :func:`time.thread_time` and :func:`time.thread_time_ns` on NetBSD.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-09-24-22-38-51.gh-issue-123884.iEPTK4.rst
-@@ -0,0 +1,4 @@
-+Fixed bug in itertools.tee() handling of other tee inputs (a tee in a tee).
-+The output now has the promised *n* independent new iterators.  Formerly,
-+the first iterator was identical (not independent) to the input iterator.
-+This would sometimes give surprising results.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-09-25-18-07-51.gh-issue-120378.NlBSz_.rst
-@@ -0,0 +1,2 @@
-+Fix a crash related to an integer overflow in :func:`curses.resizeterm`
-+and :func:`curses.resize_term`.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-09-26-13-43-39.gh-issue-124594.peYhsP.rst
-@@ -0,0 +1 @@
-+All :mod:`asyncio` REPL prompts run in the same :class:`context <contextvars.Context>`. Contributed by Bartosz Sławecki.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-09-28-02-03-04.gh-issue-124651.bLBGtH.rst
-@@ -0,0 +1 @@
-+Properly quote template strings in :mod:`venv` activation scripts.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-01-13-46-58.gh-issue-124390.dK1Zcm.rst
-@@ -0,0 +1 @@
-+Fixed :exc:`AssertionError` when using :func:`!asyncio.staggered.staggered_race` with :attr:`asyncio.eager_task_factory`.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-01-17-12-20.gh-issue-124858.Zy0tvT.rst
-@@ -0,0 +1 @@
-+Fix reference cycles left in tracebacks in :func:`asyncio.open_connection` when used with ``happy_eyeballs_delay``
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-02-15-05-45.gh-issue-124653.tqsTu9.rst
-@@ -0,0 +1,2 @@
-+Fix detection of the minimal Queue API needed by the :mod:`logging` module.
-+Patch by Bénédikt Tran.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-02-21-11-18.gh-issue-124917.Lnwh5b.rst
-@@ -0,0 +1,2 @@
-+Allow calling :func:`os.path.exists` and :func:`os.path.lexists` with
-+keyword arguments on Windows. Fixes a regression in 3.12.4.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-03-20-45-57.gh-issue-53203.3Sk4Ia.rst
-@@ -0,0 +1,5 @@
-+Fix :func:`time.strptime` for ``%c`` and ``%x`` formats in many locales:
-+Arabic, Bislama, Breton, Bodo, Kashubian, Chuvash, Estonian, French, Irish,
-+Ge'ez, Gurajati, Manx Gaelic, Hebrew, Hindi, Chhattisgarhi, Haitian Kreyol,
-+Japanese, Kannada, Korean, Marathi, Malay, Norwegian, Nynorsk, Punjabi,
-+Rajasthani, Tok Pisin, Yoruba, Yue Chinese, Yau/Nungon and Chinese.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-04-08-46-00.gh-issue-124958.rea9-x.rst
-@@ -0,0 +1 @@
-+Fix refcycles in exceptions raised from :class:`asyncio.TaskGroup` and the python implementation of :class:`asyncio.Future`
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-08-12-09-09.gh-issue-124969._VBQLq.rst
-@@ -0,0 +1,4 @@
-+Fix ``locale.nl_langinfo(locale.ALT_DIGITS)`` on platforms with glibc.
-+Now it returns a string consisting of up to 100 semicolon-separated symbols
-+(an empty string in most locales) on all Posix platforms.
-+Previously it only returned the first symbol or an empty string.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-08-21-17-16.gh-issue-125069.0RP0Mx.rst
-@@ -0,0 +1,4 @@
-+Fix an issue where providing a :class:`pathlib.PurePath` object as an
-+initializer argument to a second :class:`~pathlib.PurePath` object with a
-+different flavour resulted in arguments to the former object's initializer
-+ being joined by the latter object's flavour.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-09-07-09-00.gh-issue-125118.J9rQ1S.rst
-@@ -0,0 +1 @@
-+Don't copy arbitrary values to :c:expr:`_Bool` in the :mod:`struct` module.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-09-17-07-33.gh-issue-52551.PBakSY.rst
-@@ -0,0 +1,8 @@
-+Fix encoding issues in :func:`time.strftime`, the
-+:meth:`~datetime.datetime.strftime` method of the :mod:`datetime` classes
-+:class:`~datetime.datetime`, :class:`~datetime.date` and
-+:class:`~datetime.time` and formatting of these classes. Characters not
-+encodable in the current locale are now acceptable in the format string.
-+Surrogate pairs and sequence of surrogatescape-encoded bytes are no longer
-+recombinated. Embedded null character no longer terminates the format
-+string.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-09-21-42-43.gh-issue-61011.pQXZb1.rst
-@@ -0,0 +1,4 @@
-+Fix inheritance of nested mutually exclusive groups from parent parser in
-+:class:`argparse.ArgumentParser`. Previously, all nested mutually exclusive
-+groups lost their connection to the group containing them and were displayed
-+as belonging directly to the parser.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-10-19-57-35.gh-issue-125254.RtZxXS.rst
-@@ -0,0 +1 @@
-+Fix a bug where ArgumentError includes the incorrect ambiguous option in :mod:`argparse`.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-13-20-21-35.gh-issue-53203.Rz1c8A.rst
-@@ -0,0 +1,2 @@
-+Fix :func:`time.strptime` for ``%c``, ``%x`` and ``%X`` formats in many
-+locales that use non-ASCII digits, like Persian, Burmese, Odia and Shan.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-14-02-27-03.gh-issue-100141.NuAcwa.rst
-@@ -0,0 +1 @@
-+Fixed the bug where :mod:`pdb` will be stuck in an infinite loop when debugging an empty file.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-14-04-44-12.gh-issue-125422.MlVuC6.rst
-@@ -0,0 +1 @@
-+Fixed the bug where :mod:`pdb` and :mod:`bdb` can step into the bottom caller frame.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-14-17-29-34.gh-issue-125451.fmP3T9.rst
-@@ -0,0 +1,2 @@
-+Fix deadlock when :class:`concurrent.futures.ProcessPoolExecutor` shuts down
-+concurrently with an error when feeding a job to a worker process.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-15-14-01-03.gh-issue-125519.TqGh6a.rst
-@@ -0,0 +1,2 @@
-+Improve traceback if :func:`importlib.reload` is called with an object that
-+is not a module. Patch by Alex Waygood.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-17-16-10-29.gh-issue-125259.oMew0c.rst
-@@ -0,0 +1 @@
-+Fix the notes removal logic for errors thrown in enum initialization.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-18-08-58-10.gh-issue-125660.sDdDqO.rst
-@@ -0,0 +1 @@
-+Reject invalid unicode escapes for Python implementation of :func:`json.loads`.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-18-09-51-29.gh-issue-125682.vsj4cU.rst
-@@ -0,0 +1,2 @@
-+Reject non-ASCII digits in the Python implementation of :func:`json.loads`
-+conforming to the JSON specification.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-22-13-28-00.gh-issue-125355.zssHm_.rst
-@@ -0,0 +1,7 @@
-+Fix several bugs in :meth:`argparse.ArgumentParser.parse_intermixed_args`.
-+
-+* The parser no longer changes temporarily during parsing.
-+* Default values are not processed twice.
-+* Required mutually exclusive groups containing positional arguments are now supported.
-+* The missing arguments report now includes the names of all required optional and positional arguments.
-+* Unknown options can be intermixed with positional arguments in parse_known_intermixed_args().
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-23-17-45-40.gh-issue-125884.41E_PD.rst
-@@ -0,0 +1 @@
-+Fixed the bug for :mod:`pdb` where it can't set breakpoints on functions with certain annotations.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-24-14-08-10.gh-issue-125789.eaiAMw.rst
-@@ -0,0 +1 @@
-+Fix possible crash when mutating list of callbacks returned by :attr:`!asyncio.Future._callbacks`. It now always returns a new copy in C implementation :mod:`!_asyncio`. Patch by Kumar Aditya.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-25-10-53-56.gh-issue-125966.eOCYU_.rst
-@@ -0,0 +1,2 @@
-+Fix a use-after-free crash in :meth:`asyncio.Future.remove_done_callback`.
-+Patch by Bénédikt Tran.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-25-11-13-24.gh-issue-125969.YvbrTr.rst
-@@ -0,0 +1,2 @@
-+Fix an out-of-bounds crash when an evil :meth:`asyncio.loop.call_soon`
-+mutates the length of the internal callbacks list. Patch by Bénédikt Tran.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-26-12-50-48.gh-issue-125984.d4vp5_.rst
-@@ -0,0 +1,3 @@
-+Fix use-after-free crashes on :class:`asyncio.Future` objects for which the
-+underlying event loop implements an evil :meth:`~object.__getattribute__`.
-+Reported by Nico-Posada. Patch by Bénédikt Tran.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-28-22-35-22.gh-issue-126083.TuI--n.rst
-@@ -0,0 +1 @@
-+Fixed a reference leak in :class:`asyncio.Task` objects when reinitializing the same object with a non-``None`` context. Patch by Nico Posada.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-29-10-38-28.gh-issue-126080.qKRBuo.rst
-@@ -0,0 +1,3 @@
-+Fix a use-after-free crash on :class:`asyncio.Task` objects for which the
-+underlying event loop implements an evil :meth:`~object.__getattribute__`.
-+Reported by Nico-Posada. Patch by Bénédikt Tran.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-29-10-58-52.gh-issue-126106.rlF798.rst
-@@ -0,0 +1 @@
-+Fixes a possible ``NULL`` pointer dereference in :mod:`ssl`.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-29-11-45-44.gh-issue-126105.cOL-R6.rst
-@@ -0,0 +1 @@
-+Fix a crash in :mod:`ast` when the :attr:`ast.AST._fields` attribute is deleted.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-30-20-45-17.gh-issue-126205.CHEmtx.rst
-@@ -0,0 +1,2 @@
-+Fix issue where :func:`urllib.request.pathname2url` generated URLs beginning
-+with four slashes (rather than two) when given a Windows UNC path.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-10-31-14-06-28.gh-issue-126220.uJAJCU.rst
-@@ -0,0 +1,2 @@
-+Fix crash in :class:`!cProfile.Profile` and :class:`!_lsprof.Profiler` when their
-+callbacks were directly called with 0 arguments.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Library/2024-11-01-14-31-41.gh-issue-126138.yTniOG.rst
-@@ -0,0 +1,3 @@
-+Fix a use-after-free crash on :class:`asyncio.Task` objects
-+whose underlying coroutine yields an object that implements
-+an evil :meth:`~object.__getattribute__`. Patch by Nico Posada.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Tests/2024-09-30-22-52-44.gh-issue-124295.VZy5kx.rst
-@@ -0,0 +1 @@
-+Add translation tests to the :mod:`argparse` module.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Tests/2024-10-07-14-13-38.gh-issue-125041.PKLWDf.rst
-@@ -0,0 +1,3 @@
-+Re-enable skipped tests for :mod:`zlib` on the s390x architecture: only skip
-+checks of the compressed bytes, which can be different between zlib's
-+software implementation and the hardware-accelerated implementation.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Windows/2024-09-24-19-04-56.gh-issue-124448.srVT3d.rst
-@@ -0,0 +1 @@
-+Updated bundled Tcl/Tk to 8.6.15.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Windows/2024-10-15-21-28-43.gh-issue-125550.hmGWCP.rst
-@@ -0,0 +1,2 @@
-+Enable the :ref:`launcher` to detect Python 3.14 installs from the Windows
-+Store.
---- /dev/null
-+++ b/Misc/NEWS.d/next/Windows/2024-10-29-19-48-03.gh-issue-125315.jdB9qN.rst
-@@ -0,0 +1,2 @@
-+Avoid crashing in :mod:`platform` due to slow WMI calls on some Windows
-+machines.
---- a/Misc/externals.spdx.json
-+++ b/Misc/externals.spdx.json
-@@ -90,42 +90,42 @@
-       "checksums": [
-         {
-           "algorithm": "SHA256",
--          "checksumValue": "6e33a88f116822167734cd72b693b5d30ced130a3cae6dc2ff696042f993bb42"
-+          "checksumValue": "4c23f0dd3efcbe6f3a22c503a68d147617bb30c4f5290f1eb3eaacf0b460440b"
-         }
-       ],
--      "downloadLocation": "https://github.com/python/cpython-source-deps/archive/refs/tags/tcl-core-8.6.13.0.tar.gz",
-+      "downloadLocation": "https://github.com/python/cpython-source-deps/archive/refs/tags/tcl-core-8.6.15.0.tar.gz",
-       "externalRefs": [
-         {
-           "referenceCategory": "SECURITY",
--          "referenceLocator": "cpe:2.3:a:tcl_tk:tcl_tk:8.6.13.0:*:*:*:*:*:*:*",
-+          "referenceLocator": "cpe:2.3:a:tcl_tk:tcl_tk:8.6.15.0:*:*:*:*:*:*:*",
-           "referenceType": "cpe23Type"
-         }
-       ],
-       "licenseConcluded": "NOASSERTION",
-       "name": "tcl-core",
-       "primaryPackagePurpose": "SOURCE",
--      "versionInfo": "8.6.13.0"
-+      "versionInfo": "8.6.15.0"
-     },
-     {
-       "SPDXID": "SPDXRef-PACKAGE-tk",
-       "checksums": [
-         {
-           "algorithm": "SHA256",
--          "checksumValue": "896c1f488bdd0159091bd5cce124b756dfdffa4a5350b7fd4d7d8e48421089a4"
-+          "checksumValue": "0ae56d39bca92865f338529557a1e56d110594184b6dc5a91339c5675751e264"
-         }
-       ],
--      "downloadLocation": "https://github.com/python/cpython-source-deps/archive/refs/tags/tk-8.6.13.0.tar.gz",
-+      "downloadLocation": "https://github.com/python/cpython-source-deps/archive/refs/tags/tk-8.6.15.0.tar.gz",
-       "externalRefs": [
-         {
-           "referenceCategory": "SECURITY",
--          "referenceLocator": "cpe:2.3:a:tcl_tk:tcl_tk:8.6.13.0:*:*:*:*:*:*:*",
-+          "referenceLocator": "cpe:2.3:a:tcl_tk:tcl_tk:8.6.15.0:*:*:*:*:*:*:*",
-           "referenceType": "cpe23Type"
-         }
-       ],
-       "licenseConcluded": "NOASSERTION",
-       "name": "tk",
-       "primaryPackagePurpose": "SOURCE",
--      "versionInfo": "8.6.13.0"
-+      "versionInfo": "8.6.15.0"
-     },
-     {
-       "SPDXID": "SPDXRef-PACKAGE-tix",
---- a/Modules/_asynciomodule.c
-+++ b/Modules/_asynciomodule.c
-@@ -430,18 +430,22 @@
- static int
- future_schedule_callbacks(asyncio_state *state, FutureObj *fut)
- {
--    Py_ssize_t len;
--    Py_ssize_t i;
--
-     if (fut->fut_callback0 != NULL) {
-         /* There's a 1st callback */
- 
--        int ret = call_soon(state,
--            fut->fut_loop, fut->fut_callback0,
--            (PyObject *)fut, fut->fut_context0);
--
--        Py_CLEAR(fut->fut_callback0);
--        Py_CLEAR(fut->fut_context0);
-+        // Beware: An evil call_soon could alter fut_callback0 or fut_context0.
-+        // Since we are anyway clearing them after the call, whether call_soon
-+        // succeeds or not, the idea is to transfer ownership so that external
-+        // code is not able to alter them during the call.
-+        PyObject *fut_callback0 = fut->fut_callback0;
-+        fut->fut_callback0 = NULL;
-+        PyObject *fut_context0 = fut->fut_context0;
-+        fut->fut_context0 = NULL;
-+
-+        int ret = call_soon(state, fut->fut_loop, fut_callback0,
-+                            (PyObject *)fut, fut_context0);
-+        Py_CLEAR(fut_callback0);
-+        Py_CLEAR(fut_context0);
-         if (ret) {
-             /* If an error occurs in pure-Python implementation,
-                all callbacks are cleared. */
-@@ -458,27 +462,25 @@
-         return 0;
-     }
- 
--    len = PyList_GET_SIZE(fut->fut_callbacks);
--    if (len == 0) {
--        /* The list of callbacks was empty; clear it and return. */
--        Py_CLEAR(fut->fut_callbacks);
--        return 0;
--    }
--
--    for (i = 0; i < len; i++) {
--        PyObject *cb_tup = PyList_GET_ITEM(fut->fut_callbacks, i);
-+    // Beware: An evil call_soon could change fut->fut_callbacks.
-+    // The idea is to transfer the ownership of the callbacks list
-+    // so that external code is not able to mutate the list during
-+    // the iteration.
-+    PyObject *callbacks = fut->fut_callbacks;
-+    fut->fut_callbacks = NULL;
-+    Py_ssize_t n = PyList_GET_SIZE(callbacks);
-+    for (Py_ssize_t i = 0; i < n; i++) {
-+        assert(PyList_GET_SIZE(callbacks) == n);
-+        PyObject *cb_tup = PyList_GET_ITEM(callbacks, i);
-         PyObject *cb = PyTuple_GET_ITEM(cb_tup, 0);
-         PyObject *ctx = PyTuple_GET_ITEM(cb_tup, 1);
- 
-         if (call_soon(state, fut->fut_loop, cb, (PyObject *)fut, ctx)) {
--            /* If an error occurs in pure-Python implementation,
--               all callbacks are cleared. */
--            Py_CLEAR(fut->fut_callbacks);
-+            Py_DECREF(callbacks);
-             return -1;
-         }
-     }
--
--    Py_CLEAR(fut->fut_callbacks);
-+    Py_DECREF(callbacks);
-     return 0;
- }
- 
-@@ -1042,7 +1044,12 @@
-     ENSURE_FUTURE_ALIVE(state, self)
- 
-     if (self->fut_callback0 != NULL) {
--        int cmp = PyObject_RichCompareBool(self->fut_callback0, fn, Py_EQ);
-+        // Beware: An evil PyObject_RichCompareBool could free fut_callback0
-+        // before a recursive call is made with that same arg. For details, see
-+        // https://github.com/python/cpython/pull/125967#discussion_r1816593340.
-+        PyObject *fut_callback0 = Py_NewRef(self->fut_callback0);
-+        int cmp = PyObject_RichCompareBool(fut_callback0, fn, Py_EQ);
-+        Py_DECREF(fut_callback0);
-         if (cmp == -1) {
-             return NULL;
-         }
-@@ -1290,52 +1297,49 @@
- FutureObj_get_callbacks(FutureObj *fut, void *Py_UNUSED(ignored))
- {
-     asyncio_state *state = get_asyncio_state_by_def((PyObject *)fut);
--    Py_ssize_t i;
--
-     ENSURE_FUTURE_ALIVE(state, fut)
- 
--    if (fut->fut_callback0 == NULL) {
--        if (fut->fut_callbacks == NULL) {
--            Py_RETURN_NONE;
--        }
--
--        return Py_NewRef(fut->fut_callbacks);
-+    Py_ssize_t len = 0;
-+    if (fut->fut_callback0 != NULL) {
-+        len++;
-     }
--
--    Py_ssize_t len = 1;
-     if (fut->fut_callbacks != NULL) {
-         len += PyList_GET_SIZE(fut->fut_callbacks);
-     }
- 
--
--    PyObject *new_list = PyList_New(len);
--    if (new_list == NULL) {
--        return NULL;
-+    if (len == 0) {
-+        Py_RETURN_NONE;
-     }
- 
--    PyObject *tup0 = PyTuple_New(2);
--    if (tup0 == NULL) {
--        Py_DECREF(new_list);
-+    PyObject *callbacks = PyList_New(len);
-+    if (callbacks == NULL) {
-         return NULL;
-     }
- 
--    Py_INCREF(fut->fut_callback0);
--    PyTuple_SET_ITEM(tup0, 0, fut->fut_callback0);
--    assert(fut->fut_context0 != NULL);
--    Py_INCREF(fut->fut_context0);
--    PyTuple_SET_ITEM(tup0, 1, (PyObject *)fut->fut_context0);
--
--    PyList_SET_ITEM(new_list, 0, tup0);
-+    Py_ssize_t i = 0;
-+    if (fut->fut_callback0 != NULL) {
-+        PyObject *tup0 = PyTuple_New(2);
-+        if (tup0 == NULL) {
-+            Py_DECREF(callbacks);
-+            return NULL;
-+        }
-+        PyTuple_SET_ITEM(tup0, 0, Py_NewRef(fut->fut_callback0));
-+        assert(fut->fut_context0 != NULL);
-+        PyTuple_SET_ITEM(tup0, 1, Py_NewRef(fut->fut_context0));
-+        PyList_SET_ITEM(callbacks, i, tup0);
-+        i++;
-+    }
- 
-     if (fut->fut_callbacks != NULL) {
--        for (i = 0; i < PyList_GET_SIZE(fut->fut_callbacks); i++) {
--            PyObject *cb = PyList_GET_ITEM(fut->fut_callbacks, i);
-+        for (Py_ssize_t j = 0; j < PyList_GET_SIZE(fut->fut_callbacks); j++) {
-+            PyObject *cb = PyList_GET_ITEM(fut->fut_callbacks, j);
-             Py_INCREF(cb);
--            PyList_SET_ITEM(new_list, i + 1, cb);
-+            PyList_SET_ITEM(callbacks, i, cb);
-+            i++;
-         }
-     }
- 
--    return new_list;
-+    return callbacks;
- }
- 
- static PyObject *
-@@ -2139,7 +2143,7 @@
-             return -1;
-         }
-     } else {
--        self->task_context = Py_NewRef(context);
-+        Py_XSETREF(self->task_context, Py_NewRef(context));
-     }
- 
-     Py_CLEAR(self->task_fut_waiter);
-@@ -2747,7 +2751,11 @@
-         return -1;
-     }
- 
--    int ret = call_soon(state, task->task_loop, cb, NULL, task->task_context);
-+    // Beware: An evil call_soon could alter task_context.
-+    // See: https://github.com/python/cpython/issues/126080.
-+    PyObject *task_context = Py_NewRef(task->task_context);
-+    int ret = call_soon(state, task->task_loop, cb, NULL, task_context);
-+    Py_DECREF(task_context);
-     Py_DECREF(cb);
-     return ret;
- }
-@@ -2986,8 +2994,17 @@
-         if (task->task_must_cancel) {
-             PyObject *r;
-             int is_true;
-+
-+            // Beware: An evil `__getattribute__` could
-+            // prematurely delete task->task_cancel_msg before the
-+            // task is cancelled, thereby causing a UAF crash.
-+            //
-+            // See https://github.com/python/cpython/issues/126138
-+            PyObject *task_cancel_msg = Py_NewRef(task->task_cancel_msg);
-             r = PyObject_CallMethodOneArg(result, &_Py_ID(cancel),
--                                             task->task_cancel_msg);
-+                                          task_cancel_msg);
-+            Py_DECREF(task_cancel_msg);
-+
-             if (r == NULL) {
-                 return NULL;
-             }
-@@ -3079,8 +3096,17 @@
-         if (task->task_must_cancel) {
-             PyObject *r;
-             int is_true;
-+
-+            // Beware: An evil `__getattribute__` could
-+            // prematurely delete task->task_cancel_msg before the
-+            // task is cancelled, thereby causing a UAF crash.
-+            //
-+            // See https://github.com/python/cpython/issues/126138
-+            PyObject *task_cancel_msg = Py_NewRef(task->task_cancel_msg);
-             r = PyObject_CallMethodOneArg(result, &_Py_ID(cancel),
--                                             task->task_cancel_msg);
-+                                          task_cancel_msg);
-+            Py_DECREF(task_cancel_msg);
-+
-             if (r == NULL) {
-                 return NULL;
-             }
---- a/Modules/_bisectmodule.c
-+++ b/Modules/_bisectmodule.c
-@@ -66,7 +66,7 @@
-     if (sq_item == NULL) {
-         return -1;
-     }
--    if (Py_EnterRecursiveCall("in _bisect.bisect_right")) {
-+    if (Py_EnterRecursiveCall(" in _bisect.bisect_right")) {
-         return -1;
-     }
-     PyTypeObject *tp = Py_TYPE(item);
-@@ -250,7 +250,7 @@
-     if (sq_item == NULL) {
-         return -1;
-     }
--    if (Py_EnterRecursiveCall("in _bisect.bisect_left")) {
-+    if (Py_EnterRecursiveCall(" in _bisect.bisect_left")) {
-         return -1;
-     }
-     PyTypeObject *tp = Py_TYPE(item);
---- a/Modules/_ctypes/_ctypes.c
-+++ b/Modules/_ctypes/_ctypes.c
-@@ -2269,7 +2269,7 @@
-         return NULL;
-     }
-     if (as_parameter) {
--        if (_Py_EnterRecursiveCall("while processing _as_parameter_")) {
-+        if (_Py_EnterRecursiveCall(" while processing _as_parameter_")) {
-             Py_DECREF(as_parameter);
-             Py_XDECREF(exc);
-             return NULL;
---- a/Modules/_cursesmodule.c
-+++ b/Modules/_cursesmodule.c
-@@ -4071,9 +4071,9 @@
- /*[clinic input]
- _curses.resizeterm
- 
--    nlines: int
-+    nlines: short
-         Height.
--    ncols: int
-+    ncols: short
-         Width.
-     /
- 
-@@ -4084,8 +4084,8 @@
- [clinic start generated code]*/
- 
- static PyObject *
--_curses_resizeterm_impl(PyObject *module, int nlines, int ncols)
--/*[clinic end generated code: output=56d6bcc5194ad055 input=0fca02ebad5ffa82]*/
-+_curses_resizeterm_impl(PyObject *module, short nlines, short ncols)
-+/*[clinic end generated code: output=4de3abab50c67f02 input=414e92a63e3e9899]*/
- {
-     PyObject *result;
- 
-@@ -4107,9 +4107,9 @@
- /*[clinic input]
- _curses.resize_term
- 
--    nlines: int
-+    nlines: short
-         Height.
--    ncols: int
-+    ncols: short
-         Width.
-     /
- 
-@@ -4123,8 +4123,8 @@
- [clinic start generated code]*/
- 
- static PyObject *
--_curses_resize_term_impl(PyObject *module, int nlines, int ncols)
--/*[clinic end generated code: output=9e26d8b9ea311ed2 input=2197edd05b049ed4]*/
-+_curses_resize_term_impl(PyObject *module, short nlines, short ncols)
-+/*[clinic end generated code: output=46c6d749fa291dbd input=276afa43d8ea7091]*/
- {
-     PyObject *result;
- 
---- a/Modules/_datetimemodule.c
-+++ b/Modules/_datetimemodule.c
-@@ -1501,7 +1501,7 @@
-     PyObject *tzinfo = get_tzinfo_member(object);
- 
-     if (tzinfo == Py_None || tzinfo == NULL) {
--        return PyBytes_FromStringAndSize(NULL, 0);
-+        return PyUnicode_FromStringAndSize(NULL, 0);
-     }
- 
-     assert(tzinfoarg != NULL);
-@@ -1512,7 +1512,7 @@
-                          tzinfoarg) < 0)
-         return NULL;
- 
--    return PyBytes_FromStringAndSize(buf, strlen(buf));
-+    return PyUnicode_FromString(buf);
- }
- 
- static PyObject *
-@@ -1569,7 +1569,7 @@
-     else
-         sprintf(freplacement, "%06d", 0);
- 
--    return PyBytes_FromStringAndSize(freplacement, strlen(freplacement));
-+    return PyUnicode_FromString(freplacement);
- }
- 
- /* I sure don't want to reproduce the strftime code from the time module,
-@@ -1590,79 +1590,60 @@
-     PyObject *Zreplacement = NULL;      /* py string, replacement for %Z */
-     PyObject *freplacement = NULL;      /* py string, replacement for %f */
- 
--    const char *pin;            /* pointer to next char in input format */
--    Py_ssize_t flen;            /* length of input format */
--    char ch;                    /* next char in input format */
--
--    PyObject *newfmt = NULL;            /* py string, the output format */
--    char *pnew;         /* pointer to available byte in output format */
--    size_t totalnew;            /* number bytes total in output format buffer,
--                               exclusive of trailing \0 */
--    size_t usednew;     /* number bytes used so far in output format buffer */
--
--    const char *ptoappend;      /* ptr to string to append to output buffer */
--    Py_ssize_t ntoappend;       /* # of bytes to append to output buffer */
--
-     assert(object && format && timetuple);
-     assert(PyUnicode_Check(format));
--    /* Convert the input format to a C string and size */
--    pin = PyUnicode_AsUTF8AndSize(format, &flen);
--    if (!pin)
-+
-+    PyObject *strftime = _PyImport_GetModuleAttrString("time", "strftime");
-+    if (strftime == NULL) {
-         return NULL;
-+    }
- 
-     /* Scan the input format, looking for %z/%Z/%f escapes, building
-      * a new format.  Since computing the replacements for those codes
-      * is expensive, don't unless they're actually used.
-      */
--    if (flen > INT_MAX - 1) {
--        PyErr_NoMemory();
--        goto Done;
--    }
--
--    totalnew = flen + 1;        /* realistic if no %z/%Z */
--    newfmt = PyBytes_FromStringAndSize(NULL, totalnew);
--    if (newfmt == NULL) goto Done;
--    pnew = PyBytes_AsString(newfmt);
--    usednew = 0;
--
--    while ((ch = *pin++) != '\0') {
--        if (ch != '%') {
--            ptoappend = pin - 1;
--            ntoappend = 1;
--        }
--        else if ((ch = *pin++) == '\0') {
--        /* Null byte follows %, copy only '%'.
--         *
--         * Back the pin up one char so that we catch the null check
--         * the next time through the loop.*/
--            pin--;
--            ptoappend = pin - 1;
--            ntoappend = 1;
-+
-+    _PyUnicodeWriter writer;
-+    _PyUnicodeWriter_Init(&writer);
-+    writer.overallocate = 1;
-+
-+    Py_ssize_t flen = PyUnicode_GET_LENGTH(format);
-+    Py_ssize_t i = 0;
-+    Py_ssize_t start = 0;
-+    Py_ssize_t end = 0;
-+    while (i != flen) {
-+        i = PyUnicode_FindChar(format, '%', i, flen, 1);
-+        if (i < 0) {
-+            assert(!PyErr_Occurred());
-+            break;
-+        }
-+        end = i;
-+        i++;
-+        if (i == flen) {
-+            break;
-         }
-+        Py_UCS4 ch = PyUnicode_READ_CHAR(format, i);
-+        i++;
-         /* A % has been seen and ch is the character after it. */
--        else if (ch == 'z') {
-+        PyObject *replacement = NULL;
-+        if (ch == 'z') {
-             /* %z -> +HHMM */
-             if (zreplacement == NULL) {
-                 zreplacement = make_somezreplacement(object, "", tzinfoarg);
-                 if (zreplacement == NULL)
--                    goto Done;
-+                    goto Error;
-             }
--            assert(zreplacement != NULL);
--            assert(PyBytes_Check(zreplacement));
--            ptoappend = PyBytes_AS_STRING(zreplacement);
--            ntoappend = PyBytes_GET_SIZE(zreplacement);
-+            replacement = zreplacement;
-         }
--        else if (ch == ':' && *pin == 'z' && pin++) {
-+        else if (ch == ':' && i < flen && PyUnicode_READ_CHAR(format, i) == 'z') {
-             /* %:z -> +HH:MM */
-+            i++;
-             if (colonzreplacement == NULL) {
-                 colonzreplacement = make_somezreplacement(object, ":", tzinfoarg);
-                 if (colonzreplacement == NULL)
--                    goto Done;
-+                    goto Error;
-             }
--            assert(colonzreplacement != NULL);
--            assert(PyBytes_Check(colonzreplacement));
--            ptoappend = PyBytes_AS_STRING(colonzreplacement);
--            ntoappend = PyBytes_GET_SIZE(colonzreplacement);
-+            replacement = colonzreplacement;
-         }
-         else if (ch == 'Z') {
-             /* format tzname */
-@@ -1670,79 +1651,63 @@
-                 Zreplacement = make_Zreplacement(object,
-                                                  tzinfoarg);
-                 if (Zreplacement == NULL)
--                    goto Done;
-+                    goto Error;
-             }
--            assert(Zreplacement != NULL);
--            assert(PyUnicode_Check(Zreplacement));
--            ptoappend = PyUnicode_AsUTF8AndSize(Zreplacement,
--                                                  &ntoappend);
--            if (ptoappend == NULL)
--                goto Done;
-+            replacement = Zreplacement;
-         }
-         else if (ch == 'f') {
-             /* format microseconds */
-             if (freplacement == NULL) {
-                 freplacement = make_freplacement(object);
-                 if (freplacement == NULL)
--                    goto Done;
-+                    goto Error;
-             }
--            assert(freplacement != NULL);
--            assert(PyBytes_Check(freplacement));
--            ptoappend = PyBytes_AS_STRING(freplacement);
--            ntoappend = PyBytes_GET_SIZE(freplacement);
-+            replacement = freplacement;
-         }
-         else {
-             /* percent followed by something else */
--            ptoappend = pin - 2;
--            ntoappend = 2;
--        }
--
--        /* Append the ntoappend chars starting at ptoappend to
--         * the new format.
--         */
--        if (ntoappend == 0)
-             continue;
--        assert(ptoappend != NULL);
--        assert(ntoappend > 0);
--        while (usednew + ntoappend > totalnew) {
--            if (totalnew > (PY_SSIZE_T_MAX >> 1)) { /* overflow */
--                PyErr_NoMemory();
--                goto Done;
--            }
--            totalnew <<= 1;
--            if (_PyBytes_Resize(&newfmt, totalnew) < 0)
--                goto Done;
--            pnew = PyBytes_AsString(newfmt) + usednew;
--        }
--        memcpy(pnew, ptoappend, ntoappend);
--        pnew += ntoappend;
--        usednew += ntoappend;
--        assert(usednew <= totalnew);
-+        }
-+        assert(replacement != NULL);
-+        assert(PyUnicode_Check(replacement));
-+        if (_PyUnicodeWriter_WriteSubstring(&writer, format, start, end) < 0) {
-+            goto Error;
-+        }
-+        start = i;
-+        if (_PyUnicodeWriter_WriteStr(&writer, replacement) < 0) {
-+            goto Error;
-+        }
-     }  /* end while() */
- 
--    if (_PyBytes_Resize(&newfmt, usednew) < 0)
--        goto Done;
--    {
--        PyObject *format;
--        PyObject *strftime = _PyImport_GetModuleAttrString("time", "strftime");
--
--        if (strftime == NULL)
-+    PyObject *newformat;
-+    if (start == 0) {
-+        _PyUnicodeWriter_Dealloc(&writer);
-+        newformat = Py_NewRef(format);
-+    }
-+    else {
-+        if (_PyUnicodeWriter_WriteSubstring(&writer, format, start, flen) < 0) {
-+            goto Error;
-+        }
-+        newformat = _PyUnicodeWriter_Finish(&writer);
-+        if (newformat == NULL) {
-             goto Done;
--        format = PyUnicode_FromString(PyBytes_AS_STRING(newfmt));
--        if (format != NULL) {
--            result = PyObject_CallFunctionObjArgs(strftime,
--                                                   format, timetuple, NULL);
--            Py_DECREF(format);
-         }
--        Py_DECREF(strftime);
-     }
-+    result = PyObject_CallFunctionObjArgs(strftime,
-+                                          newformat, timetuple, NULL);
-+    Py_DECREF(newformat);
-+
-  Done:
-     Py_XDECREF(freplacement);
-     Py_XDECREF(zreplacement);
-     Py_XDECREF(colonzreplacement);
-     Py_XDECREF(Zreplacement);
--    Py_XDECREF(newfmt);
-+    Py_XDECREF(strftime);
-     return result;
-+
-+ Error:
-+    _PyUnicodeWriter_Dealloc(&writer);
-+    goto Done;
- }
- 
- /* ---------------------------------------------------------------------------
---- a/Modules/_functoolsmodule.c
-+++ b/Modules/_functoolsmodule.c
-@@ -734,12 +734,14 @@
- PyDoc_STRVAR(functools_reduce_doc,
- "reduce(function, iterable[, initial]) -> value\n\
- \n\
--Apply a function of two arguments cumulatively to the items of a sequence\n\
--or iterable, from left to right, so as to reduce the iterable to a single\n\
--value.  For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates\n\
--((((1+2)+3)+4)+5).  If initial is present, it is placed before the items\n\
--of the iterable in the calculation, and serves as a default when the\n\
--iterable is empty.");
-+Apply a function of two arguments cumulatively to the items of an iterable, from left to right.\n\
-+\n\
-+This effectively reduces the iterable to a single value.  If initial is present,\n\
-+it is placed before the items of the iterable in the calculation, and serves as\n\
-+a default when the iterable is empty.\n\
-+\n\
-+For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])\n\
-+calculates ((((1 + 2) + 3) + 4) + 5).");
- 
- /* lru_cache object **********************************************************/
- 
---- a/Modules/_localemodule.c
-+++ b/Modules/_localemodule.c
-@@ -618,7 +618,42 @@
-                instead of an empty string for nl_langinfo(ERA).  */
-             const char *result = nl_langinfo(item);
-             result = result != NULL ? result : "";
--            return PyUnicode_DecodeLocale(result, NULL);
-+            PyObject *pyresult;
-+#ifdef __GLIBC__
-+#ifdef ALT_DIGITS
-+            if (item == ALT_DIGITS && *result) {
-+                /* According to the POSIX specification the result must be
-+                 * a sequence of up to 100 semicolon-separated strings.
-+                 * But in Glibc they are NUL-separated. */
-+                Py_ssize_t i = 0;
-+                int count = 0;
-+                for (; count < 100 && result[i]; count++) {
-+                    i += strlen(result + i) + 1;
-+                }
-+                char *buf = PyMem_Malloc(i);
-+                if (buf == NULL) {
-+                    PyErr_NoMemory();
-+                    pyresult = NULL;
-+                }
-+                else {
-+                    memcpy(buf, result, i);
-+                    /* Replace all NULs with semicolons. */
-+                    i = 0;
-+                    while (--count) {
-+                        i += strlen(buf + i);
-+                        buf[i++] = ';';
-+                    }
-+                    pyresult = PyUnicode_DecodeLocale(buf, NULL);
-+                    PyMem_Free(buf);
-+                }
-+            }
-+            else
-+#endif
-+#endif
-+            {
-+                pyresult = PyUnicode_DecodeLocale(result, NULL);
-+            }
-+            return pyresult;
-         }
-     PyErr_SetString(PyExc_ValueError, "unsupported langinfo constant");
-     return NULL;
---- a/Modules/_lsprof.c
-+++ b/Modules/_lsprof.c
-@@ -604,6 +604,12 @@
- 
- PyObject* pystart_callback(ProfilerObject* self, PyObject *const *args, Py_ssize_t size)
- {
-+    if (size < 2) {
-+        PyErr_Format(PyExc_TypeError,
-+                     "_pystart_callback expected 2 arguments, got %zd",
-+                     size);
-+        return NULL;
-+    }
-     PyObject* code = args[0];
-     ptrace_enter_call((PyObject*)self, (void *)code, (PyObject *)code);
- 
-@@ -612,6 +618,12 @@
- 
- PyObject* pyreturn_callback(ProfilerObject* self, PyObject *const *args, Py_ssize_t size)
- {
-+    if (size < 3) {
-+        PyErr_Format(PyExc_TypeError,
-+                     "_pyreturn_callback expected 3 arguments, got %zd",
-+                     size);
-+        return NULL;
-+    }
-     PyObject* code = args[0];
-     ptrace_leave_call((PyObject*)self, (void *)code);
- 
-@@ -647,6 +659,12 @@
- 
- PyObject* ccall_callback(ProfilerObject* self, PyObject *const *args, Py_ssize_t size)
- {
-+    if (size < 4) {
-+        PyErr_Format(PyExc_TypeError,
-+                     "_ccall_callback expected 4 arguments, got %zd",
-+                     size);
-+        return NULL;
-+    }
-     if (self->flags & POF_BUILTINS) {
-         PyObject* callable = args[2];
-         PyObject* self_arg = args[3];
-@@ -665,6 +683,12 @@
- 
- PyObject* creturn_callback(ProfilerObject* self, PyObject *const *args, Py_ssize_t size)
- {
-+    if (size < 4) {
-+        PyErr_Format(PyExc_TypeError,
-+                     "_creturn_callback expected 4 arguments, got %zd",
-+                     size);
-+        return NULL;
-+    }
-     if (self->flags & POF_BUILTINS) {
-         PyObject* callable = args[2];
-         PyObject* self_arg = args[3];
---- a/Modules/_ssl.c
-+++ b/Modules/_ssl.c
-@@ -4951,14 +4951,14 @@
- static PyObject *
- PySSLSession_richcompare(PyObject *left, PyObject *right, int op)
- {
--    int result;
--    PyTypeObject *sesstype = ((PySSLSession*)left)->ctx->state->PySSLSession_Type;
--
-     if (left == NULL || right == NULL) {
-         PyErr_BadInternalCall();
-         return NULL;
-     }
- 
-+    int result;
-+    PyTypeObject *sesstype = ((PySSLSession*)left)->ctx->state->PySSLSession_Type;
-+
-     if (!Py_IS_TYPE(left, sesstype) || !Py_IS_TYPE(right, sesstype)) {
-         Py_RETURN_NOTIMPLEMENTED;
-     }
---- a/Modules/_struct.c
-+++ b/Modules/_struct.c
-@@ -483,9 +483,8 @@
- static PyObject *
- nu_bool(_structmodulestate *state, const char *p, const formatdef *f)
- {
--    _Bool x;
--    memcpy((char *)&x, p, sizeof x);
--    return PyBool_FromLong(x != 0);
-+    const _Bool bool_false = 0;
-+    return PyBool_FromLong(memcmp(p, &bool_false, sizeof(_Bool)));
- }
- 
- 
---- a/Modules/clinic/_cursesmodule.c.h
-+++ b/Modules/clinic/_cursesmodule.c.h
-@@ -3688,25 +3688,55 @@
-     {"resizeterm", _PyCFunction_CAST(_curses_resizeterm), METH_FASTCALL, _curses_resizeterm__doc__},
- 
- static PyObject *
--_curses_resizeterm_impl(PyObject *module, int nlines, int ncols);
-+_curses_resizeterm_impl(PyObject *module, short nlines, short ncols);
- 
- static PyObject *
- _curses_resizeterm(PyObject *module, PyObject *const *args, Py_ssize_t nargs)
- {
-     PyObject *return_value = NULL;
--    int nlines;
--    int ncols;
-+    short nlines;
-+    short ncols;
- 
-     if (!_PyArg_CheckPositional("resizeterm", nargs, 2, 2)) {
-         goto exit;
-     }
--    nlines = _PyLong_AsInt(args[0]);
--    if (nlines == -1 && PyErr_Occurred()) {
--        goto exit;
--    }
--    ncols = _PyLong_AsInt(args[1]);
--    if (ncols == -1 && PyErr_Occurred()) {
--        goto exit;
-+    {
-+        long ival = PyLong_AsLong(args[0]);
-+        if (ival == -1 && PyErr_Occurred()) {
-+            goto exit;
-+        }
-+        else if (ival < SHRT_MIN) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is less than minimum");
-+            goto exit;
-+        }
-+        else if (ival > SHRT_MAX) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is greater than maximum");
-+            goto exit;
-+        }
-+        else {
-+            nlines = (short) ival;
-+        }
-+    }
-+    {
-+        long ival = PyLong_AsLong(args[1]);
-+        if (ival == -1 && PyErr_Occurred()) {
-+            goto exit;
-+        }
-+        else if (ival < SHRT_MIN) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is less than minimum");
-+            goto exit;
-+        }
-+        else if (ival > SHRT_MAX) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is greater than maximum");
-+            goto exit;
-+        }
-+        else {
-+            ncols = (short) ival;
-+        }
-     }
-     return_value = _curses_resizeterm_impl(module, nlines, ncols);
- 
-@@ -3739,25 +3769,55 @@
-     {"resize_term", _PyCFunction_CAST(_curses_resize_term), METH_FASTCALL, _curses_resize_term__doc__},
- 
- static PyObject *
--_curses_resize_term_impl(PyObject *module, int nlines, int ncols);
-+_curses_resize_term_impl(PyObject *module, short nlines, short ncols);
- 
- static PyObject *
- _curses_resize_term(PyObject *module, PyObject *const *args, Py_ssize_t nargs)
- {
-     PyObject *return_value = NULL;
--    int nlines;
--    int ncols;
-+    short nlines;
-+    short ncols;
- 
-     if (!_PyArg_CheckPositional("resize_term", nargs, 2, 2)) {
-         goto exit;
-     }
--    nlines = _PyLong_AsInt(args[0]);
--    if (nlines == -1 && PyErr_Occurred()) {
--        goto exit;
--    }
--    ncols = _PyLong_AsInt(args[1]);
--    if (ncols == -1 && PyErr_Occurred()) {
--        goto exit;
-+    {
-+        long ival = PyLong_AsLong(args[0]);
-+        if (ival == -1 && PyErr_Occurred()) {
-+            goto exit;
-+        }
-+        else if (ival < SHRT_MIN) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is less than minimum");
-+            goto exit;
-+        }
-+        else if (ival > SHRT_MAX) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is greater than maximum");
-+            goto exit;
-+        }
-+        else {
-+            nlines = (short) ival;
-+        }
-+    }
-+    {
-+        long ival = PyLong_AsLong(args[1]);
-+        if (ival == -1 && PyErr_Occurred()) {
-+            goto exit;
-+        }
-+        else if (ival < SHRT_MIN) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is less than minimum");
-+            goto exit;
-+        }
-+        else if (ival > SHRT_MAX) {
-+            PyErr_SetString(PyExc_OverflowError,
-+                            "signed short integer is greater than maximum");
-+            goto exit;
-+        }
-+        else {
-+            ncols = (short) ival;
-+        }
-     }
-     return_value = _curses_resize_term_impl(module, nlines, ncols);
- 
-@@ -4313,4 +4373,4 @@
- #ifndef _CURSES_USE_DEFAULT_COLORS_METHODDEF
-     #define _CURSES_USE_DEFAULT_COLORS_METHODDEF
- #endif /* !defined(_CURSES_USE_DEFAULT_COLORS_METHODDEF) */
--/*[clinic end generated code: output=27a2364193b503c1 input=a9049054013a1b77]*/
-+/*[clinic end generated code: output=764ee4c154c6d4a8 input=a9049054013a1b77]*/
---- a/Modules/clinic/posixmodule.c.h
-+++ b/Modules/clinic/posixmodule.c.h
-@@ -1975,25 +1975,55 @@
- #if defined(MS_WINDOWS)
- 
- PyDoc_STRVAR(os__path_exists__doc__,
--"_path_exists($module, path, /)\n"
-+"_path_exists($module, /, path)\n"
- "--\n"
- "\n"
- "Test whether a path exists.  Returns False for broken symbolic links.");
- 
- #define OS__PATH_EXISTS_METHODDEF    \
--    {"_path_exists", (PyCFunction)os__path_exists, METH_O, os__path_exists__doc__},
-+    {"_path_exists", _PyCFunction_CAST(os__path_exists), METH_FASTCALL|METH_KEYWORDS, os__path_exists__doc__},
- 
- static int
- os__path_exists_impl(PyObject *module, path_t *path);
- 
- static PyObject *
--os__path_exists(PyObject *module, PyObject *arg)
-+os__path_exists(PyObject *module, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames)
- {
-     PyObject *return_value = NULL;
-+    #if defined(Py_BUILD_CORE) && !defined(Py_BUILD_CORE_MODULE)
-+
-+    #define NUM_KEYWORDS 1
-+    static struct {
-+        PyGC_Head _this_is_not_used;
-+        PyObject_VAR_HEAD
-+        PyObject *ob_item[NUM_KEYWORDS];
-+    } _kwtuple = {
-+        .ob_base = PyVarObject_HEAD_INIT(&PyTuple_Type, NUM_KEYWORDS)
-+        .ob_item = { &_Py_ID(path), },
-+    };
-+    #undef NUM_KEYWORDS
-+    #define KWTUPLE (&_kwtuple.ob_base.ob_base)
-+
-+    #else  // !Py_BUILD_CORE
-+    #  define KWTUPLE NULL
-+    #endif  // !Py_BUILD_CORE
-+
-+    static const char * const _keywords[] = {"path", NULL};
-+    static _PyArg_Parser _parser = {
-+        .keywords = _keywords,
-+        .fname = "_path_exists",
-+        .kwtuple = KWTUPLE,
-+    };
-+    #undef KWTUPLE
-+    PyObject *argsbuf[1];
-     path_t path = PATH_T_INITIALIZE_P("_path_exists", "path", 0, 0, 1, 1);
-     int _return_value;
- 
--    if (!path_converter(arg, &path)) {
-+    args = _PyArg_UnpackKeywords(args, nargs, NULL, kwnames, &_parser, 1, 1, 0, argsbuf);
-+    if (!args) {
-+        goto exit;
-+    }
-+    if (!path_converter(args[0], &path)) {
-         goto exit;
-     }
-     _return_value = os__path_exists_impl(module, &path);
-@@ -12002,4 +12032,4 @@
- #ifndef OS_WAITSTATUS_TO_EXITCODE_METHODDEF
-     #define OS_WAITSTATUS_TO_EXITCODE_METHODDEF
- #endif /* !defined(OS_WAITSTATUS_TO_EXITCODE_METHODDEF) */
--/*[clinic end generated code: output=67c2e3d4537287c1 input=a9049054013a1b77]*/
-+/*[clinic end generated code: output=6d34c4564aca7725 input=a9049054013a1b77]*/
---- a/Modules/itertoolsmodule.c
-+++ b/Modules/itertoolsmodule.c
-@@ -1137,7 +1137,7 @@
- /*[clinic end generated code: output=1c64519cd859c2f0 input=c99a1472c425d66d]*/
- {
-     Py_ssize_t i;
--    PyObject *it, *copyable, *copyfunc, *result;
-+    PyObject *it, *to, *result;
- 
-     if (n < 0) {
-         PyErr_SetString(PyExc_ValueError, "n must be >= 0");
-@@ -1154,41 +1154,24 @@
-         return NULL;
-     }
- 
--    if (_PyObject_LookupAttr(it, &_Py_ID(__copy__), &copyfunc) < 0) {
--        Py_DECREF(it);
-+    (void)&_Py_ID(__copy__); // Retain a reference to __copy__
-+    itertools_state *state = get_module_state(module);
-+    to = tee_fromiterable(state, it);
-+    Py_DECREF(it);
-+    if (to == NULL) {
-         Py_DECREF(result);
-         return NULL;
-     }
--    if (copyfunc != NULL) {
--        copyable = it;
--    }
--    else {
--        itertools_state *state = get_module_state(module);
--        copyable = tee_fromiterable(state, it);
--        Py_DECREF(it);
--        if (copyable == NULL) {
--            Py_DECREF(result);
--            return NULL;
--        }
--        copyfunc = PyObject_GetAttr(copyable, &_Py_ID(__copy__));
--        if (copyfunc == NULL) {
--            Py_DECREF(copyable);
--            Py_DECREF(result);
--            return NULL;
--        }
--    }
- 
--    PyTuple_SET_ITEM(result, 0, copyable);
-+    PyTuple_SET_ITEM(result, 0, to);
-     for (i = 1; i < n; i++) {
--        copyable = _PyObject_CallNoArgs(copyfunc);
--        if (copyable == NULL) {
--            Py_DECREF(copyfunc);
-+        to = tee_copy((teeobject *)to, NULL);
-+        if (to == NULL) {
-             Py_DECREF(result);
-             return NULL;
-         }
--        PyTuple_SET_ITEM(result, i, copyable);
-+        PyTuple_SET_ITEM(result, i, to);
-     }
--    Py_DECREF(copyfunc);
-     return result;
- }
- 
---- a/Modules/posixmodule.c
-+++ b/Modules/posixmodule.c
-@@ -5209,7 +5209,6 @@
- os._path_exists -> bool
- 
-     path: path_t(allow_fd=True, suppress_value_error=True)
--    /
- 
- Test whether a path exists.  Returns False for broken symbolic links.
- 
-@@ -5217,7 +5216,7 @@
- 
- static int
- os__path_exists_impl(PyObject *module, path_t *path)
--/*[clinic end generated code: output=8da13acf666e16ba input=29198507a6082a57]*/
-+/*[clinic end generated code: output=8da13acf666e16ba input=142beabfc66783eb]*/
- {
-     return _testFileExists(path, TRUE);
- }
---- a/Modules/timemodule.c
-+++ b/Modules/timemodule.c
-@@ -795,27 +795,100 @@
- #endif
- 
- static PyObject *
--time_strftime(PyObject *module, PyObject *args)
-+time_strftime1(time_char **outbuf, size_t *bufsize,
-+               time_char *format, size_t fmtlen,
-+               struct tm *tm)
- {
--    PyObject *tup = NULL;
--    struct tm buf;
--    const time_char *fmt;
-+    size_t buflen;
-+#if defined(MS_WINDOWS) && !defined(HAVE_WCSFTIME)
-+    /* check that the format string contains only valid directives */
-+    for (const time_char *f = strchr(format, '%');
-+        f != NULL;
-+        f = strchr(f + 2, '%'))
-+    {
-+        if (f[1] == '#')
-+            ++f; /* not documented by python, */
-+        if (f[1] == '\0')
-+            break;
-+        if ((f[1] == 'y') && tm->tm_year < 0) {
-+            PyErr_SetString(PyExc_ValueError,
-+                            "format %y requires year >= 1900 on Windows");
-+            return NULL;
-+        }
-+    }
-+#elif (defined(_AIX) || (defined(__sun) && defined(__SVR4))) && defined(HAVE_WCSFTIME)
-+    for (const time_char *f = wcschr(format, '%');
-+        f != NULL;
-+        f = wcschr(f + 2, '%'))
-+    {
-+        if (f[1] == L'\0')
-+            break;
-+        /* Issue #19634: On AIX, wcsftime("y", (1899, 1, 1, 0, 0, 0, 0, 0, 0))
-+           returns "0/" instead of "99" */
-+        if (f[1] == L'y' && tm->tm_year < 0) {
-+            PyErr_SetString(PyExc_ValueError,
-+                            "format %y requires year >= 1900 on AIX");
-+            return NULL;
-+        }
-+    }
-+#endif
-+
-+    /* I hate these functions that presume you know how big the output
-+     * will be ahead of time...
-+     */
-+    while (1) {
-+        if (*bufsize > PY_SSIZE_T_MAX/sizeof(time_char)) {
-+            PyErr_NoMemory();
-+            return NULL;
-+        }
-+        *outbuf = (time_char *)PyMem_Realloc(*outbuf,
-+                                             *bufsize*sizeof(time_char));
-+        if (*outbuf == NULL) {
-+            PyErr_NoMemory();
-+            return NULL;
-+        }
-+#if defined _MSC_VER && _MSC_VER >= 1400 && defined(__STDC_SECURE_LIB__)
-+        errno = 0;
-+#endif
-+        _Py_BEGIN_SUPPRESS_IPH
-+        buflen = format_time(*outbuf, *bufsize, format, tm);
-+        _Py_END_SUPPRESS_IPH
-+#if defined _MSC_VER && _MSC_VER >= 1400 && defined(__STDC_SECURE_LIB__)
-+        /* VisualStudio .NET 2005 does this properly */
-+        if (buflen == 0 && errno == EINVAL) {
-+            PyErr_SetString(PyExc_ValueError, "Invalid format string");
-+            return NULL;
-+        }
-+#endif
-+        if (buflen == 0 && *bufsize < 256 * fmtlen) {
-+            *bufsize += *bufsize;
-+            continue;
-+        }
-+        /* If the buffer is 256 times as long as the format,
-+           it's probably not failing for lack of room!
-+           More likely, the format yields an empty result,
-+           e.g. an empty format, or %Z when the timezone
-+           is unknown. */
- #ifdef HAVE_WCSFTIME
--    wchar_t *format;
-+        return PyUnicode_FromWideChar(*outbuf, buflen);
- #else
--    PyObject *format;
-+        return PyUnicode_DecodeLocaleAndSize(*outbuf, buflen, "surrogateescape");
- #endif
-+    }
-+}
-+
-+static PyObject *
-+time_strftime(PyObject *module, PyObject *args)
-+{
-+    PyObject *tup = NULL;
-+    struct tm buf;
-     PyObject *format_arg;
--    size_t fmtlen, buflen;
--    time_char *outbuf = NULL;
--    size_t i;
--    PyObject *ret = NULL;
-+    Py_ssize_t format_size;
-+    time_char *format, *outbuf = NULL;
-+    size_t fmtlen, bufsize = 1024;
- 
-     memset((void *) &buf, '\0', sizeof(buf));
- 
--    /* Will always expect a unicode string to be passed as format.
--       Given that there's no str type anymore in py3k this seems safe.
--    */
-     if (!PyArg_ParseTuple(args, "U|O:strftime", &format_arg, &tup))
-         return NULL;
- 
-@@ -848,101 +921,65 @@
-     else if (buf.tm_isdst > 1)
-         buf.tm_isdst = 1;
- 
--#ifdef HAVE_WCSFTIME
--    format = PyUnicode_AsWideCharString(format_arg, NULL);
--    if (format == NULL)
--        return NULL;
--    fmt = format;
--#else
--    /* Convert the unicode string to an ascii one */
--    format = PyUnicode_EncodeLocale(format_arg, "surrogateescape");
--    if (format == NULL)
--        return NULL;
--    fmt = PyBytes_AS_STRING(format);
--#endif
--
--#if defined(MS_WINDOWS) && !defined(HAVE_WCSFTIME)
--    /* check that the format string contains only valid directives */
--    for (outbuf = strchr(fmt, '%');
--        outbuf != NULL;
--        outbuf = strchr(outbuf+2, '%'))
--    {
--        if (outbuf[1] == '#')
--            ++outbuf; /* not documented by python, */
--        if (outbuf[1] == '\0')
--            break;
--        if ((outbuf[1] == 'y') && buf.tm_year < 0) {
--            PyErr_SetString(PyExc_ValueError,
--                        "format %y requires year >= 1900 on Windows");
--            Py_DECREF(format);
--            return NULL;
-+    format_size = PyUnicode_GET_LENGTH(format_arg);
-+    if ((size_t)format_size > PY_SSIZE_T_MAX/sizeof(time_char) - 1) {
-+        PyErr_NoMemory();
-+        return NULL;
-+    }
-+    format = PyMem_Malloc((format_size + 1)*sizeof(time_char));
-+    if (format == NULL) {
-+        PyErr_NoMemory();
-+        return NULL;
-+    }
-+    _PyUnicodeWriter writer;
-+    _PyUnicodeWriter_Init(&writer);
-+    writer.overallocate = 1;
-+    Py_ssize_t i = 0;
-+    while (i < format_size) {
-+        fmtlen = 0;
-+        for (; i < format_size; i++) {
-+            Py_UCS4 c = PyUnicode_READ_CHAR(format_arg, i);
-+            if (!c || c > 127) {
-+                break;
-+            }
-+            format[fmtlen++] = (char)c;
-         }
--    }
--#elif (defined(_AIX) || (defined(__sun) && defined(__SVR4))) && defined(HAVE_WCSFTIME)
--    for (outbuf = wcschr(fmt, '%');
--        outbuf != NULL;
--        outbuf = wcschr(outbuf+2, '%'))
--    {
--        if (outbuf[1] == L'\0')
--            break;
--        /* Issue #19634: On AIX, wcsftime("y", (1899, 1, 1, 0, 0, 0, 0, 0, 0))
--           returns "0/" instead of "99" */
--        if (outbuf[1] == L'y' && buf.tm_year < 0) {
--            PyErr_SetString(PyExc_ValueError,
--                            "format %y requires year >= 1900 on AIX");
--            PyMem_Free(format);
--            return NULL;
-+        if (fmtlen) {
-+            format[fmtlen] = 0;
-+            PyObject *unicode = time_strftime1(&outbuf, &bufsize,
-+                                               format, fmtlen, &buf);
-+            if (unicode == NULL) {
-+                goto error;
-+            }
-+            if (_PyUnicodeWriter_WriteStr(&writer, unicode) < 0) {
-+                Py_DECREF(unicode);
-+                goto error;
-+            }
-+            Py_DECREF(unicode);
-         }
--    }
--#endif
- 
--    fmtlen = time_strlen(fmt);
--
--    /* I hate these functions that presume you know how big the output
--     * will be ahead of time...
--     */
--    for (i = 1024; ; i += i) {
--        outbuf = (time_char *)PyMem_Malloc(i*sizeof(time_char));
--        if (outbuf == NULL) {
--            PyErr_NoMemory();
--            break;
--        }
--#if defined _MSC_VER && _MSC_VER >= 1400 && defined(__STDC_SECURE_LIB__)
--        errno = 0;
--#endif
--        _Py_BEGIN_SUPPRESS_IPH
--        buflen = format_time(outbuf, i, fmt, &buf);
--        _Py_END_SUPPRESS_IPH
--#if defined _MSC_VER && _MSC_VER >= 1400 && defined(__STDC_SECURE_LIB__)
--        /* VisualStudio .NET 2005 does this properly */
--        if (buflen == 0 && errno == EINVAL) {
--            PyErr_SetString(PyExc_ValueError, "Invalid format string");
--            PyMem_Free(outbuf);
--            break;
-+        Py_ssize_t start = i;
-+        for (; i < format_size; i++) {
-+            Py_UCS4 c = PyUnicode_READ_CHAR(format_arg, i);
-+            if (c == '%') {
-+                break;
-+            }
-         }
--#endif
--        if (buflen > 0 || i >= 256 * fmtlen) {
--            /* If the buffer is 256 times as long as the format,
--               it's probably not failing for lack of room!
--               More likely, the format yields an empty result,
--               e.g. an empty format, or %Z when the timezone
--               is unknown. */
--#ifdef HAVE_WCSFTIME
--            ret = PyUnicode_FromWideChar(outbuf, buflen);
--#else
--            ret = PyUnicode_DecodeLocaleAndSize(outbuf, buflen, "surrogateescape");
--#endif
--            PyMem_Free(outbuf);
--            break;
-+        if (start < i) {
-+            if (_PyUnicodeWriter_WriteSubstring(&writer, format_arg, start, i) < 0) {
-+                goto error;
-+            }
-         }
--        PyMem_Free(outbuf);
-     }
--#ifdef HAVE_WCSFTIME
-+
-+    PyMem_Free(outbuf);
-     PyMem_Free(format);
--#else
--    Py_DECREF(format);
--#endif
--    return ret;
-+    return _PyUnicodeWriter_Finish(&writer);
-+error:
-+    PyMem_Free(outbuf);
-+    PyMem_Free(format);
-+    _PyUnicodeWriter_Dealloc(&writer);
-+    return NULL;
- }
- 
- #undef time_char
-@@ -1292,8 +1329,14 @@
- #else
- 
-     /* clock_gettime */
-+// gh-115714: Don't use CLOCK_PROCESS_CPUTIME_ID on WASI.
-+/* CLOCK_PROF is defined on NetBSD, but not supported.
-+ * CLOCK_PROCESS_CPUTIME_ID is broken on NetBSD for the same reason as
-+ * CLOCK_THREAD_CPUTIME_ID (see comment below).
-+ */
- #if defined(HAVE_CLOCK_GETTIME) \
--    && (defined(CLOCK_PROCESS_CPUTIME_ID) || defined(CLOCK_PROF))
-+    && (defined(CLOCK_PROCESS_CPUTIME_ID) || defined(CLOCK_PROF)) \
-+    && !defined(__NetBSD__)
-     struct timespec ts;
- 
-     if (HAVE_CLOCK_GETTIME_RUNTIME) {
-@@ -1499,9 +1542,16 @@
-     return 0;
- }
- 
-+/* CLOCK_THREAD_CPUTIME_ID is broken on NetBSD: the result of clock_gettime()
-+ * includes the sleeping time, that defeats the purpose of the clock.
-+ * Also, clock_getres() does not support it.
-+ * https://github.com/python/cpython/issues/123978
-+ * https://gnats.netbsd.org/57512
-+ */
- #elif defined(HAVE_CLOCK_GETTIME) && \
--      defined(CLOCK_PROCESS_CPUTIME_ID) && \
--      !defined(__EMSCRIPTEN__) && !defined(__wasi__)
-+      defined(CLOCK_THREAD_CPUTIME_ID) && \
-+      !defined(__EMSCRIPTEN__) && !defined(__wasi__) && \
-+      !defined(__NetBSD__)
- #define HAVE_THREAD_TIME
- 
- #if defined(__APPLE__) && defined(__has_attribute) && __has_attribute(availability)
---- a/Objects/dictobject.c
-+++ b/Objects/dictobject.c
-@@ -3634,8 +3634,8 @@
- "D.__sizeof__() -> size of D in memory, in bytes");
- 
- PyDoc_STRVAR(update__doc__,
--"D.update([E, ]**F) -> None.  Update D from dict/iterable E and F.\n\
--If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]\n\
-+"D.update([E, ]**F) -> None.  Update D from mapping/iterable E and F.\n\
-+If E is present and has a .keys() method, then does:  for k in E.keys(): D[k] = E[k]\n\
- If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v\n\
- In either case, this is followed by: for k in F:  D[k] = F[k]");
- 
---- a/Objects/exceptions.c
-+++ b/Objects/exceptions.c
-@@ -2961,46 +2961,55 @@
- static PyObject *
- UnicodeEncodeError_str(PyObject *self)
- {
--    PyUnicodeErrorObject *uself = (PyUnicodeErrorObject *)self;
-+    PyUnicodeErrorObject *exc = (PyUnicodeErrorObject *)self;
-     PyObject *result = NULL;
-     PyObject *reason_str = NULL;
-     PyObject *encoding_str = NULL;
- 
--    if (!uself->object)
-+    if (exc->object == NULL) {
-         /* Not properly initialized. */
-         return PyUnicode_FromString("");
-+    }
- 
-     /* Get reason and encoding as strings, which they might not be if
-        they've been modified after we were constructed. */
--    reason_str = PyObject_Str(uself->reason);
--    if (reason_str == NULL)
-+    reason_str = PyObject_Str(exc->reason);
-+    if (reason_str == NULL) {
-         goto done;
--    encoding_str = PyObject_Str(uself->encoding);
--    if (encoding_str == NULL)
-+    }
-+    encoding_str = PyObject_Str(exc->encoding);
-+    if (encoding_str == NULL) {
-         goto done;
-+    }
-+
-+    Py_ssize_t len = PyUnicode_GET_LENGTH(exc->object);
-+    Py_ssize_t start = exc->start, end = exc->end;
- 
--    if (uself->start < PyUnicode_GET_LENGTH(uself->object) && uself->end == uself->start+1) {
--        Py_UCS4 badchar = PyUnicode_ReadChar(uself->object, uself->start);
-+    if ((start >= 0 && start < len) && (end >= 0 && end <= len) && end == start + 1) {
-+        Py_UCS4 badchar = PyUnicode_ReadChar(exc->object, start);
-         const char *fmt;
--        if (badchar <= 0xff)
-+        if (badchar <= 0xff) {
-             fmt = "'%U' codec can't encode character '\\x%02x' in position %zd: %U";
--        else if (badchar <= 0xffff)
-+        }
-+        else if (badchar <= 0xffff) {
-             fmt = "'%U' codec can't encode character '\\u%04x' in position %zd: %U";
--        else
-+        }
-+        else {
-             fmt = "'%U' codec can't encode character '\\U%08x' in position %zd: %U";
-+        }
-         result = PyUnicode_FromFormat(
-             fmt,
-             encoding_str,
-             (int)badchar,
--            uself->start,
-+            start,
-             reason_str);
-     }
-     else {
-         result = PyUnicode_FromFormat(
-             "'%U' codec can't encode characters in position %zd-%zd: %U",
-             encoding_str,
--            uself->start,
--            uself->end-1,
-+            start,
-+            end - 1,
-             reason_str);
-     }
- done:
-@@ -3074,41 +3083,46 @@
- static PyObject *
- UnicodeDecodeError_str(PyObject *self)
- {
--    PyUnicodeErrorObject *uself = (PyUnicodeErrorObject *)self;
-+    PyUnicodeErrorObject *exc = (PyUnicodeErrorObject *)self;
-     PyObject *result = NULL;
-     PyObject *reason_str = NULL;
-     PyObject *encoding_str = NULL;
- 
--    if (!uself->object)
-+    if (exc->object == NULL) {
-         /* Not properly initialized. */
-         return PyUnicode_FromString("");
-+    }
- 
-     /* Get reason and encoding as strings, which they might not be if
-        they've been modified after we were constructed. */
--    reason_str = PyObject_Str(uself->reason);
--    if (reason_str == NULL)
-+    reason_str = PyObject_Str(exc->reason);
-+    if (reason_str == NULL) {
-         goto done;
--    encoding_str = PyObject_Str(uself->encoding);
--    if (encoding_str == NULL)
-+    }
-+    encoding_str = PyObject_Str(exc->encoding);
-+    if (encoding_str == NULL) {
-         goto done;
-+    }
-+
-+    Py_ssize_t len = PyBytes_GET_SIZE(exc->object);
-+    Py_ssize_t start = exc->start, end = exc->end;
- 
--    if (uself->start < PyBytes_GET_SIZE(uself->object) && uself->end == uself->start+1) {
--        int byte = (int)(PyBytes_AS_STRING(((PyUnicodeErrorObject *)self)->object)[uself->start]&0xff);
-+    if ((start >= 0 && start < len) && (end >= 0 && end <= len) && end == start + 1) {
-+        int badbyte = (int)(PyBytes_AS_STRING(exc->object)[start] & 0xff);
-         result = PyUnicode_FromFormat(
-             "'%U' codec can't decode byte 0x%02x in position %zd: %U",
-             encoding_str,
--            byte,
--            uself->start,
-+            badbyte,
-+            start,
-             reason_str);
-     }
-     else {
-         result = PyUnicode_FromFormat(
-             "'%U' codec can't decode bytes in position %zd-%zd: %U",
-             encoding_str,
--            uself->start,
--            uself->end-1,
--            reason_str
--            );
-+            start,
-+            end - 1,
-+            reason_str);
-     }
- done:
-     Py_XDECREF(reason_str);
-@@ -3171,42 +3185,49 @@
- static PyObject *
- UnicodeTranslateError_str(PyObject *self)
- {
--    PyUnicodeErrorObject *uself = (PyUnicodeErrorObject *)self;
-+    PyUnicodeErrorObject *exc = (PyUnicodeErrorObject *)self;
-     PyObject *result = NULL;
-     PyObject *reason_str = NULL;
- 
--    if (!uself->object)
-+    if (exc->object == NULL) {
-         /* Not properly initialized. */
-         return PyUnicode_FromString("");
-+    }
- 
-     /* Get reason as a string, which it might not be if it's been
-        modified after we were constructed. */
--    reason_str = PyObject_Str(uself->reason);
--    if (reason_str == NULL)
-+    reason_str = PyObject_Str(exc->reason);
-+    if (reason_str == NULL) {
-         goto done;
-+    }
-+
-+    Py_ssize_t len = PyUnicode_GET_LENGTH(exc->object);
-+    Py_ssize_t start = exc->start, end = exc->end;
- 
--    if (uself->start < PyUnicode_GET_LENGTH(uself->object) && uself->end == uself->start+1) {
--        Py_UCS4 badchar = PyUnicode_ReadChar(uself->object, uself->start);
-+    if ((start >= 0 && start < len) && (end >= 0 && end <= len) && end == start + 1) {
-+        Py_UCS4 badchar = PyUnicode_ReadChar(exc->object, start);
-         const char *fmt;
--        if (badchar <= 0xff)
-+        if (badchar <= 0xff) {
-             fmt = "can't translate character '\\x%02x' in position %zd: %U";
--        else if (badchar <= 0xffff)
-+        }
-+        else if (badchar <= 0xffff) {
-             fmt = "can't translate character '\\u%04x' in position %zd: %U";
--        else
-+        }
-+        else {
-             fmt = "can't translate character '\\U%08x' in position %zd: %U";
-+        }
-         result = PyUnicode_FromFormat(
-             fmt,
-             (int)badchar,
--            uself->start,
--            reason_str
--        );
--    } else {
-+            start,
-+            reason_str);
-+    }
-+    else {
-         result = PyUnicode_FromFormat(
-             "can't translate characters in position %zd-%zd: %U",
--            uself->start,
--            uself->end-1,
--            reason_str
--            );
-+            start,
-+            end - 1,
-+            reason_str);
-     }
- done:
-     Py_XDECREF(reason_str);
---- a/Objects/unicodeobject.c
-+++ b/Objects/unicodeobject.c
-@@ -257,7 +257,8 @@
-     // value, to help detect bugs in optimizations.
- 
-     while (PyDict_Next(dict, &pos, &key, &value)) {
--       if (_Py_IsImmortal(key)) {
-+        assert(PyUnicode_CHECK_INTERNED(key) != SSTATE_INTERNED_IMMORTAL_STATIC);
-+        if (PyUnicode_CHECK_INTERNED(key) == SSTATE_INTERNED_IMMORTAL) {
-            count++;
-        }
-     }
-@@ -691,10 +692,14 @@
- 
-     /* Check interning state */
- #ifdef Py_DEBUG
-+    // Note that we do not check `_Py_IsImmortal(op)`, since stable ABI
-+    // extensions can make immortal strings mortal (but with a high enough
-+    // refcount).
-+    // The other way is extremely unlikely (worth a potential failed assertion
-+    // in a debug build), so we do check `!_Py_IsImmortal(op)`.
-     switch (PyUnicode_CHECK_INTERNED(op)) {
-         case SSTATE_NOT_INTERNED:
-             if (ascii->state.statically_allocated) {
--                CHECK(_Py_IsImmortal(op));
-                 // This state is for two exceptions:
-                 // - strings are currently checked before they're interned
-                 // - the 256 one-latin1-character strings
-@@ -710,11 +715,9 @@
-             break;
-         case SSTATE_INTERNED_IMMORTAL:
-             CHECK(!ascii->state.statically_allocated);
--            CHECK(_Py_IsImmortal(op));
-             break;
-         case SSTATE_INTERNED_IMMORTAL_STATIC:
-             CHECK(ascii->state.statically_allocated);
--            CHECK(_Py_IsImmortal(op));
-             break;
-         default:
-             Py_UNREACHABLE();
-@@ -1899,7 +1902,8 @@
- static PyObject*
- get_latin1_char(Py_UCS1 ch)
- {
--    return Py_NewRef(LATIN1(ch));
-+    PyObject *o = LATIN1(ch);
-+    return o;
- }
- 
- static PyObject*
-@@ -15015,7 +15019,7 @@
-     {
-         PyObject *r = (PyObject *)_Py_hashtable_get(INTERNED_STRINGS, s);
-         if (r != NULL) {
--            assert(_Py_IsImmortal(r));
-+            assert(_PyUnicode_STATE(r).statically_allocated);
-             assert(r != s);  // r must be statically_allocated; s is not
-             Py_DECREF(s);
-             return Py_NewRef(r);
---- a/PC/_wmimodule.cpp
-+++ b/PC/_wmimodule.cpp
-@@ -55,12 +55,26 @@
-     IWbemLocator *locator = NULL;
-     IWbemServices *services = NULL;
-     IEnumWbemClassObject* enumerator = NULL;
-+    HRESULT hr = S_OK;
-     BSTR bstrQuery = NULL;
-     struct _query_data *data = (struct _query_data*)param;
- 
--    HRESULT hr = CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);
-+    // gh-125315: Copy the query string first, so that if the main thread gives
-+    // up on waiting we aren't left with a dangling pointer (and a likely crash)
-+    bstrQuery = SysAllocString(data->query);
-+    if (!bstrQuery) {
-+        hr = HRESULT_FROM_WIN32(ERROR_NOT_ENOUGH_MEMORY);
-+    }
-+
-+    if (SUCCEEDED(hr)) {
-+        hr = CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);
-+    }
-+
-     if (FAILED(hr)) {
-         CloseHandle(data->writePipe);
-+        if (bstrQuery) {
-+            SysFreeString(bstrQuery);
-+        }
-         return (DWORD)hr;
-     }
- 
-@@ -102,12 +116,6 @@
-         );
-     }
-     if (SUCCEEDED(hr)) {
--        bstrQuery = SysAllocString(data->query);
--        if (!bstrQuery) {
--            hr = HRESULT_FROM_WIN32(ERROR_NOT_ENOUGH_MEMORY);
--        }
--    }
--    if (SUCCEEDED(hr)) {
-         hr = services->ExecQuery(
-             bstr_t("WQL"),
-             bstrQuery,
---- a/PC/launcher2.c
-+++ b/PC/launcher2.c
-@@ -1938,6 +1938,7 @@
- 
- struct AppxSearchInfo APPX_SEARCH[] = {
-     // Releases made through the Store
-+    { L"PythonSoftwareFoundation.Python.3.14_qbz5n2kfra8p0", L"3.14", 10 },
-     { L"PythonSoftwareFoundation.Python.3.13_qbz5n2kfra8p0", L"3.13", 10 },
-     { L"PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0", L"3.12", 10 },
-     { L"PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0", L"3.11", 10 },
-@@ -1946,8 +1947,9 @@
-     { L"PythonSoftwareFoundation.Python.3.8_qbz5n2kfra8p0", L"3.8", 10 },
- 
-     // Side-loadable releases. Note that the publisher ID changes whenever we
--    // renew our code-signing certificate, so the newer ID has a higher
--    // priority (lower sortKey)
-+    // change our code signing certificate subject, so the newer IDs have higher
-+    // priorities (lower sortKey)
-+    { L"PythonSoftwareFoundation.Python.3.14_3847v3x7pw1km", L"3.14", 11 },
-     { L"PythonSoftwareFoundation.Python.3.13_3847v3x7pw1km", L"3.13", 11 },
-     { L"PythonSoftwareFoundation.Python.3.12_3847v3x7pw1km", L"3.12", 11 },
-     { L"PythonSoftwareFoundation.Python.3.11_3847v3x7pw1km", L"3.11", 11 },
-@@ -2030,7 +2032,8 @@
- 
- 
- struct StoreSearchInfo STORE_SEARCH[] = {
--    { L"3", /* 3.12 */ L"9NCVDN91XZQP" },
-+    { L"3", /* 3.13 */ L"9PNRBTZXMB4Z" },
-+    { L"3.14", L"9NTRHQCBBPR8" },
-     { L"3.13", L"9PNRBTZXMB4Z" },
-     { L"3.12", L"9NCVDN91XZQP" },
-     { L"3.11", L"9NRWMJP3717K" },
---- a/Parser/action_helpers.c
-+++ b/Parser/action_helpers.c
-@@ -1043,6 +1043,9 @@
-   }
- 
-   asdl_expr_seq *args = _Py_asdl_expr_seq_new(total_len, arena);
-+  if (args == NULL) {
-+    return NULL;
-+  }
- 
-   Py_ssize_t i = 0;
-   for (i = 0; i < args_len; i++) {
-@@ -1210,6 +1213,9 @@
-   }
- 
-   asdl_expr_seq *expressions = _Py_asdl_expr_seq_new(req_size, p->arena);
-+  if (expressions == NULL) {
-+    return NULL;
-+  }
- 
-   Py_ssize_t raw_index, req_index = 0;
-   for (raw_index = 0; raw_index < raw_size; raw_index++) {
-@@ -1400,6 +1406,9 @@
-     }
- 
-     asdl_expr_seq *values = _Py_asdl_expr_seq_new(2, arena);
-+    if (values == NULL) {
-+      return NULL;
-+    }
-     asdl_seq_SET(values, 0, debug_text);
-     asdl_seq_SET(values, 1, formatted_value);
-     return _PyAST_JoinedStr(values, lineno, col_offset, debug_end_line,
---- a/Parser/asdl_c.py
-+++ b/Parser/asdl_c.py
-@@ -813,14 +813,15 @@
-     Py_ssize_t i, numfields = 0;
-     int res = -1;
-     PyObject *key, *value, *fields;
--    if (_PyObject_LookupAttr((PyObject*)Py_TYPE(self), state->_fields, &fields) < 0) {
-+
-+    fields = PyObject_GetAttr((PyObject*)Py_TYPE(self), state->_fields);
-+    if (fields == NULL) {
-         goto cleanup;
-     }
--    if (fields) {
--        numfields = PySequence_Size(fields);
--        if (numfields == -1) {
--            goto cleanup;
--        }
-+
-+    numfields = PySequence_Size(fields);
-+    if (numfields == -1) {
-+        goto cleanup;
-     }
- 
-     res = 0; /* if no error occurs, this stays 0 to the end */
---- a/Python/Python-ast.c
-+++ b/Python/Python-ast.c
-@@ -863,14 +863,15 @@
-     Py_ssize_t i, numfields = 0;
-     int res = -1;
-     PyObject *key, *value, *fields;
--    if (_PyObject_LookupAttr((PyObject*)Py_TYPE(self), state->_fields, &fields) < 0) {
-+
-+    fields = PyObject_GetAttr((PyObject*)Py_TYPE(self), state->_fields);
-+    if (fields == NULL) {
-         goto cleanup;
-     }
--    if (fields) {
--        numfields = PySequence_Size(fields);
--        if (numfields == -1) {
--            goto cleanup;
--        }
-+
-+    numfields = PySequence_Size(fields);
-+    if (numfields == -1) {
-+        goto cleanup;
-     }
- 
-     res = 0; /* if no error occurs, this stays 0 to the end */
---- a/Python/compile.c
-+++ b/Python/compile.c
-@@ -5191,9 +5191,12 @@
- }
- 
- 
--/* List and set comprehensions and generator expressions work by creating a
--  nested function to perform the actual iteration. This means that the
--  iteration variables don't leak into the current scope.
-+/* List and set comprehensions work by being inlined at the location where
-+  they are defined. The isolation of iteration variables is provided by
-+  pushing/popping clashing locals on the stack. Generator expressions work
-+  by creating a nested function to perform the actual iteration.
-+  This means that the iteration variables don't leak into the current scope.
-+  See https://peps.python.org/pep-0709/ for additional information.
-   The defined function is called immediately following its definition, with the
-   result of that call being the result of the expression.
-   The LC/SC version returns the populated container, while the GE version is
---- a/Python/future.c
-+++ b/Python/future.c
-@@ -39,12 +39,20 @@
-         } else if (strcmp(feature, "braces") == 0) {
-             PyErr_SetString(PyExc_SyntaxError,
-                             "not a chance");
--            PyErr_SyntaxLocationObject(filename, s->lineno, s->col_offset + 1);
-+            PyErr_RangedSyntaxLocationObject(filename,
-+                                             name->lineno,
-+                                             name->col_offset + 1,
-+                                             name->end_lineno,
-+                                             name->end_col_offset + 1);
-             return 0;
-         } else {
-             PyErr_Format(PyExc_SyntaxError,
-                          UNDEFINED_FUTURE_FEATURE, feature);
--            PyErr_SyntaxLocationObject(filename, s->lineno, s->col_offset + 1);
-+            PyErr_RangedSyntaxLocationObject(filename,
-+                                             name->lineno,
-+                                             name->col_offset + 1,
-+                                             name->end_lineno,
-+                                             name->end_col_offset + 1);
-             return 0;
-         }
-     }
---- a/Tools/build/regen-configure.sh
-+++ b/Tools/build/regen-configure.sh
-@@ -5,12 +5,10 @@
- # The check_generated_files job of .github/workflows/build.yml must kept in
- # sync with this script. Use the same container image than the job so the job
- # doesn't need to run autoreconf in a container.
--IMAGE="ubuntu:22.04"
--DEPENDENCIES="autotools-dev autoconf autoconf-archive pkg-config"
-+IMAGE="ghcr.io/python/autoconf:2024.10.06.11200919239"
- AUTORECONF="autoreconf -ivf -Werror"
- 
- WORK_DIR="/src"
--SHELL_CMD="apt-get update && apt-get -yq install $DEPENDENCIES && cd $WORK_DIR && $AUTORECONF"
- 
- abs_srcdir=$(cd $(dirname $0)/../..; pwd)
- 
-@@ -28,4 +26,4 @@
-     PATH_OPT=":Z"
- fi
- 
--"$RUNTIME" run --rm -v "$abs_srcdir:$WORK_DIR$PATH_OPT" "$IMAGE" /usr/bin/bash -c "$SHELL_CMD"
-+"$RUNTIME" run --rm -v "$abs_srcdir:$WORK_DIR$PATH_OPT" "$IMAGE"
---- a/configure.ac
-+++ b/configure.ac
-@@ -1308,6 +1308,9 @@
- ])
- AC_MSG_RESULT([$EXEEXT])
- 
-+# Make sure we keep EXEEXT and ac_exeext sync'ed.
-+AS_VAR_SET([ac_exeext], [$EXEEXT])
-+
- # Test whether we're running on a non-case-sensitive system, in which
- # case we give a warning if no ext is given
- AC_SUBST([BUILDEXEEXT])
---- a/Lib/venv/scripts/nt/activate.bat
-+++ b/Lib/venv/scripts/nt/activate.bat
-@@ -8,7 +8,7 @@
-     "%SystemRoot%\System32\chcp.com" 65001 > nul
- )
- 
--set VIRTUAL_ENV=__VENV_DIR__
-+set "VIRTUAL_ENV=__VENV_DIR__"
- 
- if not defined PROMPT set PROMPT=$P$G
- 
-@@ -24,8 +24,8 @@
- if defined _OLD_VIRTUAL_PATH set PATH=%_OLD_VIRTUAL_PATH%
- if not defined _OLD_VIRTUAL_PATH set _OLD_VIRTUAL_PATH=%PATH%
- 
--set PATH=%VIRTUAL_ENV%\__VENV_BIN_NAME__;%PATH%
--set VIRTUAL_ENV_PROMPT=__VENV_PROMPT__
-+set "PATH=%VIRTUAL_ENV%\__VENV_BIN_NAME__;%PATH%"
-+set "VIRTUAL_ENV_PROMPT=__VENV_PROMPT__"
- 
- :END
- if defined _OLD_CODEPAGE (
---- a/PCbuild/find_python.bat
-+++ b/PCbuild/find_python.bat
-@@ -44,7 +44,7 @@
- @rem If py.exe finds a recent enough version, use that one
- @rem It is fine to add new versions to this list when they have released,
- @rem but we do not use prerelease builds here.
--@for %%p in (3.12 3.11 3.10) do @py -%%p -EV >nul 2>&1 && (set PYTHON=py -%%p) && (set _Py_Python_Source=found %%p with py.exe) && goto :found
-+@for %%p in (3.13 3.12 3.11 3.10) do @py -%%p -EV >nul 2>&1 && (set PYTHON=py -%%p) && (set _Py_Python_Source=found %%p with py.exe) && goto :found
- 
- @if NOT exist "%_Py_EXTERNALS_DIR%" mkdir "%_Py_EXTERNALS_DIR%"
- @set _Py_NUGET=%NUGET%
---- a/PCbuild/get_externals.bat
-+++ b/PCbuild/get_externals.bat
-@@ -55,8 +55,8 @@
- if NOT "%IncludeLibffiSrc%"=="false" set libraries=%libraries%  libffi-3.4.4
- if NOT "%IncludeSSLSrc%"=="false" set libraries=%libraries%     openssl-3.0.15
- set libraries=%libraries%                                       sqlite-3.45.3.0
--if NOT "%IncludeTkinterSrc%"=="false" set libraries=%libraries% tcl-core-8.6.13.0
--if NOT "%IncludeTkinterSrc%"=="false" set libraries=%libraries% tk-8.6.13.0
-+if NOT "%IncludeTkinterSrc%"=="false" set libraries=%libraries% tcl-core-8.6.15.0
-+if NOT "%IncludeTkinterSrc%"=="false" set libraries=%libraries% tk-8.6.15.0
- if NOT "%IncludeTkinterSrc%"=="false" set libraries=%libraries% tix-8.4.3.6
- set libraries=%libraries%                                       xz-5.2.5
- set libraries=%libraries%                                       zlib-1.3.1
-@@ -78,7 +78,7 @@
- set binaries=
- if NOT "%IncludeLibffi%"=="false"  set binaries=%binaries% libffi-3.4.4
- if NOT "%IncludeSSL%"=="false"     set binaries=%binaries% openssl-bin-3.0.15
--if NOT "%IncludeTkinter%"=="false" set binaries=%binaries% tcltk-8.6.13.0
-+if NOT "%IncludeTkinter%"=="false" set binaries=%binaries% tcltk-8.6.15.2
- if NOT "%IncludeSSLSrc%"=="false"  set binaries=%binaries% nasm-2.11.06
- 
- for %%b in (%binaries%) do (
---- a/PCbuild/readme.txt
-+++ b/PCbuild/readme.txt
-@@ -193,7 +193,7 @@
-     Homepage:
-         https://www.sqlite.org/
- _tkinter
--    Wraps version 8.6.6 of the Tk windowing system, which is downloaded
-+    Wraps version 8.6.15 of the Tk windowing system, which is downloaded
-     from our binaries repository at
-     https://github.com/python/cpython-bin-deps.
- 
---- a/PCbuild/tcltk.props
-+++ b/PCbuild/tcltk.props
-@@ -2,7 +2,7 @@
- <Project ToolsVersion="15.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
-   <Import Project="pyproject.props" Condition="$(__PyProject_Props_Imported) != 'true'" />
-   <PropertyGroup>
--    <TclVersion Condition="$(TclVersion) == ''">8.6.13.0</TclVersion>
-+    <TclVersion Condition="$(TclVersion) == ''">8.6.15.2</TclVersion>
-     <TkVersion Condition="$(TkVersion) == ''">$(TclVersion)</TkVersion>
-     <TixVersion Condition="$(TixVersion) == ''">8.4.3.6</TixVersion>
-     <TclMajorVersion>$([System.Version]::Parse($(TclVersion)).Major)</TclMajorVersion>
--- a/debian/patches/ignore-wheeldata.diff
+++ b/debian/patches/ignore-wheeldata.diff
@@ -20,7 +20,7 @@
          for dirpath, dirs, files in os.walk(support.TEST_HOME_DIR):
              dirname = os.path.basename(dirpath)
              # Skip temporary dirs:
-@@ -67,13 +67,14 @@
+@@ -64,13 +64,14 @@
                          "of test directories to install"
                      )
                  )
--- a/debian/patches/link-opt.diff
+++ b/debian/patches/link-opt.diff
@@ -5,7 +5,7 @@
 
 --- a/configure.ac
 +++ b/configure.ac
-@@ -3363,8 +3363,8 @@
+@@ -3360,8 +3360,8 @@
  		LDSHARED='$(CC) -shared'
  		LDCXXSHARED='$(CXX) -shared';;
  	Linux*|GNU*|QNX*|VxWorks*|Haiku*)
@@ -16,7 +16,7 @@
  	FreeBSD*)
  		if [[ "`$CC -dM -E - </dev/null | grep __ELF__`" != "" ]]
  		then
-@@ -3477,7 +3477,7 @@
+@@ -3474,7 +3474,7 @@
  	    LINKFORSHARED="-Wl,-E -Wl,+s";;
  #	    LINKFORSHARED="-Wl,-E -Wl,+s -Wl,+b\$(BINLIBDEST)/lib-dynload";;
  	Linux-android*) LINKFORSHARED="-pie -Xlinker -export-dynamic";;
--- a/debian/patches/local-doc-references.diff
+++ b/debian/patches/local-doc-references.diff
@@ -15,10 +15,10 @@
        <script type="text/javascript" src="{{ pathto('_static/changelog_search.js', 1) }}"></script>{% endif %}
 --- a/Lib/idlelib/help.html
 +++ b/Lib/idlelib/help.html
-@@ -27,7 +27,7 @@
+@@ -26,7 +26,7 @@
+     <link rel="copyright" title="Copyright" href="../copyright.html" />
      <link rel="next" title="Development Tools" href="development.html" />
      <link rel="prev" title="tkinter.ttk — Tk themed widgets" href="tkinter.ttk.html" />
- 
 -    <link rel="canonical" href="https://docs.python.org/3/library/idle.html" />
 +    <link rel="canonical" href="file:///usr/share/doc/python3.12/html/library/idle.html" />
  
--- a/debian/patches/series
+++ b/debian/patches/series
@@ -1,4 +1,4 @@
-git-updates.diff
+#git-updates.diff
 patchlevel-noplus.diff
 #FIXME deb-setup.diff
 deb-locations.diff
--- a/debian/patches/sphinx3.diff
+++ b/debian/patches/sphinx3.diff
@@ -6,7 +6,7 @@
 
 --- a/Doc/conf.py
 +++ b/Doc/conf.py
-@@ -309,6 +309,10 @@
+@@ -297,6 +297,10 @@
      'literal-block',
  ]
  
--- a/debian/patches/sysconfigdata-name.diff
+++ b/debian/patches/sysconfigdata-name.diff
@@ -7,7 +7,7 @@
 
 --- a/Lib/sysconfig.py
 +++ b/Lib/sysconfig.py
-@@ -498,7 +498,7 @@
+@@ -498,7 +498,7 @@ def _get_sysconfigdata_name():
      multiarch = getattr(sys.implementation, '_multiarch', '')
      return os.environ.get(
          '_PYTHON_SYSCONFIGDATA_NAME',
@@ -18,7 +18,7 @@
  
 --- a/Makefile.pre.in
 +++ b/Makefile.pre.in
-@@ -2339,8 +2339,10 @@
+@@ -2336,8 +2336,10 @@ libinstall:	all $(srcdir)/Modules/xxmodu
  			esac; \
  		done; \
  	done
@@ -33,7 +33,7 @@
  	-PYTHONPATH=$(DESTDIR)$(LIBDEST) $(RUNSHARED) \
 --- a/configure.ac
 +++ b/configure.ac
-@@ -164,7 +164,7 @@
+@@ -164,7 +164,7 @@ AC_ARG_WITH([build-python],
      dnl Build Python interpreter is used for regeneration and freezing.
      ac_cv_prog_PYTHON_FOR_REGEN=$with_build_python
      PYTHON_FOR_FREEZE="$with_build_python"
